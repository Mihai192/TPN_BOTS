<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream fin("lee1.in");
ofstream fout("lee1.out");

#define INF 1000000001

struct punct{
    int i, j;
}p[7], rez[10];

int n, m, k, a[101][101], b[101][101], P[10], x[10];
int is, js, ifi, jfi;
int dmin = INF;
int l;

int di[]={0,0,1,-1};
int dj[]={-1,1,0,0};

void sterg(int g[101][101]){
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            g[i][j] = 0;
}

bool inmat(int i, int j){
    return i <= n &amp;&amp; j <= m &amp;&amp; i >= 1 &amp;&amp; j >= 1;
}

int lee(int si, int sj, int fi, int fj){
    sterg(b);
    queue<punct> Q;
    Q.push({si, sj});
    b[si][sj] = 1;
    while(!Q.empty()){
        punct x = Q.front();
        for(int d = 0; d <= 3; ++d){
            int i = di[d] + x.i;
            int j = dj[d] + x.j;
            if(inmat(i, j) &amp;&amp; a[i][j] == 0 &amp;&amp; b[i][j] == 0)
            b[i][j] = b[x.i][x.j] + 1, Q.push({i, j});
        }
        Q.pop();
    }
    return b[fi][fj] - 1;
}

void verif(){
    int dist = 0;
    for(int i = 1; i <= k + 1; ++i)
        dist += lee(p[x[i-1]].i, p[x[i-1]].j, p[x[i]].i, p[x[i]].j);
    if(dist < dmin){
        dmin = dist;
        for(int i = 1; i <= k; ++i)
            rez[i] = {p[x[i]].i, p[x[i]].j};
    }
}

void back(int t){
    for(int i = 1; i <= k; ++i)
        if(!P[i]){
            P[i] = 1;
            x[t] = i;
            if(t == k)
                verif();
            else
                back(t + 1);
            P[i] = 0;
        }
}

int main(){
    fin >> n >> m;
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            fin >> a[i][j];
    fin >> is >> js >> ifi >> jfi;
    fin >> k;
    for(int i = 1; i <= k; ++i)
        fin >> p[i].i >> p[i].j;
    p[0] = {is, js};
    p[k + 1] = {ifi, jfi};
    x[k + 1] = k + 1;
    back(1);
    fout << dmin << '\n';
    fout << is << ',' << js << '\n';
    for(int i = 1; i <= k; ++i)
        fout << rez[i].i << ',' << rez[i].j << '\n';
    fout << ifi << ',' << jfi << '\n';
    return 0;
}</pre>
