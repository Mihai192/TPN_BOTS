<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

ifstream cin("nunta.in");
ofstream cout("nunta.out");

int n, m, cnt, nrc, P[20001], jum, sp[10001];
vector<vector<int>> G(20001);
pair<int, int> cc[20001];

void lee(int nod){
    cnt = 1;
    P[nod] = 1;
    queue<int> Q;
    Q.push(nod);
    while(!Q.empty()){
        int x = Q.front();
        for(auto i:G[x])
            if(!P[i])
                P[i] = 1, cnt++, Q.push(i);
        Q.pop();
    }
}

bool comp(pair<int, int> a, pair<int, int> b){
    if(a.second != b.second)
        return a.second < b.second;
    return a.first < b.first;
}

int main(){
    int x, y;
    cin >> n >> m;
    for(int i = 1; i <= m; ++i){
        cin >> x >> y;
        G[x].push_back(y);
        G[y].push_back(x);
    }
    for(int i = 1; i <= n; ++i)
        if(!P[i]){
            lee(i);
            if(cnt > 1){
                cc[++nrc].first = i;
                cc[nrc].second = cnt;
            }
        }
    jum = n / 2 + 1;
    cout << nrc << '\n';
    cnt = 0;
    for(int i = 1; i <= nrc; ++i)
        sp[i] = sp[i-1] + cc[i].second;
    int h = nrc + 1;
    for(int i = 1; i <= nrc; ++i)
        if(sp[i] >= jum &amp;&amp; h == nrc + 1)
            h = i;
    for(int i = h; i <= nrc; ++i){
        int j = 0;
        while(sp[i] - sp[j] >= jum)
            j++;
        cnt+=j;
    }
    cout << cnt;
    return 0;
}</pre>
