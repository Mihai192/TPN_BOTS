<h3>Cerința</h3>

<p>Scrieţi un program care citeşte din fişierul de intrare un număr natural <code>n</code> şi o matrice pătratică <code>A</code> de dimensiune <code>n x n</code>, elementele acesteia putând avea doar valorile <code>0</code> sau <code>1</code>. Două elemente <code>A[i1][j1]</code> şi <code>A[i2][j2]</code> sunt <em>adiacente</em> dacă sunt “vecine” pe o aceeaşi linie sau coloană: (<code>i1 = i2</code> şi <code>|j1-j2|=1</code>) sau (<code>j1=j2</code> şi <code>|i1-i2|=1</code>). Un <em>grup</em> reprezintă fie un singur element al matricii având valoarea <code>1</code>, neadiacent cu niciun alt element cu valoarea <code>1</code>, fie o mulţime de elemente având valoarea <code>1</code>, fiecare dintre ele fiind adiacent cu cel puţin un alt element din mulţimea respectivă şi neadiacent cu niciun alt element din alt grup. Programul afişează în fişierul de ieşire numărul de grupuri conţinute de matrice.</p>

<h3>Date de intrare</h3>

<p>Fișierul de intrare <code>grupuri.in</code> conține pe prima linie numărul <code>n</code>, iar pe următoarele <code>n</code> linii câte <code>n</code> numere naturale <code>0</code> sau <code>1</code>, reprezentând elementele matricei <code>A</code>.</p>

<h3>Date de ieșire</h3>

<p>Fișierul de ieșire <code>grupuri.out</code> va conține pe prima linie numărul de grupuri prezente în matricea din fişierul de intrare.</p>

<h3>Restricții și precizări</h3>

<ul>
	<li><code>2 ≤ n ≤ 100</code></li>
</ul>

<h3>Exemplu:</h3>

<p><code>grupuri.in</code></p>

<pre contenteditable="true" editable="true">4
1 0 0 1
0 0 1 1
0 1 0 1
1 1 0 0</pre>

<p><code>grupuri.out</code></p>

<pre contenteditable="true" editable="true">3</pre>

<h3>Explicație</h3>

<p>Cele trei grupuri din fişierul de intrare sunt (considerând matricea indexată de la <code>1</code> la <code>n</code>):<br>
<code>G1 = {(1, 1)}</code><br>
<code>G2 = {(1, 4), (2, 3), (2, 4), (3, 4)}</code><br>
<code>G3 = {(3, 2), (4, 1), (4, 2)}</code></p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("grupuri.in");
ofstream cout("grupuri.out");

int a[102][102];

void fill(int i, int j, int c)
{
    a[i][j] = c;
    if(a[i-1][j] == 1) 
      fill(i-1, j, c);
    if(a[i][j+1] == 1)
      fill(i, j+1, c);
    if(a[i+1][j] == 1) 
      fill(i+1, j, c);
    if(a[i][j-1] == 1) 
      fill(i, j-1, c);
}

int main()
{
    int n, c = 0;
    cin >> n;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <=n; j++)
            cin >> a[i][j];
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            if(a[i][j] == 1)
            {
                c++;
                fill(i, j, c + 1);
            }
    cout << c;
    return 0;
}</pre>
