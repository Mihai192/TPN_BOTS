<h1>Cerința</h1>

<p>Se dau două șiruri de numere <code>A</code> și <code>B</code>.Calculati <code>A</code> ∩ <code>B</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>memory009.in</code> conține pe prima linie numerele <code>n</code>, <code>m</code> (lungimile celor două șiruri), iar pe a doua linie <code>n</code> numere naturale separate prin spații, iar pe a treia linie <code>m</code> numere naturale separate prin spații .</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>memory009.out</code> va conține mulțimea <code>M</code> care reprezinta mulțimea <code>A</code> ∩ <code>B</code>, în ordine crescătoare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ m ≤ 1.000.000</code></li>
	<li>numerele de pe a doua linie și a treia a fișierului de intrare vor fi mai mici sau egale cu <code>30</code></li>
	<li><i>în fișierul de ieșire nu se repetă elementele !</i></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595360390&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2302%2Fmemory009&amp;flash=0&amp;wgl=1&amp;dt=1595360390333&amp;bpp=10&amp;bdt=230&amp;idt=170&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4501740445736&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360390&amp;ga_hid=1922125457&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1062&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066357%2C21066623&amp;oid=3&amp;pvsid=138297636891210&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2366%2Fmasterpiece001&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=vh5W9IEEey&amp;p=https%3A//www.pbinfo.ro&amp;dtd=176" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CK7R9sqM3-oCFRDPuwgdVvsJwA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>memory009.in</code></p>

<pre contenteditable="true" editable="true">3 2
2 5 3
5 9</pre>

<p><code>memory009.out</code></p>

<pre contenteditable="true" editable="true">5</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream fin("memory009.in");
ofstream fout("memory009.out");
int main()
{
    int n , m , x , f1[32]={0} , f2[32]={0};
    fin >> n >> m;
    for(int i = 0 ; i < n ; ++i)
    {
        fin >> x;
        f1[x]++;
    }
    for(int i = 0 ; i < m ; ++i)
    {
        fin >> x;
        f2[x]++;
    }
    for(int i = 0 ; i <= 30 ; ++i)
    {
        if(f2[i]!=0 &amp;&amp; f1[i]!=0)
            fout << i <<" ";
    }

    fin.close();
    fout.close();

    return 0;
}</pre>
