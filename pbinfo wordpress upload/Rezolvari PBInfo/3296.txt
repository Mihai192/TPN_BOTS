<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("convert_submatrix.in");
ofstream cout("convert_submatrix.out");

char s[101];
int m[101][10], maxi = 1;

bool inmat(int i, int j){
    return i < strlen(s) &amp;&amp; j <= 8;
}

int ok(int i1, int j1, int i2, int j2){
    int cnt = 0;
    if(i2-i1 == j2-j1 &amp;&amp; inmat(i2,j2)){
        for(int i = i1; i <= i2; ++i)
            for(int j = j1; j <= j2; ++j)
                cnt+=m[i][j];
        if(cnt == 0 || cnt == (i2-i1+1)*(j2-j1+1))
            return i2-i1+1;
    }
    return -1;
}

int main(){
    cin.getline(s, 101);
    int i = 0;
    while(s[i]){
        int x = s[i];
        int j = 8;
        while(x){
            m[i][j--] = x % 2;
            x/=2;
        }
        i++;
    }
    for(int i = 0; i < strlen(s); ++i)
        for(int j = 1; j <= 8; ++j)
            for(int t = 0; t <= 7; ++t)
                    maxi = max(ok(i,j,i+t,j+t), maxi);
    cout << maxi;
    return 0;
}</pre>
