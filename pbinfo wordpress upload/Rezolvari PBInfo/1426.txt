<p>Păcală a împrumutat fiecărei persoane din satul lui un număr de monezi de aur. Unele persoane sunt credule și Păcală, șiret fiind, doar acestora le-a împrumutat un număr de monezi care, scris invers, este număr prim. Mai târziu, când Păcală vrea să își recupereze banii, persoanelor credule le cere cu <code>s</code> monede mai mult decât le-a împrumutat. Unii săteni creduli sunt prieteni cu primarul și numărul care indică suma de bani împrumutată de ei conține cifra <code>c</code>. Aceste persoane știu de vicleșugul lui Păcală și ei, pentru a nu-l denunța la poliție, îi returnează acestuia cu <code>s</code> monede mai puține decât au primit.</p>

<h1>Cerința</h1>

<p>Cunoscându-se numărul <code>n</code> de săteni, cele <code>n</code> valori reprezentând numărul de monede pe care Păcală le-a împrumutat fiecăruia, cifra <code>c</code> și numărul <code>s</code>, se cere să se afișeze:<br>
a) numărul de bani împrumutaţi fiecărui sătean care este prieten cu primarul<br>
b) numărul persoanelor credule și răspunsul la întrebarea dacă Păcală a câștigat monezi în plus față de cele împrumutate: dacă da, se va afișa pe ecran valoarea <code>1</code>; dacă nu se va câștiga nimic în plus și nici nu va pierde nimic se va afișa valoarea <code>0</code>, iar dacă va pierde monezi față de cele împrumutate se va afișa valoarea <code>-1</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>pozne.in</code> conține pe prima linie numărul <code>p</code>. Dacă <code>p</code> este egal cu <code>1</code>, în fișierul <code>pozne.out</code> se va afișa doar cerința de la punctul a), iar dacă <code>p</code> este egal cu <code>2</code>, în fișierul <code>pozne.out</code> se va afișa doar cerința de la punctul b).</p>

<p>A doua linie conține numerele <code>n s c</code>, în această ordine, iar a treia linie conține <code>n</code> valori, reprezentând numărul de monezi împrumutate de Păcală sătenilor.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>pozne.out</code> conţine o singură linie pe care se va afișa:<br>
- pentru cerința a), un şir de numere, separate prin spații, fiecare număr reprezentând numărul de monezi împrumutate unui sătean care este prieten cu primarul (în ordinea în care apar aceste numere în fişierul de intrare).<br>
- pentru cerința b), două numere cu spațiu între ele cu semnificația din enunț.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>0 &lt; n ≤ 1000</code>; <code>0 &lt; s ≤ 500000</code>; <code>0 ≤ c ≤ 9</code></li>
	<li><code>0 &lt;</code> numărul monezilor împrumutate de fiecare sătean <code>≤ 999999</code></li>
	<li>Se garantează că in șir există cel puțin un număr care, scris invers, este număr prim.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>pozne.in</code></p>

<pre contenteditable="true" editable="true">1
7 15 3
121 31 50 33 821 23 91</pre>

<p><code>pozne.out</code></p>

<pre contenteditable="true" editable="true">31 33 23</pre>

<h3>Explicație</h3>

<p>Fiecare din cele trei numere conține cifra <code>c</code> (în cazul nostru <code>3</code>).</p>

<h1>Exemplul 2</h1>

<p><code>pozne.in</code></p>

<pre contenteditable="true" editable="true">2
7 15 3
121 31 50 33 821 23 91</pre>

<p><code>pozne.out</code></p>

<pre contenteditable="true" editable="true">3 1</pre>

<h3>Explicație</h3>

<p>Se afișează <code>3</code> deoarece <code>31</code>, <code>50</code> și <code>91</code>, scrise invers, sunt numere prime:</p>

<ul>
	<li><code>31 -&gt; 13</code></li>
	<li><code>50 -&gt; 5</code></li>
	<li><code>91 -&gt; 19</code></li>
</ul>

<p>și <code>1</code> deoarece din cele <code>3</code> numere doar de la unu Păcală pierde monezi și de la celelalte <code>2</code> persoane câștigă monezi. Deci, prin vicleșug, Păcală câștigă mai mulți bani decât pierde:</p>

<ul>
	<li><code>31</code> conține cifra <code>c</code> ( <code>-s=-15</code>)</li>
	<li><code>50</code> nu conține cifra <code>c</code> (<code>+s=+15</code>)</li>
	<li><code>91</code> nu conține cifra <code>c</code> (<code>+s=+15</code>)</li>
</ul>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("pozne.in");
ofstream cout("pozne.out");

int prim(int n)
{
    int cnt=0;
    for(int i = 1 ; i * i <= n ; ++i)
    {
        if(n%i==0)
        cnt+=2;
        if(i*i==n)
        cnt--;
    }
    if(cnt==2)
    return 1;
    else
    return 0;
}

int contine(int n , int c)
{
    bool contine=false;
    while(n)
    {
        if(n%10==c)
        contine=true;
        n/=10;
    }
    if(contine)
    return 1;
    else
    return 0;
}

int main()
{
    int t;
    cin >> t;
    int n , s , c;
    cin >> n >> s >> c;
    int x;
    int sum=0 , cnt=0;
    if(t==2)
    {
        for(int i = 0 ; i < n ; ++i)
        {
            cin >> x;
            int ogl=0;
            int cx=x;
            while(cx)
            {
                ogl=ogl*10+cx%10;
                cx/=10;
            }
            if(prim(ogl))
            {
            cnt++;
            if(contine(x,c))
            sum-=s;
            else
            sum+=s;
            }
            
        }
        if(sum>0)
        cout << cnt << ' ' << 1;
        if(sum==0)
        cout << cnt << ' ' << 0;
        if(sum<0)
        cout << cnt << ' ' << -1;
    }
    if(t==1)
    {
        for(int i = 0 ; i < n ; ++i)
        {
            cin >> x;
            if(contine(x,c))
            cout << x << ' ';
        }
    }
}</pre>
