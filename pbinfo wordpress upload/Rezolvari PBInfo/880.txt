<h1>Cerința</h1>

<p>Se dă o tablă dreptunghiulară formată din <code>n</code> linii și <code>m</code> coloane, definind <code>n*m</code> zone, unele dintre ele fiind libere, altele conținând obstacole. Într-o zonă precizată se află un șoarece care se poate deplasa pe tablă trecând din zona curentă în zona învecinată cu aceasta pe linie sau pe coloană. Scopul sau este să ajungă la o bucată de brânză aflată într-o zonă de asemenea precizată, fără a părăsi tabla, fără a trece prin zone care conțin obstacole și fără a trece de două ori prin aceeași zonă.</p>

<p>Determinați o modalitate prin care șoarecele poate să ajungă la bucata de brânză.</p>

<h1>Date de intrare</h1>

<p>Fişierul de intrare <code>soarece2.in</code> conţine pe prima linie numerele <code>n m</code>, separate printr-un spațiu. Următoarele <code>n</code> linii conțin câte <code>m</code> caractere, care descriu tabla: caracterul <code>_</code> corespunde unei zone libere, caracterul <code>#</code> corespunde unei zone ocupate de obstacol, caracterul <code>S</code> corespunde zonei în care se află șoarecele iar caracterul <code>B</code> corespunde zonei în care se află bucata de brânză.</p>

<h1>Date de ieşire</h1>

<p>Fişierul de ieşire <code>soarece2.out</code> va conţine pe prima linie numărul <code>C</code> de deplasări pe care le face șoarecele. </p>

<p>Următoarea linie va conține <code>C</code> caractere din mulțimea <code>{N,E,S,V}</code>, cu următoarea semnificație:</p>

<ul>
	<li><code>N</code> – șoarecele se deplasează spre <code>Nord</code>; din zona  <code>i j</code> ajunge în zona <code>i-1 j</code></li>
	<li><code>E</code> – șoarecele se deplasează spre <code>Est</code>; din zona  <code>i j</code> ajunge în zona <code>i j+1</code></li>
	<li><code>S</code> – șoarecele se deplasează spre <code>Sud</code>; din zona  <code>i j</code> ajunge în zona <code>i+1 j</code></li>
	<li><code>V</code> – șoarecele se deplasează spre <code>Vest</code>; din zona  <code>i j</code> ajunge în zona <code>i j-1</code></li>
</ul>

<p>Numerele de pe fiecare linie fișierului de ieșire sunt separate prin exact un spațiu.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n,m ≤ 1000</code></li>
	<li>zona  în care se află șoarecele și zona în care se află bucata de brânză sunt libere</li>
	<li>dacă nu există nicio modalitate prin care șoarecele va ajunge la bucata de brânză pe prima linie a fișierului de ieșire se va afla valoarea <code>0</code></li>
	<li>oricare traseu valid al șoarecelui este considerat corect</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356625&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F880%2Fsoarece2&amp;flash=0&amp;wgl=1&amp;dt=1595356624901&amp;bpp=4&amp;bdt=208&amp;idt=122&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5336105802747&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356625&amp;ga_hid=983034243&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=26&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1370&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=4164950407903108&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F865%2Fpalat&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=4IQS10L6tQ&amp;p=https%3A//www.pbinfo.ro&amp;dtd=134" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CIqBtsf-3uoCFerEuwgdzWoBVA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>soarece2.in</code></p>

<pre contenteditable="true" editable="true">6 7
_______
_####B_
____##_
S##_#__
_##_#_#
_______</pre>


<p><code>soarece2.out</code></p>

<pre contenteditable="true" editable="true">9
NNNEEEEES</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <iomanip>
using namespace std;
ifstream cin("soarece2.in");
ofstream cout("soarece2.out");
const int di[]={-1 , 0 , 1 , 0};
const int dj[]={0 , 1, 0 , -1};
int n , m , a[1002][1002] , x[1000001] , y[1000001];
int ip , jp , is=1 , js=1 , ind , jnd;
int st = 1 , dr = 1 , rez[10000] , p=1;
char v[1002][1002];
bool inside(int i , int j){return i>=1 &amp;&amp; i<=n &amp;&amp; j>=1 &amp;&amp; j<=m;}
int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= n ; ++i)
    {
        for(int j = 1 ; j <= m ; ++j)
        {
            cin >> v[i][j];
            if(v[i][j]=='_') a[i][j] = 0;
            else if(v[i][j]=='S') ip = i , jp = j , a[i][j] = 0;
            else if(v[i][j]=='B') a[i][j] = 0 , ind = i , jnd = j;
            else a[i][j] = -1;
        }
    }
    a[ip][jp] = 1;
    x[1] = ip;
    y[1] = jp;
    while(st <= dr )
    {
        int i = x[st] , j = y[st];
        for(int k = 0 ; k < 4 ; k++)
        {
            int ii=i+di[k];
            int jj=j+dj[k];
            if(inside(ii , jj) &amp;&amp; a[ii][jj]==0)
            {
                dr++;
                x[dr]=ii , y[dr]=jj , a[ii][jj]=a[i][j]+1;
            }
        }
        st++;
    }
    if(a[ind][jnd]==-1) cout << 0;
    else
    {
        cout << a[ind][jnd]-1 << endl;
        int i = ind , j = jnd;
        while(i!=ip || j!=jp)
        {
            if(a[i-1][j]==a[i][j]-1 &amp;&amp; inside(i-1 , j))
                i-- , rez[p]=1 , p++;
            if(a[i+1][j]==a[i][j]-1 &amp;&amp; inside(i+1 , j))
                i++ , rez[p]=3 , p++;
            if(a[i][j+1]==a[i][j]-1 &amp;&amp; inside(i , j+1))
                j++ , rez[p]=2 , p++;
            if(a[i][j-1]==a[i][j]-1 &amp;&amp; inside(i , j-1))
                j-- , rez[p]=4 , p++;
        }
        for(int i = p - 1 ; i >= 1 ; --i)
        {
            if(rez[i]==1) cout << 'S';
            else if(rez[i]==2) cout << 'V';
            else if(rez[i]==3) cout << 'N';
            else if(rez[i]==4) cout << 'E';
        }
    }
    return 0;
}</pre>
