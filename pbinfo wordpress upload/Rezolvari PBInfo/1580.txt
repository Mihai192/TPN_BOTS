<h1>Cerința</h1>

<p>Se dau trei numere naturale <code>n</code>, <code>k</code> și <code>p</code> și <code>n</code> șiruri formate din litere mici ale alfabetului englez. Înlocuiți a <code>k</code>-a literă din fiecare șir cu a <code>p</code>-a literă din alfabet. Dacă șirul are mai puțin de <code>k</code> litere se va scrie oglinditul lui.</p>

<h1>Date de intrare</h1>

<p>Pe prima linie a fișierului <code>schimb.in</code> se află trei numere naturale <code>n</code>, <code>k</code> și <code>p</code>. Pe următoarele <code>n</code> linii se află <code>n</code> șiruri.</p>

<h1>Date de ieșire</h1>

<p>În fișierul <code>schimb.out</code> se vor scrie noile șiruri, fiecare pe un rând nou.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n, k ≤ 10000</code></li>
	<li><code>1 ≤ p ≤ 26</code></li>
	<li>șirurile au cel mult <code>500</code> de caractere</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>schimb.in</code></p>

<pre contenteditable="true" editable="true">2 4 7
abcde
efg</pre>

<p><code>schimb.out</code></p>

<pre contenteditable="true" editable="true">abcge
gfe</pre>

<h1>Exemplul 2</h1>

<p><code>schimb.in</code></p>

<pre contenteditable="true" editable="true">3 2 3
wqysd
s
sj</pre>

<p><code>schimb.out</code></p>

<pre contenteditable="true" editable="true">wcysd
s
sc</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("schimb.in");
ofstream cout("schimb.out");

int main()
{
    int n , k , p;
    cin >> n >> k >> p;
    char ch = (char)96+p;
    cin.get();
    for(int t = 0 ; t < n ; ++t)
    {
        char a[501];
        cin.getline(a , 501);
        int i = 0;
        int cnt=0;
        bool ok=false;
        int capat=0;
        while(a[i]!='\0')
        {
            if(a[i]!=' ')
                cnt++;
            if(cnt==k)
                ok=true;
            capat=i;
            i++;    
        }
        if(ok)
        {
            i=0;
            while(a[i]!='\0')
            {
                if(i+1==k)
                    cout << ch;
                else
                    cout << a[i];
                i++;    
            }
        }
        else
            while(capat>-1)
            {
                cout << a[capat];
                capat--;
            }
        cout << endl;
    }
    return 0;    
}</pre>
