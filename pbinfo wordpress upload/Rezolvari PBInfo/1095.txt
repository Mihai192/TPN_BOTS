<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream fin("joc4.in");
ofstream fout("joc4.out");

const int  Dim = 5001, Inf = 1 << 30;
int N, K, s, smax, a[2][Dim], b[2][Dim];

int main()
{
    fin >> N >> K;
    for(int i = 0; i < 2; i++)
        for(int j = 0; j < N; j++)
            fin >> a[i][j];
    b[0][0] = a[0][0];
    for (int j = 1; j < N; j++)
        for (int i = 0; i < 2; i++)
        {
            smax = -Inf; s = a[i][j];
            for (int k = 1; k < K &amp;&amp; k <= j; k++)
            {
                s += a[i][j - k];
                smax = max(smax, s + b[1 - i][j - k]);
            }
            b[i][j] = smax;
        }
    b[1][N - 1] = max(b[1][N - 1], b[0][N - 1] + a[1][N - 1]);
    fout << b[1][N - 1];
    return 0;
}</pre>
