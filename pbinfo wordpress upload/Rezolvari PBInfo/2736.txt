<h1>Cerința</h1>

<p>Se citește numărul <code>n</code> și apoi <code>n</code> articole cu structura: <code>prenume nume salariu vârstă funcție număr_de_telefon email</code>. Fiecare articol este plasat pe câte o linie, câmpurile sale fiind separate prin câte un spațiu. Câmpurile <code>salariu</code> și <code>vârstă</code> conțin numere naturale, celelalte conțin șiruri de caractere.</p>

<p>Se citește apoi un număr natural <code>p</code> cuprins între <code>1</code> și <code>7</code>  și un caracter <code>c</code> care poate fi <code>+</code> sau <code>-</code>.</p>

<p>Se cere ordonarea celor <code>n</code> articole în funcție de <code>p</code> și <code>c</code>, astfel:</p>

<ul>
	<li>dacă <code>p=1</code>, ordonarea se face după <code>prenume</code>; dacă <code>p=2</code>, ordonarea se face după <code>nume</code>; dacă <code>p=3</code>, ordonarea se face după <code>salariu</code>; dacă <code>p=4</code>, ordonarea se face după <code>vârstă</code>; dacă <code>p=5</code>, ordonarea se face după <code>funcție</code>; dacă <code>p=6</code>, ordonarea se face după <code>număr_de_telefon</code>; dacă <code>p=7</code>, ordonarea se face după <code>email</code>;</li>
	<li>dacă <code>c</code> are valoarea <code>+</code>, ordonarea va fi crescătoare, iar dacă <code>c</code> are valoarea <code>-</code>, ordonarea va fi descrescătoare;</li>
	<li>dacă două articole au aceeași valoare a câmpului în raport cu care se face sortarea, ordinea lor nu se va modifica.</li>
</ul>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, apoi cele <code>n</code> articole, fiecare pe câte o linie, câmpurile fiecărui articol fiind separate prin câte un spațiu, apoi <code>p</code> și <code>c</code> cu semnificația din enunț.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran articolele sortate conform cerinței. Fiecare articol va fi afișat pe câte o linie, câmpurile fiind separate prin câte un spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 80</code></li>
	<li>câmpurile numerice vor avea valori pe 64 de biți fără semn, iar celelalte vor avea maximum <code>255</code> de caractere.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356756&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2736%2Fbaza-de-date&amp;flash=0&amp;wgl=1&amp;dt=1595356756619&amp;bpp=4&amp;bdt=206&amp;idt=108&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5211546783671&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356757&amp;ga_hid=58098152&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1272&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066005&amp;oid=3&amp;pvsid=4426551133931484&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3146%2Fsort4&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=kRanL2IA1i&amp;p=https%3A//www.pbinfo.ro&amp;dtd=120" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CI3Wnob_3uoCFYHcsgodrqAF-Q"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">3
Len Trexler 100000 55 Spymaster 5554440192 lentxoxo@lesbos.com
Oliver Regina 0 37 Vigilante 1234567890 mynameisoliverqueen@starcity.com
Sterling Archer 1000000 43 Agent 8423565491 ageofconsentis14inalabamaofeurope@isis.com
2 +</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">Sterling Archer 1000000 43 Agent 8423565491 ageofconsentis14inalabamaofeurope@isis.com
Oliver Regina 0 37 Vigilante 1234567890 mynameisoliverqueen@starcity.com
Len Trexler 100000 55 Spymaster 5554440192 lentxoxo@lesbos.com</pre>

<h3>Explicație</h3>

<p>S-a sortat crescător după nume(2), și s-au afișat.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int n , p;
char c;
struct poz
{
    char prenume[80] , nume[80] , tel[80] , email[80] , fct[80];
    unsigned long long salariu , varsta , pozz;
}a[256];

int comp_prenume(poz a , poz b){return strcmp(a.prenume , b.prenume) < 0 || strcmp(a.prenume , b.prenume) == 0 &amp;&amp; a.pozz < b.pozz;}
int comp_nume(poz a , poz b){return strcmp(a.nume , b.nume) < 0 || strcmp(a.nume , b.nume) == 0 &amp;&amp; a.pozz < b.pozz;}
int comp_tel(poz a , poz b){return strcmp(a.tel , b.tel) < 0 || strcmp(a.tel , b.tel) == 0 &amp;&amp; a.pozz < b.pozz;}
int comp_email(poz a , poz b){return strcmp(a.email , b.email) < 0 || strcmp(a.email , b.email) == 0 &amp;&amp; a.pozz < b.pozz;}
int comp_fct(poz a , poz b){return strcmp(a.fct , b.fct) < 0 || strcmp(a.fct , b.fct) == 0 &amp;&amp; a.pozz < b.pozz;}
int comp_salariu(poz a , poz b){return a.salariu < b.salariu || a.salariu == b.salariu &amp;&amp; a.pozz < b.pozz;}
int comp_varsta(poz a , poz b){return a.varsta < b.varsta || a.varsta == b.varsta &amp;&amp; a.pozz < b.pozz;}

int comp_prenume1(poz a , poz b){return strcmp(a.prenume , b.prenume) > 0 || strcmp(a.prenume , b.prenume) == 0 &amp;&amp; a.pozz > b.pozz;}
int comp_nume1(poz a , poz b){return strcmp(a.nume , b.nume) > 0 || strcmp(a.nume , b.nume) == 0 &amp;&amp; a.pozz > b.pozz;}
int comp_tel1(poz a , poz b){return strcmp(a.tel , b.tel) > 0 || strcmp(a.tel , b.tel) == 0 &amp;&amp; a.pozz > b.pozz;}
int comp_email1(poz a , poz b){return strcmp(a.email , b.email) > 0 || strcmp(a.email , b.email) == 0 &amp;&amp; a.pozz > b.pozz;}
int comp_fct1(poz a , poz b){return strcmp(a.fct , b.fct) > 0 || strcmp(a.fct , b.fct) == 0 &amp;&amp; a.pozz > b.pozz;}
int comp_salariu1(poz a , poz b){return a.salariu > b.salariu || a.salariu == b.salariu &amp;&amp; a.pozz > b.pozz;}
int comp_varsta1(poz a , poz b){return a.varsta > b.varsta || a.varsta == b.varsta &amp;&amp; a.pozz > b.pozz;}
int main()
{
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> a[i].prenume >> a[i].nume >> a[i].salariu >> a[i].varsta >> a[i].fct >> a[i].tel >> a[i].email;
        a[i].pozz = i;
    }

    cin >> p >> c;
    if(c == '+')
    {
        if(p == 1) sort(a + 1 , a + n + 1 , comp_prenume);
        else if(p == 2) sort(a + 1 , a + n + 1 , comp_nume);
        else if(p == 3) sort(a + 1 , a + n + 1 , comp_salariu);
        else if(p == 4) sort(a + 1 , a + n + 1 , comp_varsta);
        else if(p == 5) sort(a + 1 , a + n + 1 , comp_fct);
        else if(p == 6) sort(a + 1 , a + n + 1 , comp_tel);
        else if(p == 7) sort(a + 1 , a + n + 1 , comp_email);
        for(int i = 1 ; i <= n ; i++)
            cout << a[i].prenume << " " << a[i].nume << " " << a[i].salariu << " " << a[i].varsta<< " " << a[i].fct << " " << a[i].tel << " " << a[i].email << '\n';
    }
    else if(c == '-')
    {
        if(p == 1) sort(a + 1 , a + n + 1 , comp_prenume1);
        else if(p == 2) sort(a + 1 , a + n + 1 , comp_nume1);
        else if(p == 3) sort(a + 1 , a + n + 1 , comp_salariu1);
        else if(p == 4) sort(a + 1 , a + n + 1 , comp_varsta1);
        else if(p == 5) sort(a + 1 , a + n + 1 , comp_fct1);
        else if(p == 6) sort(a + 1 , a + n + 1 , comp_tel1);
        else if(p == 7) sort(a + 1 , a + n + 1 , comp_email1);
        for(int i = 1 ; i <= n ; i++)
            cout << a[i].prenume << " " << a[i].nume << " " << a[i].salariu << " " << a[i].varsta<< " " << a[i].fct << " " << a[i].tel << " " << a[i].email << '\n';
    }

}</pre>
