<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <queue>
using namespace std;

ifstream cin("graf1.in");
ofstream cout("graf1.out");

vector <int> G[7501];
int n , m , x , y , X , Y , D1[7501] , D2[7501] , v[7501] , cnt;

void bfs(int nod , int d[])
{
    d[nod] = 0;
    v[nod] = 1;
    queue <int> Q;
    Q.push(nod);
    while(!Q.empty())
    {
        int x = Q.front();
        for(auto i : G[x])
            if(!v[i])
            {
                v[i] = 1;
                d[i] = d[x] + 1;
                Q.push(i);
            }
        Q.pop();
    }
}

int init()
{
    for(int i = 1 ; i <= n ; i++) v[i] = 0;
}

int main()
{
    cin >> n >> m >> X >> Y;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> x >> y;
        G[x].push_back(y);
        G[y].push_back(x);
    }
    bfs(X , D1);
    init();
    bfs(Y , D2);
    init();
    for(int i = 1 ; i <= n ; i++)
        if(D1[i] + D2[i] == D1[Y]) v[D1[i]]++;
        else D1[i] = -1;

    for(int i = 1 ; i <= n ; i++)
        if(v[D1[i]] == 1) cnt++;
    cout << cnt << '\n';
    for(int i = 1 ; i <= n ; i++)
        if(v[D1[i]] == 1) cout << i << " ";
}</pre>
