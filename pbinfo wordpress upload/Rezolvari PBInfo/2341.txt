<h1>Cerința</h1>

<p>Cătălin s-a pierdut iarăși într-o matrice de <code>N</code> linii și <code>M</code> coloane în care unele celule sunt blocate. Cătălin nu găsește ieșirea așa că s-a decis să caute o comoară. El are o harta pe care a desenat-o când era mic și decide să o urmeze. Pe harta este scris un șir format din caracterele <code>U</code>, <code>R</code>, <code>D</code>, <code>L</code>. În fiecare secundă Cătălin se va deplasa în una dintre cele <code>4</code> celule adiacente. Presupunând că la secunda <code>S</code> Cătălin se află în celula <code>i, j</code> el se va mișcă în funcție de al <code>S</code>-lea caracter de pe harta în felul următor: pentru <code>U</code> el va păși în celula <code>i - 1, j</code>; pentru <code>R</code> el va păși în celula <code>i, j + 1</code>; pentru <code>D</code> el va păși în celula <code>i + 1, j</code>, iar pentru <code>L</code>, el va păși în celula <code>i, j - 1</code>.</p>

<p>Dacă celula în care trebuie să pășească este în afara matricei sau este blocată, atunci Cătălin va sta pe loc în acea secunda. În ce celulă ajunge Cătălin?</p>

<h1>Date de intrare</h1>

<p>Pe prima linie a fișierului de intrare​ <code>labirint4.in</code> ​se vor afla <code></code>3 numere naturale N, M și K. Pe următoarele <code>K</code> linii se vor afla cate <code>2</code> numere reprezentând linia și coloana unei celule blocate. Pe următoarea linie se vor afla <code>2</code> numere naturale reprezentând linia, respectiv coloana de pe care începe Cătălin să se miște. Pe ultima linie se va afla numărul de caractere din șirul de pe hartă urmat de acele caractere. </p>

<h1>Date de ieșire</h1>

<p>În fișierul de ieșire​ <code>labirint4.out​</code> se vor afla două numere reprezentând linia și coloana pe care ajunge Cătălin.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤</code> lungimea șirului de pe hartă <code>≤ 10000</code></li>
	<li>Pentru 20 de puncte  <code>1 ≤ N, M ≤ 10000</code> și <code>K = 0</code></li>
	<li>Pentru alte 60 de puncte: <code>1 ≤ N, M ≤ 500</code> și <code>1 ≤ K ≤ N * M</code></li>
	<li>Pentru restul de puncte:  <code>1 ≤ N, M ≤ 10000</code> și <code>1 ≤ K ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595360379&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2341%2Flabirint4&amp;flash=0&amp;wgl=1&amp;dt=1595360379804&amp;bpp=7&amp;bdt=184&amp;idt=142&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=337449150714&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360380&amp;ga_hid=1377105524&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1292&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066357%2C21066392&amp;oid=3&amp;pvsid=1043487859260568&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2398%2Fmoka&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=Ckquu4z90F&amp;p=https%3A//www.pbinfo.ro&amp;dtd=148" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="COuq88WM3-oCFRfhuwgdYE4EeQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>labirint4.in</code></p>

<pre contenteditable="true" editable="true">4 5 7
1 3
1 5 
2 1 
2 4 
2 5 
3 1
3 2
2 2
11
ULRDDRDRDLU </pre>

<p><code>labirint4.out</code></p>

<pre contenteditable="true" editable="true">3 3</pre>

<h3>Explicație</h3>

<p>Traseul lui Catalin este:<br>
(2, 2) → (1, 2) → (1, 1) → (1, 2) → (2, 2) → (2, 3) → (3, 3) → (3, 4) → (4, 4) → (4, 3) → (3, 3)</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;
ifstream cin("labirint4.in");
ofstream cout("labirint4.out");

struct pozitie
{
    int i , j;
};

pozitie o[250000] , C;
int n , m , k , p;
char ch;

int comparare(pozitie a , pozitie b)
{
    return a.i<b.i || a.i == b.i &amp;&amp; a.j < b.j;
}

int libera(int x , int y)
{
    int st = 1 , dr = k;
    while(st <= dr)
    {
        int mij = (st + dr) / 2;
        if(o[mij].i == x &amp;&amp; o[mij].j == y) return 0;
        else
        {
            pozitie c;
            c.i = x;
            c.j = y;
            if(comparare(o[mij] , c)) st = mij+1;
            else dr = mij - 1;
        }
    }
    return 1;
}
int main()
{
    cin >> n >> m >> k;
    for(int i = 1 ; i <= k ; i++)
        cin >> o[i].i >> o[i].j;
    cin >> C.i >> C.j;
    sort(o+1 , o+k+1 , comparare);
    cin >> p;
    for(int i = 1; i <= p ; i++)
    {
        cin >> ch;
        if(ch == 'U' )
        {
            if(C.i-1 >= 1 &amp;&amp; libera(C.i-1 , C.j))
                C.i--;
        }
        else
            if(ch == 'R' )
            {
                if(C.j+1 <=m &amp;&amp; libera(C.i , C.j+1))
                    C.j++;
            }
        else
            if(ch == 'D')
            {
                if(C.i+1 <= n  &amp;&amp; libera(C.i+1 , C.j))
                C.i++;
            }
        else if(ch == 'L')
        {
            if(C.j-1 >= 1 &amp;&amp; libera(C.i , C.j-1))
                C.j--;
        }
    }
    cout << C.i << ' ' << C.j;
}</pre>
