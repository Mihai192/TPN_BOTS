<p>Ana şi Bogdan au găsit la bunicul lor o cutie cu <code>N</code> beţe de aceeaşi lungime. După câteva minute de joacă urmează cearta. Bunicul le-a propus să rupă cele <code>N</code> beţe și apoi Ana să primească fragmentele din mâna stângă, iar Bogdan fragmentele din mâna dreaptă. Zis şi făcut. Copiii au luat fragmentele, le-au numerotat fiecare cu numere de la <code>1</code> la <code>N</code>, le-au măsurat şi acum îşi doresc să lipească fragmentele primite, dar mai au nevoie de câteva informaţii.</p>

<h1>Cerinţe</h1>

<p>Cunoscând <code>N</code> numărul de beţe, <code>a</code><sub><code>1</code></sub>, <code>a</code><sub><code>2</code></sub>,…, <code>a</code><sub><code>N</code></sub> lungimile fragmentelor primite de Ana şi <code>b</code><sub><code>1</code></sub>, <code>b</code><sub><code>2</code></sub>,…, <code>b</code><sub><code>N</code></sub> lungimile fragmentelor primite de Bogdan, să se scrie un program care să determine:</p>

<p>a) lungimea iniţială a beţelor;<br>
b) lungimea celui mai lung băţ care se poate obţine prin lipirea unui fragment aparţinând Anei cu un fragment care aparţine lui Bogdan;<br>
c) numărul beţelor de lungime maximă care se pot obţine prin lipirea unui fragment aparţinând Anei cu un fragment care aparţine lui Bogdan.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>bete1.in</code> conține pe prima linie numărul natural <code>N</code> reprezentând numărul de beţe. Pe a doua linie sunt <code>N</code> numere naturale <code>a</code><sub><code>1</code></sub>, <code>a</code><sub><code>2</code></sub>,…, <code>a</code><sub><code>N</code></sub> reprezentând lungimile fragmentelor primite de Ana şi pe a treia linie sunt <code>N</code> numere naturale <code>b</code><sub><code>1</code></sub>, <code>b</code><sub><code>2</code></sub>,…, <code>b</code><sub><code>N</code></sub> reprezentând lungimile fragmentelor primite de Bogdan.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>bete1.out</code> va conține trei linii. Pe prima linie se va scrie numărul natural <code>L</code> reprezentând lungimea iniţială a beţelor, pe a doua linie se va scrie numărul natural <code>K</code> reprezentând lungimea celui mai lung băţ care se poate obţine prin lipirea unui fragment aparţinând Anei cu un fragment care aparţine lui Bogdan, iar pe a treia linie se va scrie numărul natural <code>P</code> reprezentând numărul beţelor de lungime maximă care se pot obţine prin lipirea unui fragment aparţinând Anei cu un fragment care aparţine lui Bogdan.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N ≤ 1000</code></li>
	<li><code>1 ≤ a</code><sub><code>i</code></sub><code> ≤ 10000</code>, (<code>1≤i≤N</code>)</li>
	<li><code>1 ≤ b</code><sub><code>i</code></sub><code> ≤ 10000</code>, (<code>1≤i≤N</code>)</li>
	<li><code>1 ≤ L ≤ 20000</code></li>
	<li><code>1 ≤ K ≤ 20000</code></li>
	<li><code>1 ≤ P ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595362733&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1051%2Fbete1&amp;flash=0&amp;wgl=1&amp;dt=1595362733726&amp;bpp=5&amp;bdt=215&amp;idt=159&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=2812896079921&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595362734&amp;ga_hid=977402765&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1512&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=1041624657351511&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1753%2Fconcurs2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=kZjSztF6oH&amp;p=https%3A//www.pbinfo.ro&amp;dtd=165" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CN3YqKiV3-oCFSvhuwgdXZQDwA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>bete1.in</code></p>

<pre contenteditable="true" editable="true">6
2 6 7 1 3 5
5 4 7 8 9 3</pre>

<p><code>bete1.out</code></p>

<pre contenteditable="true" editable="true">10
16
1</pre>

<h1>Explicație</h1>

<p>Lungimea iniţială este <code>10</code>, lungimea maximă este <code>16</code> și se poate forma un singur băţ de lungime <code>16</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream fin("bete1.in");
ofstream fout("bete1.out");

int main()
{
    int n;
    fin >> n;
    int a[10000];
    int b[10000];
    int cnt=0;
    int s=0;
    for(int i = 0 ; i < n ; ++i)
    {
    fin >> a[i];
    s+=a[i];
    }
    for(int i = 0 ; i < n ; ++i)
    {
    fin >> b[i];
    s+=b[i];
    }
    sort(a , a+n);
    sort(b , b+n);
    fout << s/n << endl;
    fout << a[n-1]+b[n-1] << endl;
    int max=a[n-1]+b[n-1];
    for(int i = n-1 ; i >= 0 ; --i)
    if(a[i]+b[i]==max)
    cnt++;
    fout << cnt;
    
    fin.close();
    fout.close();
    return 0;    
}</pre>
