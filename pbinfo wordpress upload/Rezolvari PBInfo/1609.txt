<h1>Cerința</h1>

<p>Se dau <code>N</code> drepte paralele în sistemul de axe ortogonale xOy, acestea intersectând axa Ox în <code>N</code> puncte de abscise întregi <code>x1, x2, ... , xN</code>. Determinaţi numărul maxim <code>M</code> de perechi de drepte dintre cele date, pentru care distanţa dintre dreptele din orice pereche este aceeaşi. </p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>paralele.in</code> conține pe prima linie numărul <code>N</code> de drepte, iar pe a doua linie abscisele punctelor de intersecţie ale celor <code>N</code> drepte cu axa Ox.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>paralele.out</code> va conține pe prima linie numărul <code>M</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ N ≤ 1.000</code></li>
	<li><code>-1.000.000 ≤ x1,x2,...,xN ≤ 1.000.000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595353365&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1609%2Fparalele&amp;flash=0&amp;wgl=1&amp;dt=1595353365176&amp;bpp=4&amp;bdt=237&amp;idt=215&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=8657658205298&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353365&amp;ga_hid=1442326893&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1032&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;eid=21065724%2C21066705&amp;oid=3&amp;pvsid=1965525410808128&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F927%2Fdistantapuncte&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=REJJVv57jZ&amp;p=https%3A//www.pbinfo.ro&amp;dtd=238" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPTtk7Xy3uoCFa_Huwgd448HsQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>paralele.in</code></p>

<pre contenteditable="true" editable="true">3
1 5 9 </pre>

<p><code>paralele.out</code></p>

<pre contenteditable="true" editable="true">2</pre>

<h3>Explicație</h3>

<p>Distanţa dintre prima şi a doua dreapta este egală cu distanţa dintre a doua şi a treia dreaptă, deci sunt două perechi de drepte cu aceeaşi distanţă între ele.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstdlib>
using namespace std;

ifstream cin("paralele.in");
ofstream cout("paralele.out");

int a[1001] , f[2000001];

int main()
{
    int n;
    cin >> n;
    for(int i = 1 ; i <= n ; ++i)
        cin >> a[i];
    int val , fmax=0;
    for(int i = 1 ; i <= n ; ++i)
    {
        for(int j = i + 1 ; j <= n ; ++j)
        {
            val = abs(a[i]-a[j]);
            f[val]++;
            if(f[val] > fmax)
                fmax = f[val];
        }
    }
    cout << fmax;
    return 0;
}</pre>
