<p>Se dă un şir de caractere <code>S</code> format din litere mari şi mici ale alfabetului englez, spaţii şi caracterul <code>⌂</code> ce are codul <code>ASCII 127</code>. Fiecare caracter al lui <code>S</code> se codifică printr-o succesiune de <code>1</code> şi <code>0</code> ce reprezintă codul <span class="caps">ASCII</span> al caracterului în baza <code>2</code>. Codul începe cu cifra <code>1</code>, astfel pentru caracterul <code>A</code> codificarea este <code>1000001</code>. Un cuvânt poate fi format din litere şi caracterul <code>⌂</code>. Se consideră matricea <code>M</code> formată din cuvintele șirului <code>S</code> codificate şi memorate pe câte o linie în ordinea în care se găsesc acestea în propoziție.</p>

<h1>Cerința</h1>

<p>Scrieţi un program care, cunoscând <code>S</code> şi <code>K</code>, rezolvă următoarele două cerinţe:<br>
1.	determină <code>L</code>, latura celui mai mare pătrat din matricea <code>M</code> ce conține doar valori de <code>1</code>;<br>
2.	determină <code>NR</code>, câte pătrate de latura <code>K</code> cu toate elementele egale cu <code>1</code> există în matricea <code>M</code>. </p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>asciimat.in</code> conţine pe prima linie cerinţa care trebuie să fie rezolvată (1 sau 2). Pe a doua linie se află șirul <code>S</code>, iar pe a treia linie se află valoarea <code>K</code>, având semnificaţia din enunţ.</p>

<h1>Date de ieșire</h1>

<p>Dacă cerinţa este 1, fişierul de ieşire <code>asciimat.out</code> va conţine o singură linie pe care va fi scris <code>L</code>, latura celui mai mare pătrat din matricea <code>M</code> ce conține doar valori de <code>1</code>.<br>
Dacă cerinţa este 2, fişierul de ieşire <code>asciimat.out</code> va conţine o singură linie pe care va fi scris <code>NR</code>, câte pătrate de latura <code>K</code> cu toate elementele egale cu <code>1</code> există în matricea <code>M</code>.</p>


<h1>Restricții și precizări</h1>

<ul>
	<li>şirul <code>S</code> are cel mult <code>3000</code> de caractere</li>
	<li><code>3 ≤ K ≤ 50</code></li>
	<li>lungimea unui cuvânt nu depăşeşte <code>100</code> de caractere</li>
	<li>fiecare cuvânt este codificat pe o singură linie</li>
	<li>fiecare literă este codificată pe <code>7</code> biţi</li>
	<li>liniile conţin concatenarea codurilor <span class="caps">ASCII</span> ale literelor unui cuvânt, astfel restul valorilor rămase libere din cadrul unei linii vor avea valoarea <code>0</code>.</li>
	<li>numărul de cuvinte din şir nu depăşeşte valoarea <code>300</code>.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>asciimat.in</code></p>

<pre contenteditable="true" editable="true">1
Ana are mere
3</pre>

<p><code>asciimat.out</code></p>

<pre contenteditable="true" editable="true">3</pre>

<h1>Exemplul 2:</h1>

<p><code>asciimat.in</code></p>

<pre contenteditable="true" editable="true">2
Ana are mere
2</pre>

<p><code>asciimat.out</code></p>

<pre contenteditable="true" editable="true">7</pre>

<h3>Explicație</h3>

<p>Matricea obţinută este:</p>

<p><code>1000001110111011000010000000</code><br>
<code>1100001111001011001010000000</code><br>
<code>1101101110010111100101100101</code></p>

<p>La poziția <code>(1,8)</code> în matrice este colţul stânga-sus al unui pătrat de latura <code>3</code> cu toate elementele egale cu <code>1</code>.<br>
Există <code>7</code> pătrate de latură <code>2</code> cu toate elementele egale cu <code>1</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("asciimat.in");
ofstream cout("asciimat.out");

int cer , k , A[302][702] , n , m , maxi , cnt;
char s[3001];

int main()
{
    cin >> cer;
    cin.get();
    cin.getline(s , 3001);
    cin >> k;

    char *p;
    p = strtok(s , " ");
    while(p != 0)
    {
        n++;
        int c = 0;
        for(int i = 0 ; p[i] ; i++)
        {
            int x[8] = {0} , j = 0;
            int val = p[i];
            while(val)
            {
                x[++j] = val % 2;
                val /= 2;
            }
            for(int j = 7 ; j >= 1 ; j--)
                A[n][++c] = x[j];
        }
        if(c > m) m = c;
        p = strtok(NULL , " ");
    }

    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            if(A[i][j] == 1)
            {
                A[i][j] += min(A[i - 1][j - 1] , min(A[i - 1][j] , A[i][j - 1]));
                if(A[i][j] > maxi) maxi = A[i][j];
            }
    if(cer == 1) cout << maxi;
    else
    {
        for(int i = 1 ; i <= n ; i++)
        {
            for(int j = 1 ; j <= m ; j++)
                if(A[i][j] >= k) cnt++;
        }
        cout << cnt;
    }

}</pre>
