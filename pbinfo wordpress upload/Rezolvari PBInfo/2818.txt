<h1>Cerința</h1>

<p>Numim <strong>inserare</strong> a unui șir <code>A</code> într-un șir <code>B</code> introducerea, între două elemente ale șirului <code>B</code>, a tuturor elementelor lui <code>A</code>, pe poziții consecutive, în ordinea în care apar în <code>A</code>.</p>

<p>Se dau două șiruri cu <code>n</code>, respectiv <code>m</code> elemente numere întregi ordonate <strong>strict crescător</strong>, în care numerotarea elementelor începe de la <code>1</code>.</p>

<p>Se cere să se afișeze poziția din al doilea șir începând de la care poate fi inserat primul șir, astfel încât șirul obținut să fie strict crescător. Dacă nu există o astfel de poziție, se afișează mesajul <code>imposibil</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>inserare2.in</code> conține numere naturale din intervalul <code>[1,10</code><sup><code>6</code></sup><code>]</code>: pe prima linie numerele <code>m</code> și <code>n</code>, iar pe fiecare dintre următoarele două linii câte un șir de <code>m</code>, respectiv de <code>n</code> numere întregi ordonate strict crescător. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>inserare2.out</code> va conține poziția din al doilea șir începând de la care poate fi inserat primul șir, astfel încât șirul obținut să fie strict crescător. Dacă nu există o astfel de poziție, se afișează mesajul <code>imposibil</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>Proiectați un algoritm eficient din punctul de vedere al spațiului de memorie utilizat și al timpului de executare.
	<ul>
		<li>se recomandă o soluție care să nu memoreze cel  două șiruri în tablouri sau alte structuri de date similare.</li>
	</ul></li>
	</ul>

<h1>Exemplul 1</h1>

<p><code>inserare2.in</code></p>

<pre contenteditable="true" editable="true">4 6
15 16 17 19
7 10 12 20 30 40</pre>

<p><code>inserare2.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h3>Explicație</h3>

<p>Se poate obține șirul <code>7, 10, 12, 15, 16, 17, 19, 20, 30, 40</code>.</p>

<h1>Exemplul 2</h1>

<p><code>inserare2.in</code></p>

<pre contenteditable="true" editable="true">4 6
15 16 17 19
7 14 18 20 30 40</pre>

<p><code>inserare2.out</code></p>

<pre contenteditable="true" editable="true">imposibil</pre>

<h1>Exemplul 3</h1>

<p><code>inserare2.in</code></p>

<pre contenteditable="true" editable="true">4 6
1 2 3 4
7 14 18 20 30 40</pre>

<p><code>inserare2.out</code></p>

<pre contenteditable="true" editable="true">imposibil</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("inserare2.in");
ofstream cout("inserare2.out");
int main()
{
    int n , m , x , mini , maxi , y , ok = 0 , ind = -1;
    cin >> n >> m;
    cin >> mini;
    for(int i = 2 ; i < n ; ++i)
        cin >> x;
    cin >> maxi;
    cin >> x;
    for(int i = 2 ; i <= m ; ++i)
    {
        cin >> x;
        if(y <= mini &amp;&amp; x >= maxi) ok = 1 , ind = i;
        y = x;
    }
    if(ok == 1) cout << ind;
    else cout << "imposibil";
    return 0;
}</pre>
