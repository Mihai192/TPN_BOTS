<h1>Cerința</h1>

<p>În ţara lui Gigel se află <code>n</code> oraşe, numerotate de la <code>1</code> la <code>n</code>, cu proprietatea că din oraşul <code>i</code> exista drum numai spre oraşul <code>i+1</code>, iar din oraşul <code>n</code> există drum spre oraşul <code>1</code>. Gigel doreşte să viziteze toate cel <code>n</code> oraşe în ordine, pornind dintr-un oraş oarecare şi întorcându-se la final în acesta.</p>

<p>Lucrurile nu sunt atât de simple, deoarece pentru a se deplasa dintr-un oraş <code>i</code> în oraşul următor Gigel are nevoie de o cantitate cunoscută de energie, <code>A[i]</code>. De asemenea, în fiecare oraş Gigel acumulează o cantitate cunoscută de energie <code>B[i]</code>, pe care o poate folosi pentru a se deplasa mai departe. Iniţial, Gigel nu are deloc energie. </p>

<p>Determinaţi, dacă există, un oraş din care Gigel poate începe vizitarea celor <code>n</code> oraşe, astfel încât la final Gigel să se întoarcă în oraşul din care a plecat.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> perechi de numere naturale <code>A[i] B[i]</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran numărul <code>P</code>, reprezentând numărul de ordine al oraşului din care poate porni Gigel, respectiv <code>-1</code> dacă drumul nu poate fi parcurs, indiferent din care oraş ar pleca.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li><code>1 ≤ A[i] ≤ 1000</code></li>
	<li><code>0 ≤ B[i] ≤ 1000</code></li>
	<li><strong>Dacă Gigel poate pleca din mai multe oraşe, se va afişa oraşul cu numărul de ordine mai mic</strong></li>
	<li>Dacă energia necesară pentru deplasarea dintr-un oraş în următorul este egală cu energia pe care o are Gigel la plecarea din oraş, deplasarea se poate face.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595360751&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F552%2Fexcursie&amp;flash=0&amp;wgl=1&amp;dt=1595360751633&amp;bpp=23&amp;bdt=231&amp;idt=150&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=6294679854219&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360752&amp;ga_hid=224555179&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1262&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066717&amp;oid=3&amp;pvsid=155763915717488&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F795%2Finaltimi1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=7q17v3aIxx&amp;p=https%3A//www.pbinfo.ro&amp;dtd=157" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CM-VmveN3-oCFQ-Hsgod--APpw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
6 7
8 4
2 6
1 4
2 1</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">3</pre>

<h1>Explicație</h1>

<p>Gigel poate pleca din oraşul <code>3</code> sau din oraşul <code>4</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

struct
{
    int i , j;
}O[1001];

int find1(int n)
{
    for(int i = 0 ; i < n ; i++)
    {
        if(O[i].i > O[i].j) continue;
        int val = O[i].j - O[i].i;
        for(int j = i + 1 ; j < n &amp;&amp; val >= 0 ; j++)
            val += (O[j].j - O[j].i);
        for(int j = 0 ; j < i &amp;&amp; val >= 0 ; j++)
            val += (O[j].j - O[j].i);
        if(val >= 0) return i+1;
    }
    return -1;
}

int main()
{
    int n;
    cin >> n;
    for(int i = 0 ; i < n ; i++)
        cin >> O[i].i >> O[i].j;
    cout << find1(n);
}</pre>
