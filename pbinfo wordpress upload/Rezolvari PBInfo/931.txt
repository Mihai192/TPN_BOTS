<h1>Cerința</h1>

<p>Se dau puncte distincte în plan. Asociem fiecărui punct semidreapta care pornește din originea sistemului de coordonate și trece prin acel punct. Să se afișeze punctele în ordine crescătoare a unghiului pe care semidreapta asociată îl face cu semidreapta spre plus infinit a axei <code>OX</code>. Dacă două unghiuri sunt egale se va afișa punctul cel mai apropiat de origine.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>sortareunghi.in</code> conține pe prima linie <code>n</code>, reprezentând numărul de puncte. Pe următoarele <code>n</code> linii se găsesc câte două numere separate printr-un spațiu, reprezentând abscisa respectiv ordonata câte unui punct.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>sortareunghi.out</code> va conține <code>n</code> linii cu câte două numere separate prin câte un spațiu, reprezentând abscisa respectiv ordonata câte unui punct, în ordinea cerută.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 100</code></li>
	<li>Numerele din fișierul de intrare sunt întregi cuprinse între <code>-1001</code> și <code>1001</code>.</li>
	<li>Unghiurile sunt în intervalul <code>[0,360)</code>.<br>
<code> Punctul </code>(0,0)@ nu se găsește în fișierele de intrare</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595353337&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F931%2Fsortareunghi&amp;flash=0&amp;wgl=1&amp;dt=1595353336961&amp;bpp=6&amp;bdt=205&amp;idt=163&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=5729157453396&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353337&amp;ga_hid=829696947&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1154&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=3641457844730202&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1193%2Fcabana&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=y5NgpmQTEt&amp;p=https%3A//www.pbinfo.ro&amp;dtd=170" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CKee0qfy3uoCFQrkuwgdiecLbA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>sortareunghi.in</code></p>

<pre contenteditable="true" editable="true">3
1 1 
-1 -1 
-1 1</pre>

<p><code>sortareunghi.out</code></p>

<pre contenteditable="true" editable="true">1 1
-1 1
-1 -1</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("sortareunghi.in");
ofstream cout("sortareunghi.out");
struct elem
{
    int x , y;
} ;

int dist(elem a)
{
    return a.x * a.x + a.y * a.y;
}

void citire(elem a[] , int &amp;n)
{
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> a[i].x >> a[i].y;
}

void afisare(elem a[] , int n)
{
    for(int i = 1 ; i <= n ; i++)
        cout << a[i].x << ' ' << a[i].y << '\n';
}

double unghi(elem a)
{
    if(a.x > 0 &amp;&amp; a.y > 0) return 1.0 * a.y / a.x;
    if(a.x < 0 &amp;&amp; a.y > 0) return 10000 + 1.0 * (-a.x) / a.y;
    if(a.x < 0 &amp;&amp; a.y < 0) return 20000 + 1.0 * a.y / a.x;
    if(a.x > 0 &amp;&amp; a.y < 0) return 30000 + 1.0 * a.x / (-a.y);
    if(a.x == 0) if(a.y > 0) return 10000;
                    else return 30000;
    else if(a.y == 0) if(a.x > 0) return 0;
    else return 20000;
}

int comp(elem a , elem b)
{
    return unghi(a) < unghi(b) || (unghi(a) == unghi(b) &amp;&amp; dist(a) < dist(b));
}
int main()
{
    elem a[1001];
    int n;
    citire(a , n);
    sort(a + 1 , a + n + 1 , comp);
    afisare(a , n);
    return 0;
}</pre>
