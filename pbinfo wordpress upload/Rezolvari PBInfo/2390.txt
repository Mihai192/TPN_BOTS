<p>În ultima ecranizare a celebrei piese shakespeariene Romeo și Julieta trăiesc într-un oraș modern, comunică prin e-mail și chiar învață să programeze. Într-o secvență tulburătoare sunt prezentate frământările interioare ale celor doi eroi încercând fără succes să scrie un program care să determine un punct optim de întâlnire. <br>
Ei au analizat harta orașului și au reprezentat-o sub forma unei matrice cu <code>N</code> linii şi <code>M</code> coloane, în matrice fiind marcate cu <b>spațiu</b> zonele prin care se poate trece (străzi lipsite de pericole) şi cu <code>X</code> zonele prin care nu se poate trece. De asemenea, în matrice au marcat cu <code>R</code> locul în care se află locuința lui Romeo, iar cu <code>J</code> locul în care se află locuința Julietei. Ei se pot deplasa numai prin zonele care sunt marcate cu spaţiu, din poziţia curentă în oricare dintre cele <code>8</code> poziţii învecinate (pe orizontală, verticală sau diagonale).<br>
Cum lui Romeo nu îi place să aştepte şi nici să se lase aşteptat n-ar fi tocmai bine, ei au hotărât că trebuie să aleagă un punct de întâlnire în care atât Romeo, cât şi Julieta să poată ajunge în acelaşi timp, plecând de acasă. Fiindcă la întâlniri amândoi vin într-un suflet, ei estimează timpul necesar pentru a ajunge la întâlnire prin numărul de elemente din matrice care constituie drumul cel mai scurt de acasă până la punctul de întâlnire. Şi cum probabil există mai multe puncte de întâlnire posibile, ei vor să îl aleagă pe cel în care timpul necesar pentru a ajunge la punctul de întâlnire este minim.</p>

<h1>Cerința</h1>

<p>Scrieţi un program care să determine o poziţie pe hartă la care Romeo şi Julieta pot să ajungă în acelaşi timp. Dacă există mai multe soluţii, programul trebuie să determine o soluţie pentru care timpul este minim.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>rj.in</code> conține pe prima linie numerele naturale <code>N M</code>, care reprezintă numărul de linii şi respectiv de coloane ale matricei, separate prin spațiu, iar pe fiecare dintre următoarele <code>N</code> linii se află <code>M</code> caractere (care pot fi doar <code>R</code>, <code>J</code>, <code>X</code> sau <b>spațiu</b>) reprezentând matricea.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>rj.out</code> va conține o singură linie pe care sunt scrise trei numere naturale separate prin câte un spaţiu <code>tmin x y</code>, având semnificaţia:<br>
<code>x y</code> reprezinţă punctul de întâlnire (<code>x</code> – numărul liniei, <code>y</code> – numărul coloanei);<br>
<code>tmin</code> este timpul minim în care Romeo (respectiv Julieta) ajunge la punctul de întâlnire.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 &lt; N, M &lt; 101</code></li>
	<li>Liniile şi coloanele matricei sunt numerotate începând cu <code>1</code>.</li>
	<li>Pentru datele de test există întotdeauna soluţie.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595356530&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2390%2Frj&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595356530609&amp;bpp=5&amp;bdt=482&amp;idt=215&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=8031629785525&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356531&amp;ga_hid=1285199843&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=9&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1524&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066357&amp;oid=3&amp;pvsid=960483745499358&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1108%2Ftraseu&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=KLG41Ppzo5&amp;p=https%3A//www.pbinfo.ro&amp;dtd=223" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPyQwJr-3uoCFerEuwgdzWoBVA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>rj.in</code></p>

<pre contenteditable="true" editable="true">5 8
XXR  XXX
 X  X  X
J X X  X
      XX
XXX XXXX</pre>

<p><code>rj.out</code></p>

<pre contenteditable="true" editable="true">4 4 4</pre>

<h3>Explicație</h3>

<p>Traseul lui Romeo poate fi: <code>(1,3), (2,4), (3,4), (4,4)</code>. Deci timpul necesar lui Romeo pentru a ajunge de acasă la punctul de întâlnire este <code>4</code>. Traseul Julietei poate fi: <code>(3,1), (4,2), (4,3), (4,5)</code>. Timpul necesar Julietei pentru a ajunge de acasă la punctul de întâlnire este de asemenea <code>4</code>. În plus, <code>4</code> este punctul cel mai apropiat de ei cu această proprietate.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("rj.in");
ofstream cout("rj.out");
int n, m, xr, yr, xj, yj;
int dl[8]={0, 1, 0, -1, -1, 1, -1, 1};
int dc[8]={1, 0, -1, 0, -1, 1,  1,-1};
char l[102][102];
int r[102][102];
void citire(void);
void afisare(int [102][102]);
void parcurge (int, int, int[102][102]);
int main()
{
    int j[102][102];
    citire();
    parcurge(xr, yr, r);
    parcurge(xj, yj, j);
    afisare(j);
    return 0;
}
void citire(void)
{
    int i, k;
    char c;
    cin>>n>>m;
    for(i = 0; i <= n + 1 ; i++) l[i][0]=l[i][m+1]='X';
    for(i = 0; i <= m + 1 ; i++) l[0][i]=l[n+1][i]='X';
    cin.get(c);
    for(i = 1 ; i <= n ; i++)
        {
            for(k = 1 ; k <= m ; k++)
            {
                cin.get(c);
                l[i][k]=c;
                if (l[i][k]=='R') {xr=i; yr=k; l[i][k]=' ';}
                if (l[i][k]=='J') {xj=i; yj=k; l[i][k]=' ';}
            }
            cin.get(c);
        }
    cin.close();
}

void parcurge (int x0, int y0, int d[102][102])
{
    struct Punct {int l, c;} C[10005], p;
    int inc = 0 , sf = 0 , i , k;
    for(i = 0 ; i <= n + 1 ; i++)
        for(k = 0 ; k <= m + 1 ; k++) d[i][k]=-1;
    C[0].l=x0; C[0].c=y0; d[x0][y0]=1;
    while(inc <= sf)
        {
             p=C[inc++];
             for (i=0; i<8; i++)
                if(l[p.l+dl[i]][p.c+dc[i]]==' ' &amp;&amp; d[p.l+dl[i]][p.c+dc[i]]==-1)
                    {
                        d[p.l+dl[i]][p.c+dc[i]]=1+d[p.l][p.c];
                        C[++sf].l=p.l+dl[i];
                        C[sf].c=p.c+dc[i];
                    }
        }
}
void afisare(int j[102][102])
{
    int tmin=102*102+5, xmin=-1, ymin=-1, i, k;
    for(i = 1 ; i <= n ; i++)
        for(k = 1; k <= m ; k++)
            if(r[i][k]==j[i][k])
                if(r[i][k]<tmin &amp;&amp; r[i][k]!=-1)
                    {tmin=r[i][k]; xmin=i; ymin=k;}
    cout<<tmin<<' '<<xmin<<' '<<ymin<<endl;
    cout.close();
}</pre>
