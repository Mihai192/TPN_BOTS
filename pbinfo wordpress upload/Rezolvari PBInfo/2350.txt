<p>Ionel este pasionat de problemele cu șiruri de numere naturale. Pornind de la un șir dat, el numește grup un subșir de numere care se formează după criterii precizate. De aceasta dată, el alege două criterii:<br>
<b>Criteriul 1</b>: grupează numerele după prima lor cifră. De exemplu, numerele <code>231</code> și <code>2745</code> aparțin aceluiași grup deoarece ambele încep cu aceeași cifră (<code>2</code>).<br>
<b>Criteriul 2</b>: pune în același grup toate numerele care au în componența lor aceleași cifre, indiferent de numărul de apariții a fiecărei cifre. De exemplu, numerele <code>234372</code> și <code>3224727</code> vor fi plasate în același grup deoarece în componența ambelor intră cifrele <code>2</code>, <code>3</code>, <code>4</code> si <code>7</code>, și numai acestea.</p>

<h1>Cerința</h1>

<p>Scrieţi un program care,  pentru un şir dat de n numere naturale, rezolvă următoarele cerințe:</p>

<ol>
	<li>determină numărul minim dintre numerele aparținând celui mai numeros grup care se formează conform <b>Criteriului 1</b>. Dacă sunt mai multe grupuri cu număr maxim de elemente, se va determina numărul minim din grupul pentru care prima cifra este cea mai mică.</li>
	<li>determină numărul  de elemente ale celui mai numeros grup care se formează conform <b>Criteriului 2</b>.</li>
</ol>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>grup.in</code> conţine pe prima linie două  numere naturale <code>n</code> și <code>c</code>, separate printr-un spațiu. Valoarea lui <code>c</code> este <code>1</code> sau <code>2</code>, în funcție de cerința problemei. Pe a doua linie se găsesc <code>n</code> numere naturale, separate prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>grup.out</code> va conţine pe prima linie rezultatul cerut în funcție de cerința indicată în fișierul de intrare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>0 &lt;  n ≤ 10000</code></li>
	<li>Valorile din șirul de intrare sunt numere naturale cu maxim <code>9</code> cifre.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>grup.in</code></p>

<pre contenteditable="true" editable="true">7 1
73532 344 739 34343 34 735 23757</pre>

<p><code>grup.out</code></p>

<pre contenteditable="true" editable="true">34</pre>

<h3>Explicație</h3>

<p><code>c = 1</code>; Se formează următoarele grupuri:<br>
G1: <code>73532</code>, <code>739</code>, <code>735</code> (încep cu cifra <code>7</code>)<br>
G2: <code>344</code>, <code>34343</code>, <code>34</code> (încep cu cifra <code>3</code>)<br>
G3: <code>23753</code> (începe cu cifra <code>2</code>)<br>
G1 si G2 au număr maxim de elemente (<code>3</code>) dar se va afișa minimul din grupul G2 (<code>34</code>).</p>

<h1>Exemplul 2:</h1>

<p><code>grup.in</code></p>

<pre contenteditable="true" editable="true">7 2
73532 344 739 34343 34 433 23757</pre>

<p><code>grup.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h3>Explicație</h3>

<p><code>c = 2</code>; Se formează următoarele grupuri:<br>
G1: <code>73532</code>, <code>23757</code> (cifrele <code>2</code>, <code>3</code>, <code>7</code>, <code>5</code>)<br>
G2: <code>739</code> (cifrele <code>3</code>, <code>7</code>, <code>9</code>)<br>
G3: <code>344</code>, <code>34343</code>, <code>34</code>, <code>433</code> (cifrele <code>3</code>, <code>4</code>)<br>
G3 are numărul maxim de elemente (<code>4</code>)</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;
ifstream cin("grup.in");
ofstream cout("grup.out");
int pc(int n)
{
    int p = 0;
    while(n != 0)
    {
        p = n % 10;
        n /= 10;
    }
    return p;
}
int main()
{
    int n , p , pmax = 0 , ind = 0 , mini = 500001;
    cin >> n >> p;
    if(p == 1)
    {
        int a[50001] , f[50001]={0};
        for(int i = 1 ; i <= n ; ++i)
        {
            cin >> a[i];
            f[pc(a[i])]++;
        }
        for(int i = 1 ; i <=9 ; ++i)
        {
            if(f[i] > pmax) pmax = f[i] , ind = i;
        }
        for(int i = 1 ; i <=n ; ++i)
        {
            if(pc(a[i])==ind &amp;&amp; a[i] <mini) mini = a[i];
        }
        cout << mini;
    }
    else if(p == 2)
    {
        int a[50001] , l = 1 , lmax = 1 , p[50001]={0};
        for(int i = 1 ; i <=n ; ++i)
        {
            cin >> a[i];
            int x = a[i] , f[50001]={0} , prod = 0;
            while(x != 0)
            {
                f[x%10]++;
                x /= 10;
            }
            for(int i = 1 ; i <= 9 ; ++i)
            {
                if(f[i]) prod = prod * 10 + i;
            }
            if(f[0]) prod *= 10;
            p[i] = prod;
        }
        sort(p+1 , p+n+1);
        for(int i = 1 ; i <= n ; ++i)
        {
            if(p[i] == p[i+1])
            {
                l++;
                if(l > lmax) lmax = l;
            }
            else l=1;
        }
        cout << lmax;
    }
}</pre>
