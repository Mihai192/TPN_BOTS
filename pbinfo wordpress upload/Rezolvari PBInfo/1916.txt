<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <bitset>
using namespace std;

ifstream cin("greselile.in");
ofstream cout("greselile.out");

bitset<1000001> V;
int P[1000001], nrp, D[1000001];

void eratostene(){
    V[1]=V[0]=1;
    for(int i = 2; i <= 1001; ++i)
        for(int j = 2; j * i <= 1000001; j++)
            V[j * i] = 1;
    for(int i = 1; i <= 1000001; ++i)
        if(V[i] == 0)
            P[++nrp] = i;
}

int n, t;

int desc(int n){
    int d = 1, cnt = 0;
    while(n > 1){
        int p = 0;
        while(n % P[d] == 0)
            p++, n /= P[d];
        cnt += p;
        d++;
        if(P[d] * P[d] > n &amp;&amp; n != 1){
            cnt++;
            return cnt;
        }
    }
    return cnt;
}

int main(){
    eratostene();
    cin >> n >> t;
    for(int i = 1; i <= n; ++i)
        D[i] = desc(i);
    int x;
    for(int i = 1; i <= t; ++i)
        cin >> x , cout << D[x] << '\n';
    return 0;
}</pre>
