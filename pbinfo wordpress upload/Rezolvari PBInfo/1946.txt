<p>Pentru cei <code></code> elevi din clasa  a VI-a competiția este foarte importantă și, pentru a se pregăti suplimentar, aceștia lucrează de pe site-ul <em>www.PROBLEMEINFORMATICA.RO</em>.</p>

<p>Pentru a-i încuraja, profesoara de informatică le promite câte o notă de 10 primilor <code>k</code> elevi, cei mai harnici și sârguincioși.</p>

<p>Dacă observă că mai sunt elevi care au același număr de probleme rezolvate ca și cel de pe poziția <code>k</code>, atunci profesoara, echidistantă, mai pune în plus note de 10 la toți aceștia.</p>

<h1>Cerința</h1>

<p>Să se scrie un program care, citind numărul <code>N</code> de elevi ai clasei, numărul <code>k</code> de elevi notați cu 10 și <code>N</code> valori reprezentând numărul de probleme rezolvate de fiecare elev, rezolvă cerințele:</p>

<p>1. Afișează în ordine descrescătoare numărul de problem lucrate de elevii care vor primi nota 10.<br>
2. Afișează în ordinea descrescătoare a numărului de probleme rezolvate, numerele de ordine ale tuturor elevilor care primesc nota 10.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>zece.in</code> conține pe prima linie un număr natural <code>C</code> (<code>C</code> poate avea doar valoarea <code>1</code> sau valoarea <code>2</code>). A doua linie conține, în această ordine, separate printr-un un spațiu, numerele <code>N</code> și <code>k</code>. A treia linie conține, în ordine numărul de probleme rezolvate de cei <code>N</code>&nbsp;copii, numerotați de la <code>1</code> la <code>N</code>, exprimate prin numere naturale, despărțite prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Dacă valoarea lui <code>C</code> este <code>1</code>, se va rezolva numai cerința 1). În acest caz, fişierul de ieșire <code>zece.out</code> va conține pe prima linie minim <code>k</code> numere naturale reprezentând numărul de probleme rezolvate de elevii care primesc nota <code>10</code>, în ordinea descrescătoare a acestora (valorile vor fi separate de câte un spațiu).</p>

<p>Dacă valoarea lui <code>C</code> este <code>2</code>, se va rezolva numai cerința 2). În acest caz, fişierul de ieșire <code>zece.out</code> va conține pe prima linie minim <code>k</code> numere naturale reprezentând numerele de ordine ale elevilor în ordinea descrescătoare a numărului de probleme rezolvate de aceștia. Dacă sunt elevi care au același număr de probleme rezolvate se vor afișa elevii în ordinea crescătoare a poziției lor (valorile vor fi separate de câte un spațiu).</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N ≤ 1000</code></li>
	<li><code>1 ≤ k ≤ N</code></li>
	<li>cele <code>N</code> numere citite vor fi mai mici decât <code>1.000.000</code></li>
</ul>

<h1>Exemplul 1</h1>

<p><code>zece.in</code></p>

<pre contenteditable="true" editable="true">1
5 3
18 45 55 60 45</pre>

<p><code>zece.out</code></p>

<pre contenteditable="true" editable="true">60 55 45 45</pre>

<h3>Explicație</h3>

<p>Cerința este 1.<br>
<code>N=5</code>, <code>K=3</code><br>
Cele mai multe probleme rezolvate sunt <code>60 55 45</code> dar pentru că avem doi elevi cu <code>45</code> de probleme, vor primi nota 10, <code>4</code> elevi, în loc de <code>3</code>.</p>


<h1>Exemplul 2</h1>

<p><code>zece.in</code></p>

<pre contenteditable="true" editable="true">2
5 3
18 45 55 60 45</pre>

<p><code>zece.out</code></p>

<pre contenteditable="true" editable="true">4 3 2 5</pre>

<h3>Explicație</h3>

<p>Cerința este 2. <br>
<code>N=5</code>, <code>K=3</code><br>
Elevul situat pe poziția <code>4</code> are cele mai multe probleme – <code>60</code>, este urmat de elevul de pe poziția <code>3</code> care are <code>55</code> de probleme și apoi de elevii de pe pozițiile <code>2</code> și <code>5</code> care au fiecare câte <code>45</code> de probleme.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream fin("zece.in");
ofstream fout("zece.out");
int main()
{
    int p , i , k , n , a[10001] , z , j , aux , b[10001];
    fin >> p >> n >> k;
    for(i = 1 ; i <= n ; i++)
    {
        fin >> a[i];
        b[i] = i;
    }
    for(j = 1 ; j < n ; j++)
        for(z = j + 1 ; z <= n ; z++)
            if(a[z] > a[j])
            {
                aux = a[z] ; a[z] = a[j] ; a[j] = aux;
                aux = b[z] ; b[z] = b[j] ; b[j] = aux;
            }
            else
            if(a[z] == a[j] &amp;&amp; b[j] > b[z])
            {
                aux = b[z];
                b[z] = b[j];
                b[j] = aux;
            }
    if(p == 1)
    {
        for(i = 1 ; i <= k ; i++) fout << a[i] <<" ";
        while(a[i] == a[k])
        {
            fout << a[i] <<" ";
            i++;
        }
    }
    else
    {
        for(i = 1 ; i <= k ; i++) fout << b[i] <<" ";
        while(a[i] == a[k])
        {
            fout << b[i] <<" ";
            i++;
        }
    }
    return 0;
}</pre>
