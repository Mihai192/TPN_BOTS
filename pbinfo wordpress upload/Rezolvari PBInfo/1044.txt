<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>

using namespace std;
int a[100001], n;

ifstream fin("piramide.in");
ofstream fout("piramide.out");

int main()
{
    int pir = 0, nefolosite, x, c, cate, maxim = 0, nrp = 0;
    fin >> n >> x;
    a[1] = 3;
    int    ind = 1;
    while(a[ind] < n)
    {
        a[++ind] = a[ind - 1] + (ind + 1) * (ind + 2) / 2;
        if(x <= a[ind]  &amp;&amp; x > a[ind - 1]) pir = ind;
    }
    if(a[ind] > n ) ind = ind - 1;
    if(pir > ind) pir = 0;
    nefolosite = n - a[ind]; ///numar total de cartonase - numarul din ultima completa

    fout << pir << "\n" << ind << "\n" << nefolosite << " \n";
    int t = 1, nrc = 0, cart;
    fin >> c;
    fin >> cart;
       while( a[t] < cart) ++t;
    for(int i = 2; i <= c; ++i)
    {
        if(cart == a[t]) nrc = 1;
        else
        {
           if(cart < a[t] &amp;&amp; t <= ind)nrc++;
           else
           {
               t++;
               nrc = 0;
           }
        }
        if(nrc > maxim)
        {
            maxim = nrc;
            nrp = t;
        }
        fin >> cart;
    }

     fout << nrp ;

    return 0;
}</pre>
