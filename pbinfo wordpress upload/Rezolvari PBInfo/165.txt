<p>Se dau <code>n</code> numere  naturale reprezentând elementele unui vector.</p>

<h1>Cerinţa</h1>

<p>Să se determine perechea de elemente egal depărtate de centru pentru care suma valorilor este maximă. Dacă sunt mai multe perechi cu suma maximă se va determina perechea cea mai apropiată de capete.</p>

<h1>Date de intrare</h1>

<p>Fişierul de intrare <code>maxsim.in</code> conţine pe prima linie numărul <code>n</code>, iar pe a doua linie <code>n</code> numere naturale separate prin spaţii, reprezentând elementele vectorului.</p>

<h1>Date de ieşire</h1>

<p>Fişierul de ieşire <code>maxsim.out</code> va conţine pe prima linie trei numere <code>S</code>, <code>i</code>, <code>j</code>, separate prin exact un spațiu, reprezentând suma maximă obținuta și pozițiile elementelor din pereche.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>0 &lt; n ≤ 1000</code></li>
	<li>numerele de pe a doua linie a fişierului de intrare vor fi mai mici decât <code>1.000.000.000</code></li>
	<li>elementele vectorului se consideră numerotate de la <code>1</code></li>
	<li><code>1 ≤ i &lt; j ≤ n</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595362504&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F165%2Fmaxsim&amp;flash=0&amp;wgl=1&amp;dt=1595362503903&amp;bpp=6&amp;bdt=207&amp;idt=162&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=1239434262959&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595362504&amp;ga_hid=1160177315&amp;ga_fc=0&amp;iag=0&amp;icsg=69332247773183&amp;dssz=48&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1110&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066004&amp;oid=3&amp;pvsid=2533789437274776&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F237%2Fsume&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=mtA6yg5svd&amp;p=https%3A//www.pbinfo.ro&amp;dtd=169" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPK23bqU3-oCFUXXuwgdT7MCQg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>maxsim.in</code></p>

<pre contenteditable="true" editable="true">7
6 2 5 4 3 6 1</pre>

<p><code>maxsim.out</code></p>

<pre contenteditable="true" editable="true">8 2 6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std ;
ifstream fin("maxsim.in");
ofstream fout("maxsim.out");
int main()
{
    int n , a[1001] , i1 = 0 , i2 = 0 , maxi = -1 ;
    fin >> n;
    for(int i = 1 ; i <= n ; ++i)fin >> a[i];
    for(int i = 1 ; i <= n / 2; ++i)
    {
        if(a[i] + a[n - i + 1] > maxi)
        {
            maxi = a[i] + a[n - i + 1];
            i1 = i;
            i2 = n - i + 1;
        }
    }
    fout << maxi << " " << i1 << " " << i2;
    return 0;
}</pre>
