<h1>Cerința</h1>

<p><code>Laurențiu</code> este un copil pasionat de teoria numerelor, dar și de informatică. Astfel, în timp ce își savura limonada după o zi obositoare de scoală alături de prietenii săi, acestuia i-a venit în minte o problemă interesantă: dându-se un șir de <code>n</code> numere naturale, sortați-l <strong>descrescător</strong> după numărul de cifre distincte, la număr de cifre distincte egal sortați-l <strong>crescător</strong> după suma cifrelor, la suma cifrelor egală sortați-l <strong>crescător</strong> după produsul cifrelor, iar dacă și produsul cifrelor este egal, atunci numerele se vor sorta <strong>crescător</strong> după valorile lor.  </p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>sort4.in</code> conține pe prima linie numărul <code>n</code>, iar pe a două linie <code>n</code> numere naturale separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>sort4.out</code> vă conține șirul sortat.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1.000.000</code></li>
	<li>numerele de pe a două linie a fișierului de intrare vor fi mai mici decât <code>2.000.000.000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356751&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3146%2Fsort4&amp;flash=0&amp;wgl=1&amp;dt=1595356751300&amp;bpp=4&amp;bdt=201&amp;idt=111&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=2309641548607&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356751&amp;ga_hid=212675931&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1098&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=3625746371481163&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1323%2Fmatrice-rara&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=NF0ZqFqNuc&amp;p=https%3A//www.pbinfo.ro&amp;dtd=116" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPCU2YP_3uoCFY6lsgodp2ILYg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>sort4.in</code></p>

<pre contenteditable="true" editable="true">5
111 19 223 51 37</pre>

<p><code>sort4.out</code></p>

<pre contenteditable="true" editable="true">51 223 19 37 111</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <bits/stdc++.h>

#define NM 3002
#define QM 300002
#define XM 1000000000000000
#define INF XM

using namespace std;

class InParser {
private:
    FILE *fin;
    char *buff;
    int sp;

    char read_ch() {
        ++sp;
        if (sp == 4096) {
            sp = 0;
            fread(buff, 1, 4096, fin);
        }
        return buff[sp];
    }

public:
    InParser(const char* nume) {
        fin = fopen(nume, "r");
        buff = new char[4096]();
        sp = 4095;
    }

    InParser&amp; operator >> (int &amp;n) {
        char c;
        while (!isdigit(c = read_ch()) &amp;&amp; c != '-');
        int sgn = 1;
        if (c == '-') {
            n = 0;
            sgn = -1;
        } else {
            n = c - '0';
        }
        while (isdigit(c = read_ch())) {
            n = 10 * n + c - '0';
        }
        n *= sgn;
        return *this;
    }

    InParser&amp; operator >> (long long &amp;n) {
        char c;
        n = 0;
        while (!isdigit(c = read_ch()) &amp;&amp; c != '-');
        long long sgn = 1;
        if (c == '-') {
            n = 0;
            sgn = -1;
        } else {
            n = c - '0';
        }
        while (isdigit(c = read_ch())) {
            n = 10 * n + c - '0';
        }
        n *= sgn;
        return *this;
    }
};

class OutParser {
private:
    FILE *fout;
    char *buff;
    int sp;

    void write_ch(char ch) {
        if (sp == 50000) {
            fwrite(buff, 1, 50000, fout);
            sp = 0;
            buff[sp++] = ch;
        } else {
            buff[sp++] = ch;
        }
    }


public:
    OutParser(const char* name) {
        fout = fopen(name, "w");
        buff = new char[50000]();
        sp = 0;
    }
    ~OutParser() {
        fwrite(buff, 1, sp, fout);
        fclose(fout);
    }

    OutParser&amp; operator << (int vu32) {
        if (vu32 <= 9) {
            write_ch(vu32 + '0');
        } else {
            (*this) << (vu32 / 10);
            write_ch(vu32 % 10 + '0');
        }
        return *this;
    }

    OutParser&amp; operator << (long long vu64) {
        if (vu64 <= 9) {
            write_ch(vu64 + '0');
        } else {
            (*this) << (vu64 / 10);
            write_ch(vu64 % 10 + '0');
        }
        return *this;
    }

    OutParser&amp; operator << (char ch) {
        write_ch(ch);
        return *this;
    }
    OutParser&amp; operator << (const char *ch) {
        while (*ch) {
            write_ch(*ch);
            ++ch;
        }
        return *this;
    }
};

int n;
struct sir
{
    int val;
    int distincte;
    int sum;
    int prod;
    bool operator <(const sir &amp;B) const
    {
        if(this->distincte != B.distincte) return this->distincte > B.distincte;
        if(this->sum != B.sum) return this->sum < B.sum;
        if(this->prod != B.prod) return this->prod < B.prod;
        return this->val < B.val;
    }
}A[1000001];

int main()
{
    InParser fin("sort4.in");
    OutParser fout("sort4.out");
    fin >> n;
    int x,c,s,p;
    for(int i = 1; i <= n; i++)
    {
        fin >> A[i].val;
        x=A[i].val;
        int F[11]={0};
        s = 0,p=1,c = 0;
        while(x)
        {
            F[x%10]++;
            s=s+x%10;
            p=p*(x%10);
            if(F[x%10]==1) c++;
            x/=10;
        }
        A[i].distincte = c;
        A[i].sum = s;
        A[i].prod = p;
    }
    sort(A+1,A+n+1);
    for(int i = 1; i <= n; i++)
        fout<<A[i].val<<' ';
    return 0;
}</pre>
