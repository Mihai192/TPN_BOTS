<h1>Cerința</h1>

<p>Se consideră o clădire de formă dreptunghiulară, formată din <code>n*m</code> camere dispuse sub forma unei matrice cu <code>n</code> linii și <code>m</code> coloane. Anumite camere sunt ocupate şi nu pot fi vizitate, celelalte sunt libere și pot fi vizitate. Dintr-o cameră se poate trece în altă cameră dacă ambele sunt libere și se învecinează pe linie sau pe coloană.</p>

<p>În anumite camere sunt paznici. Din motive de securitate, paznicii se pot deplasa din camera inițială în anumite camere libere din apropiere, dar fără a se îndepărta la o distanță mai mare decât o valoare cunoscută. Fiecare paznic va verifica periodic camerele libere în care poate ajunge.</p>

<p>Să se determine numărul de camere din clădire care nu sunt verificate de niciun paznic.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>paznici.in</code> conține pe prima linie trei numere <code>n m p</code>, reprezentând dimensiunile clădirii şi numărul de paznici.</p>

<p>Urmează <code>n</code> linii cu câte <code>m</code> caractere, care pot fi: <code>-</code>, reprezentând o cameră liberă, respectiv <code>#</code>, reprezentând o cameră ocupată.</p>

<p>Urmează <code>p</code> linii cu câte <code>3</code> valori <code>i j d</code>, reprezentând informaţiile despre paznici. <code>i j</code> reprezintă indicii camerei, iar <code>d</code> reprezintă distanţa pe care se poate  deplasa acel paznic.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>paznici.out</code> va conține pe prima linie numărul <code>C</code> de camere care nu sunt vizitate de niciun paznic.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n , m , p ≤ 200</code></li>
	<li><code>1 ≤ i ≤ n</code></li>
	<li><code>1 ≤ j ≤ m</code></li>
	<li><code>0 ≤ d ≤ 40</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356609&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F884%2Fpaznici&amp;flash=0&amp;wgl=1&amp;dt=1595356609158&amp;bpp=18&amp;bdt=228&amp;idt=138&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=6365934098705&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356609&amp;ga_hid=2045374631&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=23&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1282&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066716&amp;oid=3&amp;pvsid=591565070053657&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3277%2Flee&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=tLACRaLTpy&amp;p=https%3A//www.pbinfo.ro&amp;dtd=148" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CKbl9b_-3uoCFVTjuwgdBp4Oqg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>paznici.in</code></p>

<pre contenteditable="true" editable="true">4 6 3
--#-#-
--##--
------
-----#
1 1 1
1 6 2
4 1 3</pre>

<p><code>paznici.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h1>Explicație</h1>

<p>Mai jos sunt marcate cu <code>1 2 3</code>  camerele în care ajung paznicii respectivi. În unele camere pot să ajungă mai mulţi paznici.</p>

<table>
		<tbody><tr>
			<td> 1 </td>
			<td> 1 </td>
			<td> <ol><br>
</ol></td>
			<td> – </td>
			<td> <ol><br>
</ol></td>
			<td> 2 </td>
		</tr>
		<tr>
			<td> 1 </td>
			<td> 3 </td>
			<td> <ol><br>
</ol></td>
			<td> <ol><br>
</ol></td>
			<td> 2 </td>
			<td> 2 </td>
		</tr>
		<tr>
			<td> 3 </td>
			<td> 3 </td>
			<td> 3 </td>
			<td> – </td>
			<td> – </td>
			<td> 2 </td>
		</tr>
		<tr>
			<td> 3 </td>
			<td> 3 </td>
			<td> 3 </td>
			<td> 3 </td>
			<td> – </td>
			<td> <ol><br>
</ol></td>
		</tr>
</tbody></table>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("paznici.in");
ofstream cout("paznici.out");

const int di[] = {0 , 0 , -1 , 1};
const int dj[] = {-1 , 1 , 0 , 0};

struct poz
{
    int i , j;
};

int n , m , t , x , y , val , cnt , a[201][201] , b[201][201] , c[201][201];
char ma[202][202];

queue <poz>q;

int inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m ;
}

void lee(int x , int y , int val)
{
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            a[i][j] = b[i][j];
    a[x][y] = 1;

    poz r;
    r.i = x , r.j = y;
    q.push(r);
    while(!q.empty())
    {
        poz nou;
        nou = q.front();
        for(int d = 0 ; d < 4 ; d++)
        {
            int inou = nou.i + di[d];
            int jnou = nou.j + dj[d];
            if(inside(inou , jnou) &amp;&amp; a[inou][jnou] == 0 &amp;&amp; a[nou.i][nou.j] <= val)
            {
                a[inou][jnou] = a[nou.i][nou.j] + 1;
                q.push({inou , jnou});
            }
        }
        q.pop();
    }
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            if(c[i][j] == 0) c[i][j] = a[i][j];

}

int main()
{
    cin >> n >> m >> t;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
        {
            cin >> ma[i][j];
            if(ma[i][j] == '#') a[i][j] = -1 , b[i][j] = -1;
        }
    for(int i = 1 ; i <= t ; i++)
    {
        cin >> x >> y >> val;
        lee(x , y , val);

    }
    /*for(int i = 1 ; i <= n ; i ++)
    {
        for(int j = 1 ; j <= m ; j++)
            cout << c[i][j] << " ";
        cout << '\n';
    }*/
    for(int i = 1 ; i <= n ; i ++)
        for(int j = 1 ; j <= m ; j++)
            if(c[i][j] == 0) cnt++;
    cout << cnt;
}</pre>
