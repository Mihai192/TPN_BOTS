<h1>Cerința</h1>

<p>O plajă poate fi văzută ca o matrice cu <code>n</code> linii și <code>m</code> coloane. Elementele matricii sunt codificate cu <code>0</code>, însemnând o poziție liberă, și <code>1</code>, însemnând o poziție ocupată. Să se afle aria celui mai mare dreptunghi liber din matricea dată. </p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>plaja.in</code> conține pe prima linie numerele <code>n</code> și <code>m</code>, iar pe următoarele <code>n</code> linii câte <code>m</code> caractere reprezentând plaja. </p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>plaja.out</code> va conține pe prima linie numărul <code>S</code>, reprezentând aria maximă a unui dreptunghi liber.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n, m ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356667&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1267%2Fplaja&amp;flash=0&amp;wgl=1&amp;dt=1595356667422&amp;bpp=4&amp;bdt=202&amp;idt=137&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=2277878610459&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356667&amp;ga_hid=1706510425&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=34&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1022&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=2941352468246739&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F876%2Fcoada&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=P8Hzf2CeLw&amp;p=https%3A//www.pbinfo.ro&amp;dtd=143" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CI7S3Nv-3uoCFYqrsgodrxsG-g"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>plaja.in</code></p>

<pre contenteditable="true" editable="true">5 5
11111
11000
11100
11100
11110</pre>

<p><code>plaja.out</code></p>

<pre contenteditable="true" editable="true">6</pre>

<h3>Explicație</h3>

<blockquote>
	<p>1 1 1 1 1<br>
1 1 0 <strong>0 0</strong><br>
1 1 1 <strong>0 0</strong><br>
1 1 1 <strong>0 0</strong><br>
1 1 1 1 0</p>
</blockquote>

<p>Suprafata dreptunghiulara de aria maxima este cea ingrosata.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <stack>
#include <cstring>
using namespace std;

ifstream cin("plaja.in");
ofstream cout("plaja.out");

int n , m , x , maxx , v1[10001];
char v[10001];

int get(int vec[], int k)
{
    stack<int> s;
    int maxa = 0, toop , a , i = 0;
    while(i < k)
    {
        if(s.empty() || vec[s.top()] <= vec[i])s.push(i++);
        else
        {
            toop = s.top();
            s.pop();
            a = vec[toop] * (s.empty() ? i : i - s.top() - 1);
            maxa = max(maxa , a);
        }
    }
    while(!s.empty())
    {
        toop = s.top();
        s.pop();
        a = vec[toop] * (s.empty() ? i : i - s.top() - 1);
        maxa = max(maxa , a);
    }
    return maxa;
}
int main()
{
    cin >> n >> m;
    for(int i = 0; i <= n; ++i)
    {
        cin.getline(v , 10001);
        for(int j = 0; j < (int)strlen(v); ++j)
        {
            if((v[j] - '0') == 1) v1[j] = 0;
            else if((v[j] - '0') == 0) v1[j] += 1;
        }
        x = get(v1 , m);
        maxx = max(maxx , x);
    }
    cout << maxx;
    return 0;
}</pre>
