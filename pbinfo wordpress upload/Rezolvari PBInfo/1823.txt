<h1>Cerința</h1>

<p>Un număr natural nenul se numeste <code>“p-prim”</code> dacă el se descompune în <code>p</code> moduri ca produs de doi factori primi între ei. De exemplu, numărul <code>60</code> este <code>4</code>-prim deoarece <code>60</code> se decompune în <code>4</code> moduri ca produs de doi factori primi între ei <code>60=1*60=4*15=5*12=20*3</code>, iar numărul <code>7</code> este <code>1</code>-prim. Pentru un interval închis <code>[a,b]</code> să se determine câte numere <code>p</code>-prime aparţin intervalului. De exemplu intervalul <code>[7, 20]</code> conţine numerele <code>2</code>-prime: <code>10,12, 14,18,20</code>.</p>

<h1>Date de intrare</h1>

<p>Din fişierul de intrare <code>pprim.in</code> se citesc de pe prima linie două numere naturale <code>N</code> şi <code>P</code> şi de pe urmatoarele <code>N</code> linii câte două numere ce reprezintă capetele unui interval.</p>

<h1>Date de ieșire</h1>

<p>În fişierul de ieşire <code>pprim.out</code> se va scrie pe prima linie intervalul cu cele mai multe numere <code>p</code>-prime. Extremitatile intervalului se vor afisa in ordine crecatoare. Dacă există mai multe intervale cu același număr se va afișa ultimul interval citit. Dacă <code>NU</code> există niciun interval se va afișa mesajul <code>nu exista</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>3 ≤ N ≤ 1000</code></li>
	<li><code>1 ≤ P ≤ 1000</code></li>
	<li><code>1 ≤ a[i],b[i] ≤ 33000</code>, unde <code>a[i]</code> şi <code>b[i]</code> sunt capetele intervalelor, <code>i=1,2,..N</code></li>
</ul>


<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595360541&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1823%2Fpprim&amp;flash=0&amp;wgl=1&amp;dt=1595360540914&amp;bpp=6&amp;bdt=192&amp;idt=207&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=7827034174378&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360541&amp;ga_hid=1921769578&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1260&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21065725&amp;oid=3&amp;pvsid=4015044868576363&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1503%2Fputeri5&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=rlmdYxdPgI&amp;p=https%3A//www.pbinfo.ro&amp;dtd=230" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CNGG45KN3-oCFUFAkQUduQAMSA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>pprim.in</code></p>

<pre contenteditable="true" editable="true">4 2
20 7
5 10
35 39
3 4</pre>

<p><code>pprim.out</code></p>

<pre contenteditable="true" editable="true">7 20</pre>

<h3>Explicație</h3>

<ul>
	<li>Intervalul <code>[7, 20]</code> conţine numerele <code>2</code>-prime: <code>10,12,14,15,18,20</code>;</li>
	<li>intervalul <code>[5, 10]</code> conţine numerele <code>2</code>-prim <code>2</code>, <code>6</code> si <code>10</code>;</li>
	<li>intervalul <code>[35, 39]</code> conţine numere <code>2</code>-prime <code>35, 36, 38, 39</code>;</li>
	<li>intervalul <code>[3, 4]</code> nu conţine niciun număr <code>2</code>-prim.</li>
</ul>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;
ifstream cin("pprim.in");
ofstream cout("pprim.out");
int a[33001] , st , dr;
int primeintreele(int a , int b)
{
    int r;
    while(b!=0)
    {
        r = a %b;
        a = b;
        b = r;
    }
    if(a == 1) return 1;
    else return 0;
}
void pprim(int p)
{
    for(int n = 1 ; n <= 33001;++n)
    {
        int cnt = 0;
        for(int i = 1 ; i*i<= n ; ++i)
        {
            if(n%i==0)
            {
                if(primeintreele(i , n/i)==1)cnt++;
            }
        }
        if(cnt==p) a[n]=a[n-1]+1;
        else a[n] = a[n-1];
    }
}
int main()
{
    int n , p , ok = 0 , x , y , st , dr , max = -1;
    cin >> n >> p;
    pprim(p);
    for(int i = 1 ; i <= n ; ++i)
    {
        cin >> x >> y;
        int cnt = 0;
        if(x > y){int aux = x ; x = y ; y = aux;}
        if(a[y]-a[x-1] > max) max = a[y]-a[x-1] , st = x , dr = y;
    }
    if(max == -1) cout << "nu exista";
    else cout << st << " " << dr;
}</pre>
