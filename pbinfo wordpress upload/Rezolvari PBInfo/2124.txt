<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cmath>
using namespace std;

ifstream cin("ornament.in");
ofstream cout("ornament.out");

struct poz
{
    int N , E , S , V;
}a[20];
int x[6][6] , n , m , p[20] , cer , nrsol , gata;

void afisare()
{
    if(cer == 2) nrsol++;
    else
    {
        for(int i = 1 ; i <= m ; i++)
        {
            for(int j = 1 ; j <= m ; j++)
                cout << x[i][j] << " ";
            cout << '\n';
        }
        gata = 1;
    }
}

int verifica(int l , int c)
{
    if(c > 1) if(a[x[l][c - 1]].E != a[x[l][c]].V) return 0;
    if(l > 1) if(a[x[l - 1][c]].S != a[x[l][c]].N) return 0;
    return 1;
}

void back(int l , int c)
{
    for(int i = 1 ; i <= n &amp;&amp; !gata; i++)
        if(!p[i])
        {
            p[i] = 1;
            x[l][c] = i;
            if(verifica(l , c))
                if(l == m &amp;&amp; c == m) afisare();
                else if(c < m) back(l , c + 1);
                    else back(l + 1 , 1);
            p[i] = 0;
        }
}

int main()
{
    cin >> n;
    m = sqrt(n);
    for(int i = 1 ; i <= n ; i++)
        cin >> a[i].N >> a[i].E >> a[i].S >> a[i].V;
    cin >> cer;
    back(1 , 1);
    if(cer == 2) cout << nrsol;
}</pre>
