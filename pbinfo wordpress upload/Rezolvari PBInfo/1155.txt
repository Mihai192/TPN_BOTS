<h1>Cerința</h1>

<p>Se dă un vector <code>x</code> cu <code>n</code> elemente numere naturale, ordonate crescător, și un vector <code>y</code> cu <code>m</code> elemente, de asemenea numere naturale. Verificați pentru fiecare element al vectorului <code>y</code> dacă apare în <code>x</code>.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi cele <code>n</code> elemente ale vectorului <code>x</code>. Apoi și citește <code>m</code> și cele <code>m</code> elemente ale lui <code>y</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran <code>m</code> valori <code>0</code> sau <code>1</code>, separate prin exact un spațiu. A <code>j</code>-a valoare afișată este <code>1</code>, dacă al <code>j</code>-lea element al șirului <code>y</code> apare în <code>x</code>, respectiv  <code>0</code> în caz contrar. </p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 25000</code></li>
	<li><code>1 ≤ m ≤ 200000</code></li>
	<li>elementele celor <code>2</code> vectori vor fi mai mici decât <code>1.000.000.000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595357678&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1155%2Fcautarebinara&amp;flash=0&amp;wgl=1&amp;dt=1595357678089&amp;bpp=4&amp;bdt=213&amp;idt=122&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=466447273714&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595357678&amp;ga_hid=1148328120&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=796399965053650&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1865%2Fsummit&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=ThN1sQnTxP&amp;p=https%3A//www.pbinfo.ro&amp;dtd=129" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CJnP0L2C3-oCFZnHuwgdrZsNgQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">7
1 2 5 6 9 10 14 
8
8 14 9 14 16 15 4 2 </pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">0 1 1 1 0 0 0 1</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

bool gasesc(int elem, int a[], int st, int dr){
    if(st > dr)
        return 0;
    else{
        int mij = (st + dr) / 2;
        if(a[mij] == elem)
            return 1;
        else if(a[mij] < elem)
            return gasesc(elem, a, mij + 1, dr);
        else
            return gasesc(elem, a, st, mij - 1);
    }
}

/*
    while(st <= dr){
        int mij = (st + dr) / 2;
        if(a[mij] == val)
            return 1;
        else if(a[mij] < val)
            st = mij + 1;
        else
            dr = mij - 1;
    }
*/

int main()
{
    int n, m, a[25001], b[200001];
    cin >> n;
    for(int i = 1; i <= n; ++i)
        cin >> a[i];
    cin >> m;
    for(int i = 1; i <= m; ++i)
        cin >> b[i];
    for(int i = 1; i <= m; ++i)
        if(gasesc(b[i], a, 1, n))
            cout << 1 << ' ';
        else
            cout << 0 << ' ';
    return 0;
}</pre>
