<p>Adrian este pasionat de matematică. El utilizează denumirea <strong>maxdiv</strong> pentru numărul care are cei mai mulţi divizori, dintre numerele unui şir dat. Adrian ştie că o secvenţă este un subşir de numere care apar pe poziţii consecutive într-un şir. El denumeşte <strong>secvenţă maxdiv</strong> o secvenţă din şir, formată din cel puţin două numere, ce începe şi se încheie cu un număr maxdiv şi nu conţine alte numere maxdiv în interior. </p>

<p>Având la dispoziţie un şir de <code>n</code> numere naturale, doreşte să afişeze cea mai lungă secvenţă maxdiv şi numărul de secvenţe maxdiv din şir. Dacă şirul de numere dat conţine mai multe secvenţe maxdiv de aceeaşi lungime maximă, se va afişa prima secvenţă de acest tip din şir.</p>

<h1>Cerința</h1>

<p>Scrieţi un program care afişează, pentru un şir dat format din <code>n</code> numere naturale numărul de secvenţe maxdiv şi cea mai lungă secvenţă  maxdiv.</p>

<h1>Date de intrare</h1>

<p>Fişierul de intrare <code>maxdiv.in</code> conţine pe prima linie numărul <code>n</code> separat printr-un spaţiu de un număr natural <code>t</code>, care reprezintă cerinţa: <code>1</code>, dacă se cere numărul de secvenţe maxdiv, respectiv <code>2</code> dacă se cere cea mai lungă secvenţă maxdiv. Linia a doua din fişier conţine cele <code>n</code> numere naturale ale şirului dat.</p>

<h1>Date de ieșire</h1>

<p>Fişierul de ieșire <code>maxdiv.out</code> va conţine pe prima linie un număr natural ce reprezintă numărul de secvenţe maxdiv, pentru şirul de numere dat, dacă cerinţa este <code>1</code>. Dacă cerinţa este <code>2</code>, fişierul de ieşire va conţine un şir de numere naturale, separate între ele prin câte un spaţiu, ce reprezintă cea mai lungă secvenţă maxdiv din şirul dat.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ n ≤ 1000</code></li>
	<li><code>2 ≤ x[i] ≤ 1000000</code>, unde <code>x[i]</code>  reprezintă un număr din şirul dat</li>
	<li>Şirul de numere conţine cel puţin o secvenţă care începe şi se încheie cu un număr maxdiv</li>
	<li>Pentru cerința 1 se acordă 40% din punctaj, iar pentru cerința 2 se acordă  60% din punctaj.</li>
</ul>

<h1>Exemplu 1:</h1>

<p><code>maxdiv.in</code></p>

<pre contenteditable="true" editable="true">7 1
22 60 64 125 315 24 150</pre>

<p><code>maxdiv.out</code></p>

<pre contenteditable="true" editable="true">2</pre>

<h3>Explicație</h3>

<p><strong>Cerinţa 1:</strong> Şirul de numere dat conţine <code>3</code> numere maxdiv: <code>60</code>, <code>315</code> şi <code>150</code> (au fiecare <code>12</code> divizori) și <code>2</code> secvenţe maxdiv : <code>60 64 125 315</code> şi <code>315 24 150</code>. </p>

<h1>Exemplu 2:</h1>

<p><code>maxdiv.in</code></p>

<pre contenteditable="true" editable="true">7 2
22 60 64 125 315 24 150</pre>

<p><code>maxdiv.out</code></p>

<pre contenteditable="true" editable="true">60 64 125 315</pre>

<h3>Explicație</h3>

<p><strong>Cerinţa 2:</strong> Şirul de numere dat conţine <code>2</code> secvenţe maxdiv: <code>60 64 125 315</code> şi <code>315 24 150</code>. Cea mai lungă secvenţă este  <code>60 64 125 315</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("maxdiv.in");
ofstream cout("maxdiv.out");
int n , cer , v[1002] , dmax , a[1002] , k , maxi , c1 , c2 , cnt;

int nrdiv(int n)
{
    int prod = 1 , d = 2;
    while(n > 1)
    {
        int p = 0;
        while(n % d == 0) p++ , n /= d;
        if(p) prod *= (p+1);
        d++;
        if(d*d > n) d = n;
    }
    return prod;
}

int main()
{
    cin >> n >> cer;
    if(cer == 1)
    {
        for(int i = 1 ; i <= n ; i++)
        {
            cin >> v[i];
            a[i] = nrdiv(v[i]);
        }
        for(int i = 1 ; i <= n ; i++)
            if(a[i] > dmax) dmax = a[i];
        for(int i = 1 ; i <= n ; i++)
            if(a[i] == dmax) cnt++;
        cout << cnt - 1;
    }
    else
    {
        for(int i = 1 ; i <= n ; i++)
        {
            cin >> v[i];
            a[i] = nrdiv(v[i]);
        }
        for(int i = 1 ; i <= n ; i++)
            if(a[i] > dmax) dmax = a[i];
        for(int i = 1 ; i <= n ; i++)
            if(a[i] == dmax)
            {
                int j = i + 1;
                k = 1;
                while(j <= n &amp;&amp; a[j] != dmax) j++ , k++;
                if(k > maxi &amp;&amp; a[j] == dmax)
                {
                    maxi = k;
                    c1 = i;
                    c2 = j;
                }
                i = j - 1;
            }
        for(int i = c1 ; i <= c2 ; i++)
            cout << v[i] << ' ';
        }
    return 0;
}</pre>
