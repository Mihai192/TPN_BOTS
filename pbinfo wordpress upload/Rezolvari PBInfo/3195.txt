<h1>Cerință</h1>

<p>Se dă  o mulţime nevidă <code>A</code> cu <code>n</code> elemente numere reale. Să se afișeze elementele mulțimilor <code>A ∩ N</code>, <code>A ∩ Z</code>, <code>A ∩ Q</code> și <code>A ∩ (R-Q)</code>. Numerele raţionale pot fi periodice sau neperiodice. Pentru numerele iraţionale sunt date numai primele zecimale (maxim <code>5</code>), urmate de <code>3</code> puncte.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, apoi <code>n</code> numere reale.</p>

<h1>Date de ieșire</h1>

<p>Programul vor afișa pe câte un rând elementele mulțimilor  <code>A ∩ N</code>, <code>A ∩ Z</code>, <code>A ∩ Q</code> și <code>A ∩ (R-Q)</code>, separate prin câte un spațiu. </p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 50</code></li>
	<li>cele <code>n</code> numere citite vor fi mai mici decât <code>1.000.000.000</code> și mai mari decât <code>-1.000.000.000</code></li>
	<li>dacă una dintre mulțimile cerute este vidă se va afișa corespunzător doar mesajul <code>Multime vida</code></li>
</ul>

<h1>Exemplul 1</h1>

<p><b>Intrare</b></p>

<pre contenteditable="true" editable="true">10
3.14... 1.41... 10000 -3.8(7) 1224 -12 324 3.27 1 6.78912345</pre>

<p><b>Ieșire</b></p>

<pre contenteditable="true" editable="true">10000 1224 324 1 
10000 1224 -12 324 1 
10000 -3.8(7) 1224 -12 324 3.27 1 6.78912345 
3.14... 1.41...</pre>

<h1>Exemplul 2</h1>

<p><b>Intrare</b></p>

<pre contenteditable="true" editable="true">10
3.14... 1.41... 10000.1 -3.8(7) 1224.5 -12 324.432 3.27 1.41 6.78912345</pre>

<p><b>Ieșire</b></p>

<pre contenteditable="true" editable="true">Multime vida
-12
10000.1 -3.8(7) 1224.5 -12 324.432 3.27 1.41 6.78912345
3.14... 1.41...</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

int n;
char m[101][101];

bool N(char s[])
{
    int i = 0;
    while(s[i])
    {
        if(s[i] == '.')
            return false;
        if(s[i] == '-')
            return false;
        i++;
    }
    return true;
}

bool Z(char s[])
{
    int i = 0;
    while(s[i])
    {
        if(s[i] == '.')
            return false;
        i++;
    }
    return true;
}

bool Q(char s[])
{
    int i = 0;
    while(s[i])
    {
        if(i > 1 &amp;&amp; (s[i] == '.' &amp;&amp; s[i-1] == '.'))
            return false;
        i++;
    }
    return true;
}

bool R(char s[])
{
    int i = 0;
    while(s[i])
    {
        if(i > 1 &amp;&amp; s[i] == '.' &amp;&amp; s[i-1] == '.')
            return true;
        i++;
    }
    return false;
}

int main(){
    cin >> n;
    for(int i = 1; i <= n; ++i)
        cin >> m[i];
    bool ok = false;
    for(int i = 1; i <= n; ++i)
        if(N(m[i]))
            ok = true, cout << m[i] << ' ';
    if(!ok)
        cout << "Multime vida";
    cout << "\n";
    ok = false;
    for(int i = 1; i <= n; ++i)
        if(Z(m[i]))
            ok = true, cout << m[i] << ' ';
    if(!ok)
        cout << "Multime vida";
    cout << "\n";
    ok = false;
    for(int i = 1; i <= n; ++i)
        if(Q(m[i]))
            ok = true, cout << m[i] << ' ';
    if(!ok)
        cout << "Multime vida";
    cout << "\n";
    ok = false;
    for(int i = 1; i <= n; ++i)
        if(R(m[i]))
            ok = true, cout << m[i] << ' ';
    if(!ok)
        cout << "Multime vida";
    return 0;
}</pre>
