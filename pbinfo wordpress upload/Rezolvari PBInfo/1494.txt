<h3>Cerința</h3>

<p>Scrieţi un program care citeşte din fişierul de intrare şiruri de caractere de forma <code>cuvânt#tip</code>, unde <code>cuvânt</code> este un şir oarecare de litere iar <code>tip</code> poate fi una din literele <code>S</code>, <code>P</code> sau <code>C</code>, semnificaţia fiind <em>subiect</em>, <em>predicat</em> sau <em>complement</em>. Programul va afişa, în ordine lexicografică (după subiect, predicat, complement), toate propoziţiile având structura <em>subiect</em> <em>predicat</em> <em>complement</em> ce pot fi formate cu ajutorul cuvintelor citite.</p>

<h3>Date de intrare</h3>

<p>Fișierul de intrare <code>s_p_c.in</code> conține pe prima linie mai multe şiruri de caractere de forma <code>cuvânt#tip</code>, separate printr-un spaţiu.</p>

<h3>Date de ieșire</h3>

<p>Fișierul de ieșire <code>s_p_c.out</code> va conține toate propoziţiile având structura descrisă mai sus, câte una pe linie.</p>

<h3>Restricții și precizări</h3>

<ul>
	<li>sunt cel mult <code>100</code> de subiecte, <code>100</code> de predicate şi <code>100</code> de complemente</li>
	<li>fiecare cuvânt are cel mult <code>40</code> de caractere, litere mari şi mici ale alfabetului englez</li>
	<li>în fişier există cel puţin un subiect, cel puţin un predicat şi cel puţin un complement.</li>
</ul>

<h3>Exemplu:</h3>

<p><code>s_p_c.in</code></p>

<pre contenteditable="true" editable="true">Ion#S Vasile#S alearga#P repede#C scrie#P incet#C</pre>

<p><code>s_p_c.out</code></p>

<pre contenteditable="true" editable="true">Ion alearga incet
Ion alearga repede
Ion scrie incet
Ion scrie repede
Vasile alearga incet
Vasile alearga repede
Vasile scrie incet
Vasile scrie repede</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("s_p_c.in");
ofstream cout("s_p_c.out");

char S[100][100] , P[100][100] , C[100][100];

int main()
{
    char s[100];
    int i = 0;
    int cnt1=0 , cnt2=0 , cnt3=0;
    while(cin >> s)
    {
        int j=0;
        while(s[j]!='#')
            j++;
        if(s[j+1]=='S')
        {
            j = 0;
            while(s[j]!='#')
            {
                S[cnt1][j]=s[j];
                j++;
            }
            cnt1++;
        }
        else if(s[j+1]=='P')
        {
            j = 0;
            while(s[j]!='#')
            {
                P[cnt2][j]=s[j];
                j++;
            }
            cnt2++;
        }
        else if(s[j+1]=='C')
        {
            j = 0;
            while(s[j]!='#')
            {
                C[cnt3][j]=s[j];
                j++;
            }
            cnt3++;
        }
    }
    for(int i = 0 ; i < cnt1 ; ++i)
        for(int j = i + 1 ; j < cnt1 ; ++j)
            if(strcmp(S[i],S[j]) > 0)
                swap(S[i] , S[j]);
    for(int i = 0 ; i < cnt2 ; ++i)
        for(int j = i + 1 ; j < cnt2 ; ++j)
            if(strcmp(P[i],P[j]) > 0)
                swap(P[i] , P[j]);
    for(int i = 0 ; i < cnt3 ; ++i)
        for(int j = i + 1 ; j < cnt3 ; ++j)
            if(strcmp(C[i],C[j]) > 0)
                swap(C[i] , C[j]);
    for(int i = 0 ; i < cnt1 ; ++i)
        for(int j = 0 ; j < cnt2 ; ++j)
            for(int q = 0 ; q < cnt3 ; ++q)
                cout << S[i] << ' ' << P[j] << ' ' << C[q] << endl;
    return 0;
}</pre>
