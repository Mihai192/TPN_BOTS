<p>Metoda Bucket Sort constă în distribuirea elementelor în mai multe grupe, numite “bucket-uri”. Apoi fiecare bucket este sortat individual folosind un algoritm de sortare oarecare.</p>

<h1>Cerința</h1>

<p>Se dă un şir cu <code>n</code> numere naturale ce trebuie sortat în funcţie de <code>d</code>. Dacă <code>d</code> este <code>1</code>, şirul se va sorta descrescător, iar dacă este <code>0</code>, se va sorta crescător.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>bucketsort.in</code> conține pe prima linie numărul <code>n</code>, iar pe a doua linie <code>n</code> numere naturale separate prin spații, iar pe a treia linie se va afla <code>d</code>.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>bucketsort.out</code> va conține pe prima linie şirul sortat în funcţie de <code>d</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>n ≤ 10.000</code></li>
	<li><code>toate numerele ≤ 100.000.000</code></li>
	<li><code>d=0</code> pentru 50% din teste</li>
	<li><code>d=1</code> pentru 50% din teste</li>
</ul>

<h1>Exemplu 1:</h1>

<p><code>bucketsort.in</code></p>

<pre contenteditable="true" editable="true">5
10 90 5 6 101
0</pre>

<p><code>bucketsort.out</code></p>

<pre contenteditable="true" editable="true">5 6 10 90 101 </pre>

<h3>Explicație</h3>

<p>Deoarece <code>d</code> este <code>0</code>, şirul se sortează crescător</p>

<h1>Exemplu 2:</h1>

<p><code>bucketsort.in</code></p>

<pre contenteditable="true" editable="true">5
10 90 5 6 101
1</pre>

<p><code>bucketsort.out</code></p>

<pre contenteditable="true" editable="true">101 90 10 6 5 </pre>

<h3>Explicație</h3>

<p>Deoarece <code>d</code> este <code>1</code>, şirul se sortează descrescător</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("bucketsort.in");
ofstream cout("bucketsort.out");

int a[10001];

int main()
{
    int n;
    cin >> n;
    for(int i = 0 ; i < n ; ++i)
        cin >> a[i];
    int d;
    cin >> d;
    sort(a , a + n);
    if(d==1)
        for(int i = n-1 ; i >= 0 ; --i)
            cout << a[i] << ' ';
    else
        for(int i = 0 ; i < n ; ++i)
            cout << a[i] << ' ';
    return 0;
}</pre>
