<h1>Enunț</h1>

<p>Având note mici la matematică, Gicuţa primeşte spre rezolvare următoarea problemă (uşoară pentru clasa a X-a) pentru a-şi mări nota: “Dându-se un şir <code>X</code> cu <code>N</code> numere naturale nenule: <code>X</code> <sub><code>1</code></sub> , <code>X</code> <sub><code>2</code></sub>,…., <code>X</code> <sub><code>N</code></sub>, să se determine cel mai mare divizor prim dintre toti divizorii tuturor numerelor din şirul <code>X</code>“.<br>
Însă, pentru a obţine nota <code>10</code>, el mai are de rezolvat o cerinţă a problemei: să determine  cel mai mare număr care se poate forma din concatenarea divizorilor primi maximi ai fiecărui număr din şirul <code>X</code>.</p>

<h1>Cerința</h1>

<p>Scrieţi un program care să citească numărul natural <code>N</code> şi cele <code>N</code> numere naturale din şirul <code>X</code> şi care să determine:<br>
<code>1.</code> numărul natural <code>P</code> reprezentând cel mai mare divizor prim dintre toţi divizorii tuturor numerelor din şirul <code>X</code><br>
<code>2.</code> cel mai mare număr natural <code>K</code> ce se poate forma din concatenarea divizorilor primi maximi ai fiecărui număr din şirul <code>X</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>divimax.in</code> conține conţine <code>N+1</code> linii. Pe prima linie sunt scrise doua numere naturale <code>C</code> și <code>N</code>, separate printr-un spațiu. Pe fiecare dintre următoarele <code>N</code> linii este scris câte un număr din şirului <code>X</code>, astfel încât pe linia <code>i+1</code> din fişier este scris numărul <code>X</code><sub><code>i</code></sub> (<code>1≤i≤N</code>).</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>divimax.out</code> va conține o linie. <br>
- Dacă <code>C=1</code>, atunci se va rezolva doar cerința <code>1</code> a problemei, iar pe prima linie se va scrie numărul natural <code>P</code> reprezentând raspunsul la cerința <code>1</code>. <br>
- Dacă <code>C=2</code>, atunci se va rezolva doar cerința <code>2</code> a problemei, iar pe prima linie a fişierului se va scrie numărul natural <code>K</code>, reprezentând răspunsul la cerința <code>2</code>.</p>

<h1>Restricții și precizări</h1>

<p>- <code>0 ≤ N ≤ 3030</code>, <code>N</code> număr natural<br>
- <code>C=1</code> sau <code>C=2</code><br>
- <code>2 ≤ X</code><sub><code>i</code></sub><code> ≤ 3500</code>, unde <code>1 ≤ i ≤N</code><br>
- Concatenarea a două numere inseamnă lipirea lor. (exemplu: Prin concatenarea numerelor <code>325</code> şi <code>684</code> rezultă numărul <code>325684</code>, iar concatenându-le invers, obţinem <code>684325</code>)<br>
- Numărul determinat la cerinţa <code>2</code> poate avea cel mult <code>8000</code> de cifre<br>
- Pentru rezolvarea corectă a cerinţei <code>1</code> se acordă <code>30%</code> din punctaj, iar pentru rezolvarea corectă a cerinţei <code>2</code> se acordă <code>70%</code> din punctaj.</p>

<h1>Exemplul 1:</h1>

<p><code>divimax.in</code></p>

<pre contenteditable="true" editable="true">1 5
2 
36 
15 
12 
33</pre>

<p><code>divimax.out</code></p>

<pre contenteditable="true" editable="true">11</pre>

<h3>Explicație</h3>

<p><code>C=1</code>, se  va rezolva doar cerinta <code>1</code>.<br>
Cel mai mare divizor prim al lui <code>2</code> este <code>2</code>, cel mai mare divizor prim al lui <code>36</code> este <code>3</code>, cel mai mare divizor prim al lui <code>15</code> este <code>5</code>, cel mai mare divizor prim al lui <code>12</code> este <code>3</code>, cel mai mare divizor al lui <code>33</code> este <code>11</code>.</p>

<h1>Exemplul 2:</h1>

<p><code>divimax.in</code></p>

<pre contenteditable="true" editable="true">2 7
23
44
10
204
4
45
9</pre>

<p><code>divimax.out</code></p>

<pre contenteditable="true" editable="true">5532321711</pre>

<h3>Explicație</h3>

<p><code>C=2</code>, se  va rezolva doar cerinta <code>2</code>.<br>
Cei mai mari divizori primi ai numerelor sunt <code>23, 11, 5, 17, 2, 5, 3</code> (în ordinea în care sunt date în fişierul de intrare).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("divimax.in");
ofstream cout("divimax.out");

int c, n, dmax=0, a[5001];
int f[4000];

void desc(int n){
    int d = 2;
    while(n > 1){
        int p = 0;
        while(n % d == 0)
            n/=d, p++;
        if(p &amp;&amp; d > dmax)
            dmax = d;
        d++;
        if(d * d > n)
            d = n;
    }
}

int descmax(int n){
    int d = 2, maxi = 0;
    while(n > 1){
        int p = 0;
        while(n % d == 0)
            n/=d, p++;
        if(p &amp;&amp; d > maxi)
            maxi = d;
        d++;
        if(d * d > n)
            d = n;
    }
    return maxi;
}

int putere(int n){
    int p = 1;
    while(n){
        p = p * 10;
        n/=10;
    }
    return p;
}

int concat(int a, int b){
    return a * putere(b) + b;
}

bool comp(int a, int b){
    return concat(a, b) > concat(b, a);
}

int main(){
    cin >> c >> n;
    for(int i = 1; i <= n; ++i)
        cin >> a[i];
    if(c == 1){
        for(int i = 1; i <= n; ++i)
            desc(a[i]);
        cout << dmax;
    }
    else{
        int b[10001];
        for(int i = 1; i <= n; ++i)
            b[i] = descmax(a[i]);
        sort(b + 1, b + n + 1, comp);
        for(int i = 1; i <= n; ++i)
            cout << b[i];
    }
    return 0;
}</pre>
