<p>Un număr natural n se numește număr <b><span class="caps">VIP</span></b> dacă este format din cel puțin două cifre, conține cel puțin o cifră impară și cel puțin o cifră pară, iar toate cifrele impare sunt scrise înaintea tuturor celor pare. ( <strong><span class="caps">VIP</span></strong> = <strong>V</strong>alori <strong>I</strong>mpare <strong>P</strong>are). De exemplu, <code>352</code>, <code>7546</code> sunt numere <b><span class="caps">VIP</span></b>, iar <code>35</code>, <code>468</code>, <code>5483</code>, <code>387</code> nu sunt numere <b><span class="caps">VIP</span></b>. Se numește <i><span class="caps">SECVENȚĂ</span></i> <b><span class="caps">VIP</span></b> într-un șir de cifre, o succesiune de cifre (aflate pe poziții consecutive în șir) care formează, în ordine, un număr <b><span class="caps">VIP</span></b>.</p>

<h1>Cerinta</h1>

<p>Pentru un șir de cifre nenule, se cere să se determine:</p>

<p>1. Numărul de <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> din șir.<br>
2. Lungimea minimă a unui șir de cifre care conține același număr de <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> ca șirul dat și are toate cifrele <i>impare</i> situate <b>înaintea</b> celor <i>pare</i>.<br>
3. Suma tuturor numerelor ce se pot forma, astfel încât fiecare număr să conțină toate cifrele distincte ale celui mai mare număr <b><span class="caps">VIP</span></b> din șirul dat, fiecare cifră fiind folosită exact o dată, și nicio altă cifră diferită de acestea.</p>

<h1>Date de intrare</h1>

<p>Fişierul <code>evip.in</code> conţine pe prima linie un număr natural <b>c</b> reprezentând cerinţa care trebuie să fie rezolvată ( <b>1</b> , <b>2</b> sau <b>3</b> ). Pe cea de a doua linie se află un șir de <b>cifre nenule</b> , neseparate prin spațiu, reprezentând, în ordine, elementele șirului.</p>

<h1>Date de ieșire</h1>

<p>Dacă cerinţa este <b>c=1</b> , atunci, pe prima linie a fişierului <code>evip.out</code> va fi scris un număr natural reprezentând numărul de <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> din șir.<br>
Dacă cerinţa este <b>c=2</b> , atunci, pe prima linie a fişierului <code>evip.out</code> va fi scris un număr natural reprezentând lungimea minimă a unui șir de cifre care conține același număr de <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> ca șirul dat și are toate cifrele impare situate înaintea celor pare.<br>
Dacă cerința este <b>c=3</b> , atunci, pe prima linie a fişierului <code>evip.out</code> va fi scris un număr natural reprezentând suma tuturor numerelor ce se pot forma, astfel încât fiecare număr să conțină toate cifrele distincte ale celui mai mare număr <b><span class="caps">VIP</span></b> din șirul dat, fiecare cifră fiind folosită exact o dată, și nicio altă cifră diferită de acestea.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>Numărul de cifre de pe linia a doua a fișierului de intrare este cel puțin <code>2</code> și cel mult <code>10 000</code>.</li>
	<li>Șirul conține cel puțin o <i><span class="caps">SECVENȚĂ</span></i> <b><span class="caps">VIP</span></b> .</li>
	<li>Pentru teste valorând <code>30%</code> din punctaj cerinţa este <code>1</code>. Pentru teste valorând <code>30%</code> din punctaj cerinţa este <code>2</code>. Pentru teste valorând <code>40%</code> din punctaj cerinţa este <code>3</code>.</li>
</ul>

<h1>Exemplu 1:</h1>

<p><code>evip.in</code></p>

<pre contenteditable="true" editable="true">1
413643623</pre>

<p><code>evip.out</code></p>

<pre contenteditable="true" editable="true">6</pre>

<h3>Explicație</h3>

<p>Sunt <code>6</code> <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> în șirul dat.</p>

<h1>Exemplu 2:</h1>

<p><code>evip.in</code></p>

<pre contenteditable="true" editable="true">2
413643623</pre>

<p><code>evip.out</code></p>

<pre contenteditable="true" editable="true">5</pre>

<h3>Explicație</h3>

<p>Șirul dat conține <code>6</code> <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b>. Cel mai mic număr de cifre dintrun șir care conține <code>6</code> <i><span class="caps">SECVENȚE</span></i> <b><span class="caps">VIP</span></b> și are toate cifrele impare situate înaintea celor pare, este <code>5</code>. Un exemplu de astfel de șir este <code>13246</code>.</p>

<h1>Exemplu 3:</h1>

<p><code>evip.in</code></p>

<pre contenteditable="true" editable="true">3
413443623</pre>

<p><code>evip.out</code></p>

<pre contenteditable="true" editable="true">1776</pre>

<h3>Explicație</h3>

<p>Cel mai mare număr <b><span class="caps">VIP</span></b> din șir este <code>1344</code>. Cifrele distincte ale acestui număr sunt { <b>1,3,4</b> } . Suma tuturor numerelor ce se pot scrie, folosind, o singură dată, toate cifrele { <b>1,3,4</b> } , și nicio altă cifră diferită de acestea, este <code>1776</code>. <code>134</code> + <code>143</code> + <code>314</code> + <code>341</code> + <code>413</code> + <code>431</code> = <code>1776</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>

using namespace std;
ifstream fin("evip.in");
ofstream fout("evip.out");
unsigned long long S;
int c,i,L,impar,par,p,k,kmax,imax,u;
char s[10005];
bool cif[10];

bool maiMare(int p1, int p2)
{ int i=0;
  while(s[i] &amp;&amp; s[p1+i]==s[p2+i])i++;
  return (s[p1+i]>s[p2+i]);
}
int main()
{ fin>>c>>s;
  while(s[i]%2==0)i++;
  while(s[i]){while(s[i]%2){impar++;i++;}
              while(s[i] &amp;&amp; s[i]%2==0) {par++;i++;}
              S+=impar*par;
              L=impar+par;
              if(impar*par &amp;&amp; L>kmax) {kmax=L; imax=i-L;}
              else if(L==kmax &amp;&amp; maiMare(i-L,imax)) imax=i-L;
              impar=par=0;
             }
  if(c==1)fout<<S<<'\n';
  else if(c==2){p=1;
                for(i=2; i*i<=S;++i)if(S%i==0) p=i;
                fout<<p+S/p<<'\n';
               }
       else { for(i=0;i<kmax;i++) cif[s[imax+i]-'0']=true;
              k=S=0;u=11;
              for(i=0;i<=9;i++) if(cif[i]) {k++;S+=i;}
              for(i=2;i<k;i++) {S=S*i;u=u*10+1;}
              fout<<S*u<<'\n';
            }
  fin.close();fout.close();
  return 0;
}</pre>
