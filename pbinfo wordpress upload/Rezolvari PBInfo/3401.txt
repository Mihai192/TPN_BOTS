<p>După o zi plină, trei băieți se joacă cu numere. În fiecare seară, unul dintre ei alege un număr <code>x</code>, iar altul un număr <code>y</code> mai mare sau egal cu <code>x</code>. Al treilea propune ceva mai interesant. Astfel, el alege să le spună aproape instantaneu suma pătratelor perfecte de la <code>x</code> și <code>y</code>. Voi trebuie să rezolvați ceva asemănător, doar că știți numai ce zice primul și ultimul băiat. Pentru a-i verifica dacă greșesc la calcule, în schimb, trebuie să găsiți numărul pe care l-ar putea spune al doilea.</p>

<p>Formal, pentru două numere <code>x</code> și <code>y</code> se definește <code>SPP(x,y) = x</code><sup><code>2</code></sup> <code>+ (x+1)</code><sup><code>2</code></sup>  <code>+...+ y</code><sup><code>2</code></sup> (suma pătratelor perfecte de la <code>x</code> la <code>y</code>).</p>

<p>Se dau <code>Q</code> întrebări de tipul <code>x p</code> și se cere cel mai mic <code>y</code> mai mare sau egal ca <code>x</code> pentru care <code>SPP(x,y) ≥ p</code><sup><code>2</code></sup>.</p>

<h1>Cerința</h1>

<p>Să se calculeze pentru fiecare întrebare <code>p</code> minimum, pentru care relația este satisfăcută.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>spp.in</code> conține pe prima linie un număr natural <code>Q</code>. Pe liniile <code>2</code>, <code>3</code>, …, <code>Q+1</code> se află câte o pereche <code>x p</code> care satisface restricțiile.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>spp.out</code> va conține răspunsul la fiecare întrebare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>Q ≤ 100.000</code></li>
	<li><code>1 ≤ x ≤ 100.000</code></li>
	<li><code>1 ≤ p ≤ 1.000.000.000</code></li>
	<li>Pentru 30% din teste, <code>Q ≤ 100</code> sau <code>p ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595361668&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3401%2Fspp&amp;flash=0&amp;wgl=1&amp;dt=1595361668294&amp;bpp=11&amp;bdt=225&amp;idt=151&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=6368653827728&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361668&amp;ga_hid=467445852&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1334&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=3614099483834776&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F516%2Fsumsec1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=f2gK3Yoa6e&amp;p=https%3A//www.pbinfo.ro&amp;dtd=158" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CICmpayR3-oCFbMH5godY5QPlQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>spp.in</code></p>

<pre contenteditable="true" editable="true">2
1 5
10 19</pre>

<p><code>spp.out</code></p>

<pre contenteditable="true" editable="true">4
12</pre>

<h3>Explicație</h3>

<p><code>1</code><sup><code>2</code></sup> <code>+ 2</code><sup><code>2</code></sup> <code>+ 3</code><sup><code>2</code></sup> <code>+ 4</code><sup><code>2</code></sup> <code>= 30 ≥ 5</code><sup><code>2</code></sup>.<br>
<code>10</code><sup><code>2</code></sup> <code>+ 11</code><sup><code>2</code></sup> <code>+ 12</code><sup><code>2</code></sup> <code>= 365 ≥ 19</code><sup><code>2</code></sup>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("spp.in");
ofstream cout("spp.out");

long long sp[1500001];

long long CB(long long x, long long p){
    int st = x, dr = 1460000;
    while(st <= dr){
        int mij = (st + dr) / 2;
        if(sp[mij] - sp[x-1] > p)
            dr = mij-1;
        else if(sp[mij] - sp[x-1] < p)
            st = mij+1;
        else
            return mij;
    }
    return st;
}

int main(){
    int n;
    cin >> n;
    long long x, p;
    for(int i = 1; i <= 1460000; ++i)
        sp[i] = 1LL * (sp[i-1] + (1LL * i * i));
    for(int i = 1; i <= n; ++i){
        cin >> x >> p;
        p*=p;
        cout << CB(x, p) << '\n';
    }
    return 0;
}</pre>
