<p>Se consideră trei șiruri de numere naturale <code>a = (a</code><sub><code>1</code></sub><code>, a</code><sub><code>2</code></sub><code>, ..., a</code><sub><code>n</code></sub><code>)</code>, <code>b = (b</code><sub><code>1</code></sub><code>, b</code><sub><code>2</code></sub><code>, ..., b</code><sub><code>n</code></sub><code>)</code> și <code>c = (c</code><sub><code>1</code></sub><code>, c</code><sub><code>2</code></sub><code>, ..., c</code><sub><code>n</code></sub><code>)</code>. Toate cele trei șiruri sunt ordonate crescător. </p>

<h1>Cerința</h1>

<p>Să se determine un număr care apare în cele trei șiruri. Dacă există mai multe astfel de numere, să se determine cel mai mic. Dacă nu există un număr comun celor trei șiruri, afișați valoarea <code>-1</code>.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code> reprezentând lungimea celor trei șiruri. Apoi se citesc <code>n</code> numere naturale, separate prin spații, reprezentând elementele șirului <code>a</code>. Apoi se citesc alte <code>n</code> numere naturale, separate prin spații, reprezentând elementele șirului <code>b</code>. La final se citesc <code>n</code> numere naturale, separate prin spații, reprezentând elementele șirului <code>c</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran numărul <code>x</code>, reprezentând cel mai mic număr natural care apare în toate cele trei șiruri, sau va afișa <code>-1</code>, dacă șirurile nu au niciun element comun.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 100.000</code></li>
	<li>numere din cele trei șiruri vor fi mai mici decât <code>100.000.000</code></li>
	<li>cele trei șiruri sunt ordonate crescător</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1806232942&amp;w=728&amp;lmt=1595361738&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2668%2Fcomun&amp;flash=0&amp;wgl=1&amp;dt=1595361738693&amp;bpp=4&amp;bdt=179&amp;idt=143&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=6968651582071&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361739&amp;ga_hid=1806991939&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1154&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066429&amp;oid=3&amp;pvsid=2723513232370394&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F508%2Fcautare-binara&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=Ah600jLPnI&amp;p=https%3A//www.pbinfo.ro&amp;dtd=150" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPDY7M2R3-oCFQTIuwgdTgkCmw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
3 6 6 8 10
8 8 8 10 10
1 1 8 10 30</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">8</pre>

<h3>Explicație</h3>

<p>Numărul comun cel mai mic este <code>8</code>. Mai există un număr comun celor trei șiruri, anume <code>10</code>, dar este mai mare.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

int a[100005] , b[100005] , c[100005] , d[100005];

int main()
{
    int n;
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> a[i];
    for(int i = 1 ; i <= n ; i++)
        cin >> b[i];
    for(int i = 1 ; i <= n ; i++)
        cin >> c[i];
    int cnt = 0;
    int i = 1 , j = 1;
    while(i <= n &amp;&amp; j <= n)
    {
        if(a[i] == b[j]) d[++cnt] = a[i] , i++ , j++;
        else if(a[i] < b[j]) i++;
        else j++;
    }
    i = 1 , j = 1;
    int rez = -1;
    while(i <= n &amp;&amp; j <= cnt)
    {
        if(c[i] == d[j])
        {
            rez = c[i];
            break;
        }
        if(c[i] < d[j]) i++;
        else j++;
    }
    cout << rez;
}</pre>
