<h1>Cerința</h1>

<p>Programel a fost invitat să dea o proba de angajare la cea mai mare companie de jocuri din Catania – Brain Games. Sarcina pe ca a primit-o a fost următoarea: </p>

<p>Scrie un program care identifică mulţimea numerelor <code>bine aşezate</code> dintr-un şir, apoi identifică cel mai mare număr care se poate obţine ca sumă de numere distincte din mulţimea determinată şi cel mai mic număr natural nenul, care nu se poate obţine ca sumă de numere distincte din mulţimea determinată. Un număr <code>bine aşezat</code> este un număr a cărui valoare coincide cu indicele poziţiei sale în ordinea citirii.</p>

<h1>Date de intrare</h1>

<p>În fişierul <code>brain.in</code> se afla pe prima linie un număr natural <code>N</code>, iar pe următoarea linie, un şir de <code>N</code> numere întregi separate prin spaţiu.</p>

<h1>Date de ieșire</h1>

<ul>
	<li>Se va afişa pe prima linie a fişierului <code>brain.out</code> mulţimea numerelor <code>bine aşezate</code> în ordinea crescătoare a numerelor, separate printr-un spaţiu,</li>
	<li>pe a doua linie cel mai mare număr care se poate obţine ca sumă de numere distincte din mulţimea determinată la punctul a.</li>
	<li>pe a treia linie cel mai mic număr care nu se poate obţine ca sumă de numere distincte din mulţimea determinată la punctul a.</li>
</ul>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 &lt; N &lt; 1.000.000</code>;</li>
	<li>Numerotarea poziţiilor din şir porneşte de la <code>1</code>.</li>
	<li>Se garanteaza existenţa cel puţin a unui număr şi a maximum <code>100.000</code> de numere “bine aşezate”.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>brain.in</code></p>

<pre contenteditable="true" editable="true">10
1 2 -5 1 3 6 7 -2 9 13</pre>

<p><code>brain.out</code></p>

<pre contenteditable="true" editable="true">1 2 6 7 9
25
4</pre>

<h3>Explicație</h3>

<p>Numere bine aşezate sunt: <code>1 2 6 7 9</code>. Numărul maxim este <code>25 3(1+2)</code>, <code>8(7+1)</code>, <code>10(1+2+7).…….</code> se pot obţine ca sumă de numere din mulţimea <code>{1, 2, 6, 7, 9}</code> şi <code>4</code> este cel mai mic număr care nu se poate obţine ca sumă de numere distincte din mulţimea determinată.</p>

<h1>Exemplul 2:</h1>

<p><code>brain.in</code></p>

<pre contenteditable="true" editable="true">20
1 2 3 0 0 3 7 8 5 7 11 7 7 7 2 3 4 5 1 20</pre>

<p><code>brain.out</code></p>

<pre contenteditable="true" editable="true">1 2 3 7 8 11 20
52
53</pre>

<h3>Explicație</h3>

<p>Cel mai mic număr care nu se poate obţine ca sumă de numere distincte din mulţimea <code>{1,2,3,7,8,11,20}</code> este <code>53</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("brain.in");
ofstream cout("brain.out");
int n , x , a[1000001];
long long maxi , mini , j;

int main()
{
    cin >> n;
    for(int i = 1 ; i <= n ; ++i)
    {
        cin >> x;
        if(x == i) a[j] = x , j++;

    }
    for(int i = 0 ; i < j ; ++i)
    {
        cout << a[i] <<" ";
        maxi += a[i];
    }
    cout<<'\n' << maxi << '\n';
    mini = 1;
    int i = 0;
    while(a[i] <= mini &amp;&amp; i <= j) mini += a[i++];
    cout << mini <<'\n';

}</pre>
