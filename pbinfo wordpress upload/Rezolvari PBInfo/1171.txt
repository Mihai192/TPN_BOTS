<p>Se consideră o listă liniară simplu înlănțuită, alocată dinamic, în care elementele sunt de tipul declarat mai jos:</p>

<pre class="code_c cm-s-default" data-lang="text/x-csrc" contenteditable="true" editable="true"><span class="cm-keyword">struct</span> <span class="cm-variable">nod</span>{
    <span class="cm-keyword">int</span> <span class="cm-variable">info</span>;
    <span class="cm-variable">nod</span> <span class="cm-operator">*</span> <span class="cm-variable">urm</span>;
};</pre>

<p>în care câmpul <code>info</code> memorează un număr întreg, iar câmpul <code>urm</code> memorează adresa următorului element al listei.</p>

<h1>Cerinţa</h1>

<p>Să se scrie o funcție C++ cu următorul prototip:</p>

<pre class="code_c cm-s-default" data-lang="text/x-csrc" contenteditable="true" editable="true"><span class="cm-keyword">void</span> <span class="cm-variable">stergePrimul</span>(<span class="cm-variable">nod</span> <span class="cm-operator">*</span> <span class="cm-operator">&amp;</span> <span class="cm-variable">p</span>);</pre>

<p>care șterge primul element al unei liste; pointerul <code>p</code> are ca valoarea adresa primului element din listă – cel care va fi șters. </p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li>numele funcției va fi <code>stergePrimul</code></li>
	<li>dacă lista nu conține niciun element, pointerul <code>p</code> va avea valoarea <code>NULL</code></li>
	<li>în toate cazurile, la ieșirea din apel <code>p</code> va memora adresa primului element al listei; dacă elementul șters este ultimul, <code>p</code> va avea valoarea <code>NULL</code></li>
</ul>

<h1>Important</h1>

<p>Soluţia propusă va conţine definiţia funcţiei cerute. Prezenţa în soluţie a altor instrucţiuni poate duce erori de compilare sau de execuţie care vor avea ca efect depunctarea soluţiei.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">void stergePrimul(nod * &amp; p)
{
    nod* ne = p -> urm;
    p = ne;
}</pre>
