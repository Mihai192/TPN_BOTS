<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("plimbare1.in");
ofstream cout("plimbare1.out");

int n , m , a , b , c , cer ; 
long long t;

struct poz
{
    int i , j , c;
}V[125001];
int T[100001];

int comp(poz a , poz b)
{
    return a.c < b.c;
}

int leaga(int r1 , int r2)
{
    T[r2] = T[r1];
}

int radacina(int a)
{
    if(a == T[a]) return a;
    else return T[a] = radacina(T[a]);
}

void kruskal()
{
    int r1 , r2 , k = 0;
    for(int i = 1 ; i <= m ; i++)
    {
        r1 = radacina(V[i].i);
        r2 = radacina(V[i].j);
        if(r1 != r2)
        {
            t += V[i].c;
            leaga(r1 , r2);
        }
    }
}

int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= m ; i++)
        T[i] = i;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> cer;
        if(cer == 1)
        {
            cin >> a >> b;
            V[i].i = a;
            V[i].j = b;
            V[i].c = 0;
        }
        else
        {
            cin >> a >> b >> c;
            V[i].i = a;
            V[i].j = b;
            V[i].c = c;
        }
    }
    
    sort(V + 1 , V + m + 1 , comp);
    kruskal();
    cout << t;
    return 0;
}</pre>
