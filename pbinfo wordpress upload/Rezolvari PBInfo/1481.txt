<p>Un pitic pasionat de numere trebuie să-și pună flori în grădină. El are de plantat <code>m</code> rânduri cu flori, aceeași floare pe tot rândul. Rândurile sunt numerotate de la <code>1</code> la <code>m</code>. Având la dispoziție suficiente specii de flori, piticul nostru s-a gândit să le planteze folosind următorul algoritm matematic: pe rândurile care sunt numere prime, va planta exact floarea numerotată cu numărul prim respectiv, iar pe celelalte rânduri va planta floarea numerotată cu suma divizorilor primi ai numărului neprim.</p>

<h1>Cerința</h1>

<p>Să se realizeze un program care să afişeze ordinea de așezare a florilor pe cele <code>m</code> rânduri.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>pitic.in</code> conține pe prima linie numărul <code>m</code>.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>pitic.out</code> va conține pe prima un șir de <code>m</code> numere, separate prin câte un spațiu, fiecare număr reprezentând specia de floare ce urmează să fie plantată pe rândul respectiv.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ m ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595358889&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1481%2Fgradina-piticului&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595358889084&amp;bpp=19&amp;bdt=240&amp;idt=162&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=1581538945820&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595358889&amp;ga_hid=1545427338&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1216&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=4403842957491015&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1595%2Fbomboane1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=RWPJl2DKFw&amp;p=https%3A//www.pbinfo.ro&amp;dtd=168" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CP_2jP-G3-oCFYHcsgodrqAF-Q"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>pitic.in</code></p>

<pre contenteditable="true" editable="true">6</pre>

<p><code>pitic.out</code></p>

<pre contenteditable="true" editable="true">0 2 3 2 5 5</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream fin("pitic.in");
ofstream fout("pitic.out");

int prim(int n)
{
    int d=2;
    int cnt=1;
    while(n>1)
    {
        int p = 0;
        while(n%d==0)
        {
            p++;
            n/=d;
        }
        if(p>0)
        cnt*=(p+1);
        d++;
        if(d*d>n)
            d=n;
    }   
    if(cnt==2)
    return 1;
    else
    return 0;
}
int sumprim(int n)
{
    int s=0;
    int d=2;
    while(n>1)
    {
        int p = 0;
        while(n%d==0)
        {
            p++;
            n/=d;
        }
        if(p>0)
        s+=d;
        d++;
        if(d*d>n)
        d=n;
    }
    return s;
}

int main()
{
    int n;
    fin >> n;
    for(int i = 1 ; i <= n ; ++i)
    {
        if(prim(i))
        fout << i << ' ';
        else
        fout << sumprim(i) << ' ';
    }
    
    fin.close();
    fout.close();
    
    return 0;
}</pre>
