<h1>Cerința</h1>

<p><code>n</code> elevi numerotați de la <code>1</code> la <code>n</code> stau în cerc, astfel încât elevul <code>1</code> și elevul <code>n</code> sunt vecini. Pentru fiecare elev se cunoaște înălțimea. O pereche de elevi învecinați este <strong>pereche potrivită</strong> dacă diferența dintre înălțimile elevilor este minimă. Determinați o pereche potrivită.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> înălțimi ale elevilor, în ordine.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran numerele de ordine <code>i j</code>, separate prin exact un spatiu, a elevilor care formează o pereche potrivită.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor fi mai mici decât <code>1.000</code></li>
	<li>dacă există mai multe perechi potrivite, se poate afișa oricare</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595360778&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F567%2Fpereche&amp;flash=0&amp;wgl=1&amp;dt=1595360778156&amp;bpp=4&amp;bdt=266&amp;idt=108&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4395091136102&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360778&amp;ga_hid=1207095677&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21065755%2C21066392&amp;oid=3&amp;pvsid=4371789927895413&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F535%2Ffabrica&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=PU3tEN9soU&amp;p=https%3A//www.pbinfo.ro&amp;dtd=115" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CJip6oOO3-oCFRFBkQUdU2sNxw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
4 6 3 5 3</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">1 5</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

int main()
{
    int a[1002];
    int n;
    cin >> n;
    for(int i = 0 ; i < n ; ++i)
        cin >> a[i];
    a[n]=a[0];
    n++;
    int st = 0 , dr = 0 , min=1001;
    for(int i = 1 ; i < n ; ++i)
    {
        if(a[i]>a[i-1])
        {
            if(a[i]-a[i-1] < min)
                min = a[i]-a[i-1] , st = i-1 , dr = i;
        }
        else
        {
            if(a[i-1]-a[i] < min)
                min = a[i-1]-a[i] , st = i-1 , dr = i;
        }
    }
    if(dr==n-1)
        st = 0 , dr = n-2;
    cout << st + 1 << ' ' << dr + 1;
    return 0;
}</pre>
