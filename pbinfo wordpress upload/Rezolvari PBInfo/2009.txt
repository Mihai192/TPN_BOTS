<p>Un număr natural de cel puțin două cifre se numește accesibil dacă este format din cifre consecutive în ordine strict crescătoare. (<code>23</code> și <code>6789</code> sunt numere accesibile, în timp ce <code>7</code>, <code>2334</code> și <code>654</code> nu sunt numere accesibile) </p>

<h1>Cerința</h1>

<p>Scrieți un program care să citească numerele <code>k</code>, <code>n</code>  și un șir de n numere naturale și să afișeze:</p>

<p>a) cele mai mari <code>3</code> numere accesibile, nu neapărat distincte, din șirul de <code>n</code> numere;<br>
b) câte dintre numerele din șirul dat care nu sunt accesibile, devin accesibile prin eliminarea exact a unei cifre;<br>
c) cel mai mic și cel mai mare număr accesibil format din <code>k</code> cifre;<br>
d) numărul numerelor accesibile pare de <code>k</code> cifre și numărul numerelor accesibile impare de <code>k</code> cifre.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>accesibil.in</code> conține pe prima linie un număr natural <code>p</code>. Pentru toate testele de intrare, numărul <code>p</code> este un număr din mulțimea <code>{1,2,3,4}</code>. Pe linia a doua a fișierului de intrare se găsesc <code>k</code> și <code>n</code>, iar pe a treia linie a fișierului de află <code>n</code> numere naturale separate prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Dacă valoarea lui <code>p</code> este <code>1</code>, se va rezolva numai punctul a) din cerințe. În acest caz, în fișierul de ieșire <code>accesibil.out</code> se vor scrie, în ordine crescătoare, separate prin câte un spațiu, cele mai mari trei numere accesibile dintre cele <code>n</code> numere aflate pe a treia linie a fișierului. Se garantează că pentru <code>p = 1</code> sunt cel puțin trei numere accesibile în șirul de <code>n</code> numere.</p>

<p>Dacă valoarea lui <code>p</code> este <code>2</code>, se va rezolva numai punctul b) din cerințe. În acest caz, în fișierul de ieșire se va scrie numărul numerelor din șirul dat care nu sunt accesibile, dar care ar deveni accesibile dacă li s-ar elimina o cifră.</p>

<p>Dacă valoarea lui <code>p</code> este <code>3</code>, se va rezolva numai punctul c) din cerințe. În acest caz, în fișierul de ieșire se vor scrie două valori, separate printr-un spațiu, reprezentând cel mai mic număr accesibil de <code>k</code> cifre și cel mai mare număr accesibil de <code>k</code> cifre. Dacă cele două numere ce ar trebui afișate coincid se va afișa valoarea lor comună o singură dată. </p>

<p>Dacă valoarea lui <code>p</code> este <code>4</code>, se va rezolva numai punctul d) din cerințe. În acest caz, în fișierul de ieșire se vor scrie două valori reprezentând numărul numerelor accesibile pare de <code>k</code> cifre și numărul numerelor accesibile impare de <code>k</code> cifre, în această ordine, separate prin spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ k ≤ 9</code> și <code>3 ≤ n ≤ 100 000</code>;</li>
	<li><code>0 ≤</code> numerele din șir <code>≤ 2000 000 000</code>;</li>
	<li>Din numărul <code>5073</code>, de exemplu, prin eliminarea unei cifre se obțin numerele <code>507</code>, <code>503</code>, <code>573</code> și <code>73</code>;</li>
	<li>Pentru a rezolva cerințele a) și b) nu folosim valoarea lui <code>k</code>, iar pentru cerințele c) și d) nu folosim șirul de <code>n</code> numere;</li>
	<li>Se acordă: 40 de puncte pentru cerința a); 30 de puncte pentru cerința b); 10 puncte pentru cerința c); <br>
10 puncte pentru cerința d);</li>
	<li>În concurs s-au acordat 10 puncte din oficiu. Pe site se acordă 10 puncte pentru exemple.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>accesibil.in</code></p>

<pre contenteditable="true" editable="true">1
3 8
6 12 235 5678 90 987 234 5678</pre>

<p><code>accesibil.out</code></p>

<pre contenteditable="true" editable="true">234 5678 5678</pre>

<h1>Exemplul 2</h1>

<p><code>accesibil.in</code></p>

<pre contenteditable="true" editable="true">2
3 9
4 34 123 1238 301 689 4560 7023 1238</pre>

<p><code>accesibil.out</code></p>

<pre contenteditable="true" editable="true">5</pre>

<h1>Exemplul 3</h1>

<p><code>accesibil.in</code></p>

<pre contenteditable="true" editable="true">3
4 3
12 345 67</pre>

<p><code>accesibil.out</code></p>

<pre contenteditable="true" editable="true">1234 6789</pre>

<h1>Exemplul 4</h1>

<p><code>accesibil.in</code></p>

<pre contenteditable="true" editable="true">4
9 3
12 345 67</pre>

<p><code>accesibil.out</code></p>

<pre contenteditable="true" editable="true">0 1</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream fin("accesibil.in");
ofstream fout("accesibil.out");
int accesibil(long long n);
int caccesibil(long long n);
int nrcifre(long long n);
int main()
{

    int p,k,n;
    fin >> p >> k >> n;
    if(p == 1)
    {
        long long a = -1 , b=-1 , c = -1 , x;
        for(int i = 1 ; i <= n ; ++i)
        {
            fin >> x;
            if(accesibil(x) and x >= c)
            {
                c = x;
                if(c >= b) swap(c,b);
                if(b >= a) swap(a,b);
            }
        }
        fout << c << " " << b << " " << a;
    }
    if(p == 2)
    {
        int nr = 0;
        long long x;
        for(int i = 1 ; i <= n ; ++i)
        {
            fin >> x;
            if(!accesibil(x) and caccesibil(x)) nr++;
        }
        fout << nr;
    }
    if(p == 3)
    {
        long long Min = 0 , Max = 0 , q = 1;
        if(k == 9)
            fout << 123456789;
        else
        {
            for(int i = 1 ; i <= k ; i++)
            {
                Min = Min * 10 + i;
                Max += (10-i)*q;
                q *= 10;
            }
            fout << Min << " " << Max;
        }
    }
    if(p == 4)
        fout << (5-(k+1)/2) << " " << (5-k/2);
    return 0;

}
int accesibil(long long n)
{
    if(n<10)
        return 0;
    int k=n%10,c;
    while(n>9)
    {
        n/=10;
        c=n%10;
        if(c+1!=k)
            return 0;
        else
            k=c;
    }
    return 1;
}
int caccesibil(long long n)
{
    if(n<100)
        return 0;
    int nr=nrcifre(n);
    for(;nr;nr--)
    {
        int q=0;
        long long x=0,p=n,k=1;
        while(p!=0)
        {
            q++;
            if(q!=nr)
            {
                x+=k*(p%10);
                k*=10;
            }
            p/=10;
        }
        if(accesibil(x))
            return 1;
    }
    return 0;
}
int nrcifre(long long n)
{
    if(n<10)
        return 1;
    int nr=0;
    while(n!=0)
    {
        n/=10;
        nr++;
    }
    return nr;
}</pre>
