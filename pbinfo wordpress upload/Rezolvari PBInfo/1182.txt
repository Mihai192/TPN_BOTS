<p>Se consideră o listă liniară simplu înlănțuită, alocată dinamic, în care elementele sunt de tipul declarat mai jos:</p>

<pre class="code_c cm-s-default" data-lang="text/x-csrc" contenteditable="true" editable="true"><span class="cm-keyword">struct</span> <span class="cm-variable">nod</span>{
    <span class="cm-keyword">int</span> <span class="cm-variable">info</span>;
    <span class="cm-variable">nod</span> <span class="cm-operator">*</span> <span class="cm-variable">urm</span>;
};</pre>

<p>în care câmpul <code>info</code> memorează un număr natural, iar câmpul <code>urm</code> memorează adresa următorului element al listei.</p>

<h1>Cerinţa</h1>

<p>Să se scrie o funcție C++ cu următorul prototip:</p>

<pre class="code_c cm-s-default" data-lang="text/x-csrc" contenteditable="true" editable="true"><span class="cm-keyword">void</span> <span class="cm-variable">inserare</span>(<span class="cm-variable">nod</span> <span class="cm-operator">*</span> <span class="cm-operator">&amp;</span> <span class="cm-variable">p</span>);</pre>

<p>care inserează înaintea fiecărui element par al unei liste pentru care primul element are adresa memorată în pointerul <code>p</code> dublul acelui element.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>lista va conține cel puțin un element</li>
	<li>la ieșirea din apel <code>p</code> va conține adresa primului element al listei</li>
</ul>

<h1>Important</h1>

<p>Soluţia propusă va conţine definiţia funcţiei cerute. Prezenţa în soluţie a altor instrucţiuni poate duce erori de compilare sau de execuţie care vor avea ca efect depunctarea soluţiei.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">void inserare_elem(nod * &amp; p, nod * q, int x)
{
    nod* nou = new nod;
    nou -> info = x;

    if (q == p)
    {
        nou -> urm = q;
        p = nou;
        return;
    }
    nod* pi = p;
    while(pi -> urm != q)
        pi = pi -> urm;

    pi -> urm = nou;
    nou -> urm = q;
}
void inserare(nod * &amp; p)
{
    nod* pi = p;
    while(pi != NULL)
    {
        if ((pi -> info) % 2 == 0)
        {
            inserare_elem(p, pi, 2 * (pi -> info));
            //pi = pi -> urm;
        }
        pi = pi -> urm;
    }
}</pre>
