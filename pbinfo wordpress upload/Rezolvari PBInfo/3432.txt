<p>Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în <code>p</code> părți înțelegem împărțirea acestuia în <code>p</code> numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.</p>

<p>De exemplu, dacă împărțim numărul <code>12045</code> în două părți avem patru variante de tăiere obținându-se numerele: <code>1</code> și <code>2045</code>; <code>12</code> și <code>045</code>; <code>120</code> și <code>45</code>; <code>1204</code> și <code>5</code>. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele <code>1</code>, <code>2</code> și <code>045</code>; <code>1</code>, <code>20</code> și <code>45</code>; <code>1</code>, <code>204</code> și <code>5</code>; <code>12</code>, <code>0</code> și <code>45</code>; <code>12</code>, <code>04</code> și <code>5</code>; <code>120</code>, <code>4</code> și <code>5</code>.</p>

<h1>Cerința</h1>

<p>Se consideră un șir format din <code>N</code> numere naturale.</p>

<p>1) Determinați cel mai mare număr prim din șirul celor <code>N</code> numere.<br>
2) Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor <code>N</code>.<br>
3) Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor <code>N</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>tai.in</code> conține pe prima linie numărul <code>C</code> care poate avea doar valorile <code>1</code>, <code>2</code> sau <code>3</code> și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește <code>N</code>, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor <code>N</code> numere naturale despărțite prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>tai.out</code> va conține pe prima linie un număr natural reprezentând răspunsul la cerința specificată.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N ≤ 100</code></li>
	<li><code>0 ≤</code> orice număr din șir <code>≤ 1000000000</code></li>
	<li>Pentru cerințele 2 și 3 se garantează că pentru toate numerele din șir se poate efectua tăierea</li>
	<li>Pentru cerința 1 dacă șirul nu conține numere prime se va afișa <code>0</code></li>
	<li>Pentru cerințele 2 și 3 dacă în urma tăierilor nu se obține niciun număr prim, se va afișa <code>0</code></li>
	<li>În concurs, pentru rezolvarea fiecărei cerințe s-au obținut 30 de puncte. Pe site se acordă 10 puncte pentru exemple.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>tai.in</code></p>

<pre contenteditable="true" editable="true">1
5
2 13 21 17 1</pre>

<p><code>tai.out</code></p>

<pre contenteditable="true" editable="true">17</pre>

<h3>Explicație</h3>

<p>Numere prime din șir sunt <code>2</code>, <code>13</code> și <code>17</code>, iar maximul este <code>17</code>.</p>

<h1>Exemplul 2</h1>

<p><code>tai.in</code></p>

<pre contenteditable="true" editable="true">2
3
23 196 27</pre>

<p><code>tai.out</code></p>

<pre contenteditable="true" editable="true">19</pre>

<h3>Explicație</h3>

<p>Din <code>23</code> se obțin două numere <code>2</code> și <code>3</code>, din <code>196</code> se pot obține numerele <code>1</code> și <code>96</code> sau <code>19</code> și <code>6</code>, iar din <code>27</code> se obțin numerele <code>2</code> și <code>7</code>. Cel mai mare număr prim care se poate obține este <code>19</code>.</p>

<h1>Exemplul 3</h1>

<p><code>tai.in</code></p>

<pre contenteditable="true" editable="true">3
3
1234 17119 5678</pre>

<p><code>tai.out</code></p>

<pre contenteditable="true" editable="true">71</pre>

<h3>Explicație</h3>

<p>Din numărul <code>1234</code> se pot obține numerele: <code>1</code>, <code>2</code>, <code>34</code> sau <code>1</code>, <code>23</code>, <code>4</code> sau <code>12</code>, <code>3</code>, <code>4</code>.</p>

<p>Din numărul <code>17119</code> se pot obține numerele: <code>1</code>, <code>7</code> și <code>119</code> sau <code>1</code>, <code>71</code> și <code>19</code> sau <code>1</code>, <code>711</code> și <code>9</code> sau <code>17</code>, <code>1</code> și <code>19</code> sau <code>17</code>, <code>11</code> și <code>9</code>.</p>

<p>Din numărul <code>5678</code> se pot obține numerele: <code>5</code>, <code>6</code> și <code>78</code> sau <code>5</code>, <code>67</code> și <code>8</code> sau <code>56</code>, <code>7</code> și <code>8</code>.</p>

<p>Cel mai mare număr prim care se poate obține este <code>71</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("tai.in");
ofstream cout("tai.out");

int n , x , cer , rez , maxi , maxi1;

int prim (int n)
{
    if(n == 0 || n == 1) return 0;
    if(n == 2) return 1;
    if(n % 2 == 0) return 0;
    for(int i = 3 ; i * i <= n ; i += 2)
        if(n % i == 0) return 0;
    return 1;
}

void desc(int x)
{
    int aux = x , p = 1 , c = 0;
    while(x != 0)
    {
        c = (x % 10) * p + c;
        x /= 10;
        p *= 10;
        if(prim(x))
        {
            if(x > maxi1 &amp;&amp; aux != x) maxi1 = x;
        }
        if(prim(c))
        {
            if(c > maxi1 &amp;&amp; aux != c) maxi1 = c;
        }
    }
}

int main()
{
    cin >> cer >> n;
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> x;
        if(prim(x)) if(x > rez) rez = x;
        int aux = x , p = 1 , c = 0;
        while(x != 0)
        {
            c = x % 10 * p + c;
            x /= 10;
            p *= 10;
            desc(x);
            if(c != aux)desc(c);
            if(prim(x))
            {
                if(x > maxi &amp;&amp; aux != x) maxi = x;
            }
            if(prim(c))
            {
                if(c > maxi &amp;&amp; aux != c) maxi = c;
            }
        }
    }
    if(cer == 1) cout << rez;
    else if(cer == 2) cout << maxi;
    else cout << maxi1;
}</pre>
