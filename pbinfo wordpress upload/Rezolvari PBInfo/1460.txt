<h3>Cerința</h3>

<p>La o serbare sunt <code>n</code> grupe de copii care poartă <code>p</code> tipuri de uniforme. Scrieţi un program care să afişeze pe ecran tipurile de uniforme în ordinea descrescătoare a numărului total de copii ce poartă fiecare tip de uniformă. Afişarea se va face pe o singură linie, valoriile fiind separate printr-un spaţiu.</p>

<h3>Date de intrare</h3>

<p>Fișierul de intrare <code>serbare.in</code> conține, pe prima linie, numerele <code>n</code> şi <code>p</code>, separate printr-un spaţiu, iar pe următoarele <code>n</code> linii câte două valori separate printr-un spaţiu ce reprezintă numărul de copii dintr-o grupă şi respectiv tipul de uniformă pe care aceştia îl poartă.</p>

<h3>Date de ieșire</h3>

<p>Fișierul de ieșire <code>serbare.out</code> va conţine tipurile de uniforme în ordinea descrescătoare a numărului total de copii ce poartă fiecare tip de uniformă. Numerele vor fi separate printr-un spaţiu.</p>

<h3>Restricții și precizări</h3>

<ul>
	<li><code>1 ≤ n ≤ 1000 </code></li>
	<li><code>1 ≤ p ≤ 11 </code></li>
	<li>Numărul de copii dintr-o grupă este cel mult <code>100 </code></li>
	<li>Fiecare mărime de uniformă din intervalul <code>[1,p]</code> este purtată de cel puţin un copil.</li>
</ul>

<h3>Exemplu:</h3>

<p><code>serbare.in</code></p>

<pre contenteditable="true" editable="true">5 3
20 2
20 3
30 2
20 1
10 1</pre>

<p><code>serbare.out</code></p>

<pre contenteditable="true" editable="true">2 1 3</pre>

<h3>Explicaţii:</h3>

<p>Tipul <code>2</code> de uniformă este purtat de <code>50</code> de copii, tipul <code>1</code> de <code>30</code> de copii, iar tipul <code>3</code> de 20 de copii.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream fin("serbare.in");
ofstream fout("serbare.out");
int main()
{
    int f[11]={0} , n , m , c , b , maxi = 0;
    fin >> n >> m;
    for(int i = 0 ; i < n ; ++i)
    {
        fin >> c >> b;
        f[b]+=c;
        if(f[b] > maxi) maxi=f[b];
    }
    for(int i = maxi ; i >= 1 ; --i)
    {
        for(int j = 1 ; j <= m ; ++j)
        {
            if(i==f[j]) 
            fout << j <<" ";
        }
    }
    return 0;
}</pre>
