<p>Se consideră un șir de <code>n</code> numere întregi, cu <code>n</code> număr natural nenul. Se elimină primul element din șir și toate elementele șirului aflate pe poziții care reprezintă numere prime, în ordinea crescătoare a pozițiilor. Operația de eliminare se repetă cu elementele rămase în șir, repoziționate după eliminarea celorlalte, până când este eliminat și ultimul element rămas.</p>

<h1>Cerința</h1>

<p>Să se scrie un program care afișează elementele șirului inițial, în ordinea în care au fost eliminate conform algoritmului descris mai sus.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>elimin_prime.in</code> conține pe prima linie numărul <code>n</code>, iar pe a doua linie <code>n</code> numere întregi separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>elimin_prime.out</code> va conține pe prima linie, separate prin spațiu, numerele din fișierul de intrare în ordinea eliminării acestora.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 100.000</code></li>
	<li>numerele de pe a doua linie a fișierului de intrare sun cuprinse în intervalul <code>[-1.000.000.000, 1.000.000.000]</code></li>
	<li>elementele șirului sunt indexate de la <code>1</code> la <code>n</code>.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>elimin_prime.in</code></p>

<pre contenteditable="true" editable="true">10
1 2 3 4 5 6 7 8 9 10</pre>

<p><code>elimin_prime.out</code></p>

<pre contenteditable="true" editable="true">1 2 3 5 7 4 6 8 10 9</pre>


<h2>Exemplul 2:</h2>

<p><code>elimin_prime.in</code></p>

<pre contenteditable="true" editable="true">20
4 23 16 -7 89 115 23 11 15 2 -8 -9 21 0 75 23 32 -1 4 5</pre>

<p><code>elimin_prime.out</code></p>

<pre contenteditable="true" editable="true">4 23 16 89 23 -8 21 32 4 -7 115 11 2 0 5 15 -9 75 -1 23</pre>

<h3>Atenție!</h3>

<p>Programele vor folosi doar instrucțiunile de bază ale limbajului de programare ales, inclusiv cele de intrare/ieșire, dar nu și alte funcții din biblioteci specializate (<code>algorithm</code>, <code>string</code>,…).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin ("elimin_prime.in");
ofstream cout ("elimin_prime.out");

struct nod
{
    int info;
    nod* urm;
};

#define Max 100010

bool ok[Max];

void Ciur()
{
    for (int i = 2; i * i < Max; i ++)
        if (!ok[i])
            for (int j = i * i; j < Max; j += i)
                ok[j] = 1;
}
void sterge(nod * p, nod * q)
{
    nod* ne = q -> urm;
    if(ne != NULL)q -> urm = ne -> urm;
    else q -> urm = NULL;

}

void adaugare(nod *&amp;prim , nod *&amp;ultim , int x)
{
    nod *nou = new nod;
    nou ->info = x;
    nou ->urm = NULL;
    if(prim == NULL) prim = ultim=nou;
    else
    {
        ultim ->urm = nou;
        ultim = nou;
    }
}

void afisare(nod *prim)
{
    while(prim != NULL)
    {
        cout << prim -> info << " ";
        prim = prim -> urm;
    }
}
int main()
{
    Ciur();
    int n;
    cin >> n;
    nod* prim = NULL;
    nod* ultim = NULL;
    int x;
    for (int i = 1; i <= n; i ++)
    {
        cin >> x;
        adaugare(prim , ultim , x);
    }
    //afisare(prim);

    while(n)
    {
        int s = 0 , i = 2;
        nod *p = prim;
        cout << prim ->info << " ";
        while(i <= n)
        {
            if(!ok[i])
            {
                cout << p -> urm -> info << " ";
                nod *q = p -> urm;
                p -> urm = q -> urm;
                delete q;
                s++;
            }
            else p = p ->urm;
            i++;
        }
        p = prim;
        prim = prim -> urm;
        delete(p);
        s++;
        n -= s;
    }
    return 0;
}
</pre>
