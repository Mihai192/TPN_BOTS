<h1>Cerința</h1>

<p>Se dă un șir format din <code>n</code> numere naturale. Se mai dă o valoare <code>x</code> și se garantează că șirul începe și se termină cu valoarea <code>x</code>. Transformați șirul astfel: <br>
</p><ul>
	<li>Elementele cu valoarea <code>x</code> rămân pe pozițiile lor;</li>
	<li>Secvențele de elemente diferile de <code>x</code> aflate între două poziții cu valoarea <code>x</code> se ordonează crescător (între aceleași două elemente cu valoarea <code>x</code> se vor afla aceleași elemente ca la început dar în ordine crescătoare).</li><br>
</ul><p></p>


<h1>Date de intrare</h1>

<p>Fișierul <code>alfa.in</code> conține pe prima linie un număr natural <code>n</code> reprezentând dimensiunea șirului și un număr <code>x</code> cu semnificația de mai sus. Pe linia a doua <code>n</code> numere naturale, separate prin câte un spațiu, reprezentând elementele șirului.</p>

<h1>Date de ieșire</h1>

<p>Fișierul <code>alfa.out</code> conține cele <code>n</code> elemente ale șirului în ordinea cerută.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 &lt;= n &lt;= 1000</code></li>
	<li>Elementele șirului dat sunt naturale nenule formate din maximum <code>4</code> cifre</li>
	<li>Pentru <code>40</code> de puncte șirul conține doar două elemente cu valoarea <code>x</code> (primul și ultimul).</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595361906&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3356%2Falfa&amp;flash=0&amp;wgl=1&amp;dt=1595361906317&amp;bpp=15&amp;bdt=224&amp;idt=178&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=3207268879616&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361906&amp;ga_hid=1863294359&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1204&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066393&amp;oid=3&amp;pvsid=3242918245012226&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F131%2Fsortcif2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=5YsYMiAd4x&amp;p=https%3A//www.pbinfo.ro&amp;dtd=185" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="COO15p2S3-oCFe_KuwgdfYMFlg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>alfa.in</code></p>

<pre contenteditable="true" editable="true">10 3
3 4 1 2 3 7 9 8 3 3</pre>


<p><code>alfa.out</code></p>

<pre contenteditable="true" editable="true">3 1 2 4 3 7 8 9 3 3</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("alfa.in");
ofstream cout("alfa.out");

int a[1001];

int main(){
    int n, x;
    cin >> n >> x;
    for(int i = 1; i <= n; ++i)
        cin >> a[i];
    int st = 1, dr = 1;
    for(int i = 1; i <= n; ++i){
        if(a[i] == x){
            sort(a + st, a + dr);
            st = dr + 1;
        }
        dr++;
    }
    for(int i = 1; i <= n; ++i)
        cout << a[i] << ' ';
}</pre>
