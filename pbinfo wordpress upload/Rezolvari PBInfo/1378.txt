<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include<iostream>
#include<stdio.h>
FILE *f=fopen("flori2.in","r");
FILE *g=fopen("flori2.out","w");

int n,k,a[150][150];  

int irelj(int i,int j) //verifica daca fata i e in relatie cu j(au cel putin o floare in comun)
{int u,v;
 for(u=1;u<=a[i][0];u++)   //a[i][0] e numarul de elemente pe linia i
    for(v=1;v<=a[j][0];v++)
      if (a[i][u]==a[j][v])
         return 1;
 return 0;
}
int apartine(int val,int linie) //caut val in multimea de pe linia linie
{int j,lg=a[linie][0];
 for(j=1;j<=lg;j++)
    if (val==a[linie][j])
        return 1;
 return 0;
}

void reuneste(int i,int j) //reuneste in linia i linia j
{int u;
 for(u=1;u<=a[j][0];u++)
    if(!apartine(a[j][u],i))
      {a[i][0]++;
        a[i][ a[i][0] ]=a[j][u];
      }
}

int main()
{int viz[150],i,j,val,ok;
 fscanf(f,"%d %d",&amp;n,&amp;k);
 for(i=1;i<=n;i++)
  for(j=1;j<=k;j++)
    {fscanf(f,"%d",&amp;val);
     if(!apartine(val,i))
        {a[i][0]++;  //pe prima coloana am nr. de tipuri distincte de flori
         a[i][ a[i][0] ]=val;  //in multimea de pe linia i am tipurile distincte de flori al fetitei i
        }
    }
 for(i=1;i<=n;i++)
  viz[i]=i;     //initial exista n grupe
 for(i=1;i<=n;i++)
  {ok=0;
    if(a[i][0])
    {
     for(j=i+1;j<=n;j++)
        if(irelj(i,j))
            {
                viz[j]=viz[i];  //j trebuie sa ajunga in grupa cu i
                reuneste(i,j);  //reunesc in linia i linia j
                a[j][0]=0;//consider ca in multimea j am 0 elemente acuma
                ok=1;
                }
            }
     if (ok) i--;//faptul ca am reunit in i cel putin o multime j implica sa continui cu aceeasi linie i
                     //daca as lasa i sa se incrementeze conform for-ului,ar gresi in sensul ca 
                     //pt. i rel j si i nu e in rel cu k si j rel k      
                     //ar pune j in grupa i dar k ar ajunge in alta grupa
  }


 for(i=1;i<=n;i++)
    if(viz[i])
     {fprintf(g,"%d ",i);
      for(j=i+1;j<=n;j++)
    if(viz[i]==viz[j])
        {fprintf(g,"%d ",j);
         viz[j]=0;       //ca sa nu mai fie prelucrat
        }
      fprintf(g,"\n");
     }
 fclose(g);
}
</pre>
