<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <stack>
#include <queue>
using namespace std;

#define inf 0x3f3f3f3f

ifstream cin("tollroads.in");
ofstream cout("tollroads.out");

int n, m, k, X, t, P[100001];
vector<vector<pair<int, int>>> G(100001);

int BFS(int nod){
    queue<int> Q;
    Q.push(nod);
    P[nod] = 0;
    while(!Q.empty()){
        int nod1 = Q.front();
        for(auto x:G[nod1]){
            int y = x.first;
            int c = x.second;
            if(P[y] > P[nod1] + c &amp;&amp; P[nod1] + c <= t)
                P[y] = P[nod1] + c, Q.push(y);
        }
        Q.pop();
    }
    int c = 0;
    for(int i = 1; i <= n; ++i){
        if(P[i] <= t)
            c++, P[i] = inf;
    }
    return c-1;
}

int main(){
    cin >> n >> m >> k;
    int a, b, c;
    for(int i = 1; i <= m; ++i)
        cin >> a >> b >> c, G[a].push_back({b, c}), G[b].push_back({a, c});
    for(int i = 1; i <= n; ++i)
        P[i] = inf;
    for(int i = 1; i <= k; ++i){
        cin >> X >> t;
        cout << BFS(X) << '\n';
    }
    return 0;
}</pre>
