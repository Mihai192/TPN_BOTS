<h1>Cerința</h1>

<p>Se dă o stivă inițial vidă. Să se efectueze <code>Q</code> operații de forma:</p>

<p><code>1 x:</code> Se adaugă <code>x</code> în stivă.<br>
<code>2:</code> Se șterge elementul din vârful stivei.<br>
<code>3 S:</code> Se întreabă dacă se poate scrie valoarea <code>S</code> ca sumă de elemente aflate în stivă. Fiecare element poate fi folosit o singură dată în calcularea sumei. Răspunsul va fi <code>1</code> în caz afirmativ și <code>0</code> în caz negativ.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>qstiva.in</code> conține pe prima linie numărul <code>Q</code>, iar pe următoarele <code>Q</code> linii se vor afla operațiile descrise mai sus.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>qstiva.out</code> va conține răspunsurile operațiilor de tipul <code>3</code>, câte un răspuns pe linie, în ordinea în care acestea apar în fișierul de intrare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ Q ≤ 100000</code></li>
	<li>pentru o operație de tipul <code>1</code>, <code>1 ≤ x ≤ 1000</code></li>
	<li>pentru o operație de tipul <code>3</code>, <code>1 ≤ S ≤ 1000</code></li>
	<li>nu se vor efectua operații de tipul <code>2</code> sau de tipul <code>3</code> dacă stiva este goală.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595353287&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1924%2Fqstiva&amp;flash=0&amp;wgl=1&amp;dt=1595353287290&amp;bpp=6&amp;bdt=190&amp;idt=150&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=6184659067636&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353287&amp;ga_hid=632739957&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1142&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=558305779612657&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2700%2Fradixsort&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=WrimUvTUMT&amp;p=https%3A//www.pbinfo.ro&amp;dtd=157" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CLrJ-I_y3uoCFebjuwgdpHINWA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>qstiva.in</code></p>

<pre contenteditable="true" editable="true">8
1 12
2
1 1
3 2
1 2
1 12
3 13
2</pre>


<p><code>qstiva.out</code></p>

<pre contenteditable="true" editable="true">0
1</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <bitset>
using namespace std;

ifstream cin("qstiva.in");
ofstream cout("qstiva.out");

int n , S , Q , op , x , a[100001];
bitset <1001> dp[100001];

int main()
{
    cin >> Q;
    for(int k = 1 ; k <= Q ; ++k)
    {
        cin >> op;
        if(op == 1)
        {
            cin >> x;
            a[++n] = x;
            dp[0][0] = 1;
            dp[n].reset();
            for(int i = 0 ; i <= 1000 ; ++i)
            {
                if(dp[n - 1][i] == 1) dp[n][i] = 1;
                if(i >= a[n])
                    if(dp[n - 1][i - a[n]] == 1) dp[n][i] = 1;
            }
        }
        if(op == 2) --n;
        if(op == 3)
        {
            cin >> S;
            cout << dp[n][S] << '\n';
        }
    }
    return 0;
}</pre>
