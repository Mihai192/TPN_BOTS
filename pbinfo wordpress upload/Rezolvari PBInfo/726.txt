<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include<fstream>
using namespace std;
ifstream fin("acoperire1.in");
ofstream fout("acoperire1.out");
int n,k,x[210][210],u,v,
C[6][6]={
    {0,1,1,1,2,0},
    {3,3,3,1,2,4},
    {5,5,3,2,2,4},
    {5,6,6,7,4,4},
    {5,6,8,7,7,7},
    {0,6,8,8,8,0}},
    
D[6][6]={
    {0,0,1,1,1,2},
    {0,3,1,2,2,2},
    {4,3,3,3,5,5},
    {4,4,4,6,6,5},
    {7,7,7,8,6,5},
    {7,8,8,8,6,0}},
    
O[4][5]={
    {1,1,1,2,0},
    {0,3,1,2,4},
    {0,3,2,2,4},
    {0,3,3,4,4}},
    
V[5][4]={
    {1,0,0,0},
    {1,2,2,2},
    {1,1,3,2},
    {3,3,3,4},
    {0,4,4,4}},
    
R[4][4]={
    {1,1,1,2},
    {1,2,2,2},
    {3,3,3,4},
    {3,4,4,4}};

void COLT(int,int),DIAG(int,int),ORIZ(int,int),VERT(int,int),REST(int,int);
int main()
{
    
    int i,j;
    
    fin >> n;
    
    if(n%4!=2)
    {
        fout << -1;
        return 0;
    }
    
    COLT(1,1);
    
    for(i=5;i<n-1;i+=4)
        DIAG(i,i);
    for(j=6;j<n;j+=4)
        ORIZ(1,j);
    for(i=6;i<n;i+=4)
        VERT(i,1);
    for(i=2;i<n;i++)
        for(j=2;j<n;j++)
            if(!x[i][j])
                REST(i,j);
    for(i=1;i<=n;i++)
    {
        for(j=1;j<n;j++)
            fout << x[i][j] << " ";
        fout << x[i][j] << endl;
    }
    
    return 0;

}

void COLT(int i,int j)
{
    for(u=0;u<6;u++)
        for(v=0;v<6;v++)
            if(C[u][v])
                x[i+u][j+v]=k+C[u][v];
        k+=8;
}
void DIAG(int i,int j)
{
    for(u=0;u<6;u++)
        for(v=0;v<6;v++)
            if(D[u][v])
                x[i+u][j+v]=k+D[u][v];
        k+=8;
}
void ORIZ(int i,int j)
{
    for(u=0;u<4;u++)
        for(v=0;v<5;v++)
            if(O[u][v])
                x[i+u][j+v]=k+O[u][v];
        k+=4;
}
void VERT(int i,int j)
{
    for(u=0;u<5;u++)
        for(v=0;v<4;v++)
            if(V[u][v])
                x[i+u][j+v]=k+V[u][v];
        k+=4;
}
void REST(int i,int j)
{
    for(u=0;u<4;u++)
        for(v=0;v<4;v++)
            if(R[u][v])
                x[i+u][j+v]=k+R[u][v];
        k+=4;
}</pre>
