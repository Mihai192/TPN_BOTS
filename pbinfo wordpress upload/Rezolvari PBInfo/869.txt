<h1>Cerința</h1>

<p>Se consideră o clădire de formă dreptunghiulară, împărțită în <code>n*m</code> camere, dispuse sub forma unei matrice cu <code>n</code> linii și <code>m</code> coloane. Dintr-o cameră se poate trece în oricare dintre cele <code>4</code> camere vecine pe linie sau pe coloană. Unele camere sunt închise, și în ele nu se poate intra deloc. Trecerea dintr-o cameră în altă cameră durează un minut.</p>

<p>Camerele formează <strong>zone</strong>. O zonă este alcătuită dintr-un număr maxim de camere cu proprietatea că oricum am alege două camere din zonă se poate ajunge dintr-o cameră în alta trecând doar prin camere libere.</p>

<p>În anumite camere se află echipe de pompieri. Fiecare echipă deservește zona din care face parte camera echipei.</p>

<p>S-a constatat că așezarea echipelor în camere nu este tocmai corectă. Mai precis, există zone care nu sunt deservite de nicio echipă de pompieri. Pentru corectarea acestei probleme există două operații posibile:</p>

<ul>
	<li>mutarea unor echipe din camera curentă în altă cameră – operație care costă <code>1</code> leu</li>
	<li>crearea unor echipe noi și plasare lor în camere – operație care costă <code>2</code> lei</li>
</ul>

<p>Să se determine costul total minim al operațiilor necesare, astfel încât fiecare zonă din clădire să fie deservită de cel puțin o echipă de pompieri.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>acces2.in</code> conține pe prima linie numerele <code>n m</code>; următoarele <code>n</code> linii conțin câte <code>m</code> caractere, care pot fi:</p>

<ul>
	<li><code>-</code> – reprezintă o cameră liberă</li>
	<li><code>#</code> – reprezintă o cameră închisă</li>
	<li><code>P</code> – reprezintă o cameră în care se găsește o echipă de pompieri</li>
</ul>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>acces2.out</code> va conține pe prima linie costul total minim.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n,m ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356575&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F869%2Facces2&amp;flash=0&amp;wgl=1&amp;dt=1595356575456&amp;bpp=4&amp;bdt=550&amp;idt=175&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=2042594149971&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356576&amp;ga_hid=2141643249&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=17&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1346&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21065725&amp;oid=3&amp;pvsid=1831402881681&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F885%2Fimperii&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=pChAH3AZ0j&amp;p=https%3A//www.pbinfo.ro&amp;dtd=181" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CMXT7q_-3uoCFeLJuwgdjE0Gng"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>acces2.in</code></p>

<pre contenteditable="true" editable="true">4 6
P-#-#P
--###-
##P-P#
--#--#</pre>

<p><code>acces2.out</code></p>

<pre contenteditable="true" editable="true">3</pre>

<h1>Explicație</h1>

<p>În clădire sunt <code>5</code> zone: una este deservită de <code>2</code> echipe, două sunt deservite de câte o echipă și două nu sunt deservite deloc. Costul minim <code>3</code> se obține prin mutarea unei echipe (cost <code>1</code>) și crearea unei echipe noi (cost <code>2</code>).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("acces2.in");
ofstream cout("acces2.out");

int n , m , a[1001][1001] , cnt , nrp , nrc , sum , pazi , pomp , ind;
char s;

const int di[] = { 0 , 0 , -1 , 1};
const int dj[] = {-1 , 1 ,  0 , 0};

struct poz
{
    int i , j;
};

int inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m;
}

poz c[1001];

queue <poz> q;

void lee(int i , int j)
{
    poz r;
    r.i = i , r.j = j;
    a[r.i][r.j] = ind;
    q.push(r);
    while(!q.empty())
    {
        poz r;
        r = q.front();
        for(int i = 0 ; i < 4 ; i++)
        {
            int inou = r.i + di[i];
            int jnou = r.j + dj[i];
            if(a[inou][jnou] == -2) nrp++;
            if(inside(inou , jnou) &amp;&amp; (a[inou][jnou] == 0 || a[inou][jnou] == -2))
            {
                a[inou][jnou] = ind;
                q.push({inou , jnou});
            }
        }
        q.pop();
    }
}
int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
    {
        cin >> s;
        if(s == '#') a[i][j] = -1;
        else if(s == '_') a[i][j] = 0;
        else if(s == 'P') a[i][j] = -2;
    }
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            if(a[i][j] == 0)
            {
                ind++;
                nrp = 0;
                lee(i , j);
                if(nrp > 0) pomp += (nrp - 1);
                else nrc++;
            }
    if(pomp >= nrc) sum = pomp - nrc;
    else sum += (2 * (nrc - pomp)) + pomp;
    cout << sum;
}</pre>
