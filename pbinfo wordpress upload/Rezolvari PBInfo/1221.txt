<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("piesesah.in");
ofstream cout("piesesah.out");

const int dit[] = {-1 , 0 , 1 ,  0};///tura
const int djt[] = { 0 , 1 , 0 , -1};
const int dip[] = {-1 , -1 , 1 ,  1};///pion si nebun
const int djp[] = { 1 , -1 , 1 , -1};
const int dir[] = {-1 , -1 , -1 ,  0 , 0 ,  1 , 1 , 1};///rege si regina
const int djr[] = {-1 ,  0 ,  1 , -1 , 1 , -1 , 0 , 1};
const int dic[] = {-2 , -2 , -1 , 1 , 2 ,  2 ,  1 , -1};///cal
const int djc[] = {-1 ,  1 ,  2 , 2 , 1 , -1 , -2 , -2};

struct piese
{
    char t;
    int i , j;
};
int a[1001][1001] , n;
piese p[1000001];

int inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n  &amp;&amp; j >= 1 &amp;&amp; j <= n;
}

void tura(int x , int y)
{
    for(int k = 0 ; k < 4 ; k++)
    {
        int i = x + dit[k];
        int j = y + djt[k];
        while(inside(i , j) &amp;&amp; a[i][j] != 2)
        {
            a[i][j] = 1;
            i += dit[k];
            j += djt[k];
        }
    }
}

void nebun(int x , int y)
{
    for(int k = 0 ; k < 4 ; k++)
    {
        int i = x + dip[k];
        int j = y + djp[k];
        while(inside(i , j) &amp;&amp; a[i][j] != 2)
        {
            a[i][j] = 1;
            i += dip[k];
            j += djp[k];
        }
    }
}

void regina(int x , int y)
{
    for(int k = 0 ; k < 8 ; k++)
    {
        int i = x + dir[k];
        int j = y + djr[k];
        while(inside(i , j) &amp;&amp; a[i][j] != 2)
        {
            a[i][j] = 1;
            i += dir[k];
            j += djr[k];
        }
    }
}

void rege(int x , int y)
{
    for(int k = 0 ; k < 8 ; k++)
    {
        int i = x + dir[k];
        int j = y + djr[k];
        if(inside(i , j) &amp;&amp; a[i][j] == 0) a[i][j] = 1;
    }
}

void cal(int x , int y)
{
    for(int k = 0 ; k < 8 ; k++)
    {
        int i = x + dic[k];
        int j = y + djc[k];
        if(inside(i , j) &amp;&amp; a[i][j] == 0) a[i][j] = 1;
    }
}

void pion(int x , int y)
{
    for(int k = 0 ; k < 4 ; k++)
    {
        int i = x + dip[k];
        int j = y + djp[k];
        if(inside(i , j) &amp;&amp; a[i][j] == 0) a[i][j] = 1;
    }
}
int main()
{
    int m , t , x , y;
    cin >> n >> m >> t;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> p[i].t >> p[i].i >> p[i].j;
        a[p[i].i][p[i].j] = 2;
    }
    for(int i = 1 ; i <= m ; i++)
    {
        if(p[i].t == 'n') nebun(p[i].i , p[i].j);
        if(p[i].t == 't') tura(p[i].i , p[i].j);
        if(p[i].t == 'q') regina(p[i].i , p[i].j);
        if(p[i].t == 'c') cal(p[i].i , p[i].j);
        if(p[i].t == 'p') pion(p[i].i , p[i].j);
        if(p[i].t == 'r') rege(p[i].i , p[i].j);
    }
    for(int i = 1 ; i <= t ; i++)
    {
        cin >> x >> y;
        cout << a[x][y] << '\n';
    }
}</pre>
