<p>Spunem că un număr natural este <strong>aproape prim</strong> dacă el poate fi scris ca produs de două numere prime. De exemplu <code>6</code> și <code>25</code> sunt aproape prime pentru că <code>6 = 2 * 3</code>, iar <code>25 = 5 * 5</code>. Considerăm șirul crescător al numerelor naturale aproape prime: <code>4</code>, <code>6</code>, <code>9</code>, <code>10</code>, <code>14</code>, <code>15</code>, <code>21</code>, … Acestora li se asociază câte un număr de ordine, numerotarea începând cu <code>1</code>. Deci <code>4</code> este primul număr aproape prim, <code>6</code> este al doilea număr, <code>9</code> este al treilea etc.</p>

<h1>Cerința</h1>

<p>Dat un număr natural <code>N</code>, să se determine al <code>N</code>-lea număr aproape prim.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>N</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran un singur număr natural, reprezentând al <code>N</code>-lea număr aproape prim.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N ≤ 23.378</code></li>
</ul>

<h1>Exemplul 1:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">4</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">10</pre>

<h1>Exemplul 2:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">300</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">1003</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

int E[100001], c, n;
bool e[1000001], B[1000001];
int x = 1000001;

void eratostene(){
    e[0] = e[1] = 1;
    for(int i = 2 ; i * i <= x ; ++i)
        for(int j = 2 ; i * j <= x ; ++j)
            e[i * j] = 1;
    for(int i = 1; i <= 1000000; ++i)
        if(!e[i])
            E[++c] = i;
    for(int i = 1; i < c; ++i)
        for(int j = 1; j <= c; ++j)
            if(1LL * E[i] * E[j] < 1000001)
                B[E[i] * E[j]] = 1;
            else i++, j=1;
    for(int i = 1; n != 0; ++i){
        if(B[i] == 1){
            n--;
            if(n==0){
                cout << i;
                return;
            }
        }
    }
}

int main(){
    cin >> n;
    eratostene();
}</pre>
