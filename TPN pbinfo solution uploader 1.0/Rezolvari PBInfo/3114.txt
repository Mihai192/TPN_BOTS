<p>Fie o matrice cu <code>n</code> linii (numerotate de la <code>1</code> la <code>n</code>) și <code>m</code> coloane (numerotate de la <code>1</code> la <code>m</code>) ce conține doar literele <code>a</code> și <code>b</code>. Se definește un drum de la o poziție <code>(xs, ys)</code> la o alta <code>(xf, yf)</code> ca fiind o succesiune de pași care pornește din coordonatele <code>(xs, ys)</code> și ajunge în <code>(xf, yf)</code> și care trece numai prin componente care memorează litera <code>a</code>. La fiecare pas, de la o poziţie <code>(i, j)</code> se poate trece într-una din poziţiile <code>(i+1, j)</code>, <code>(i-1, j)</code>, <code>(i, j+1)</code>, <code>(i, j-1)</code>. Lungimea drumului este dată de numărul de componente care compun drumul.</p>

<h1>Cerința</h1>

<p>Având la dispoziție <code>q</code> întrebări date sub forma a patru numere naturale <code>xs ys xf yf</code>, trebuie să răspundeți pentru fiecare întrebare care este lungimea minimă a unui drum de la <code>(xs, ys)</code> la <code>(xf, yf)</code> care trece numai prin componente ce memorează litera <code>a</code>. Dacă un astfel de drum nu există, veți afișa valoarea <code>–1</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>abq.in</code> conține pe prima linie, separate prin spațiu, numerele <code>n</code> și <code>m</code>. Pe următoarele <code>n</code> linii se găsesc câte <code>m</code> caractere <code>a</code> sau <code>b</code> (neseparate de spații) și care definesc matricea. Pe linia <code>n+2</code> se găsește numărul natural <code>q</code> reprezentând numărul de întrebări, iar pe următoarele <code>q</code> linii se află câte <code>4</code> numere naturale reprezentând o întrebare.</p>

<h1>Date de ieșire</h1>

<p>Fişierul <code>abq.out</code> va avea exact <code>q</code> linii. Pe linia <code>i</code> se va afla un singur număr întreg reprezentând răspunsul la a <code>i</code>-a întrebare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ n,m ≤ 200</code></li>
	<li><code>2 ≤ q ≤ 20</code></li>
	<li>Pentru 30% dintre teste, <code>n ≤ 50</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356586&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3114%2Fabq&amp;flash=0&amp;wgl=1&amp;dt=1595356586692&amp;bpp=5&amp;bdt=531&amp;idt=148&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4198410923330&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356587&amp;ga_hid=840408366&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=19&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1220&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=3196849952688281&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3380%2Fcastel2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=tSXTxCzfIW&amp;p=https%3A//www.pbinfo.ro&amp;dtd=153" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CIaAm7X-3uoCFe7Fuwgda9sOHQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>abq.in</code></p>

<pre contenteditable="true" editable="true">3 4
abab
aaab
bbaa
4
1 1 2 3
1 2 2 3
1 1 3 4
3 3 3 4</pre>


<p><code>abq.out</code></p>

<pre contenteditable="true" editable="true">4
-1
6
2</pre>


<h3>Explicație</h3>

<p>Pentru prima întrebare, <code>1 1 2 3</code>,</p>

<p><code>a</code>bab<br>
<code>aaa</code>b<br>
bbaa </p>

<p>drumul este cel specificat și este compus din <code>4</code> caractere.</p>

<p>Pentru a doua întrebare, <code>1 2 2 3</code>,</p>

<p>a<code>b</code>ab<br>
aaab<br>
bbaa</p>

<p>caracterul de început este b și de aceea se afișează  -1.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("abq.in");
ofstream cout("abq.out");

const int di[] = { 0 , 0 , 1 , -1};
const int dj[] = {-1 , 1 , 0 ,  0};

int n , m , a[201][201] , k , i1 , j1 , i2 , j2;
char b[201][201];

struct poz
{
    int i , j;
};

bool inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m;
}

queue <poz>Q;

void lee(int i1 , int j1 , int i2 , int j2)
{
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ;j ++)
            a[i][j] = 0;
    if(b[i1][j1] == 'b')
    {
        cout << -1 << '\n';
        return;
    }
    else a[i1][j1] = 1;
    Q.push({i1 , j1});
    while(!Q.empty())
    {
        poz r;
        r = Q.front();
        for(int d = 0 ; d < 4 ; d++)
        {
            int inou = r.i + di[d];
            int jnou = r.j + dj[d];
            if(inside(inou , jnou) &amp;&amp; b[inou][jnou] == 'a' &amp;&amp; a[inou][jnou] == 0)
            {
                a[inou][jnou] = a[r.i][r.j] + 1;
                Q.push({inou , jnou});
            }
        }
        Q.pop();
    }
    if(a[i2][j2] != 0)
        cout << a[i2][j2] << '\n';
    else cout << -1 << '\n';

}
int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            cin >> b[i][j];
    cin >> k;
    for(int i = 1 ; i <= k ; i++)
    {
        cin >> i1 >> j1 >> i2 >> j2;
        lee(i1 , j1 , i2 , j2);
    }
    return 0;
}</pre>
