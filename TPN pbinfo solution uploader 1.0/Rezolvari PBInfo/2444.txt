<p>Se dă o expresie matematică în care pot să apară literele <code>x</code>, <code>y</code>, <code>z</code>, <code>t</code>, cifre și semnele <code>+</code> sau <code>-</code>.<br>
Cifrele alăturate formează numere. Literele reprezintă variabile. O variabilă poate fi precedată de un număr. Între variabilă și numărul care o precede nu există alte caractere. Un grup format dintr-o literă și, eventual, un număr care o precede formează un monom. Un monom nu conține mai multe litere. Numărul care apare într-un monom se numește coeficient.<br>
Expresia poate să conțină și numere care nu sunt urmate de o variabilă. Aceste numere se numesc termeni liberi. <br>
Expresia este deci alcătuită din monoame și termeni liberi. Fiecare monom și fiecare termen liber este precedat de unul dintre semnele <code>+</code> sau <code>-</code>.<br>
Exemple: <br>
Expresii corecte: <br>
<code>-x+100</code><br>
<code>+3x+2y-3z+7x-15-3+8z-7y</code><br>
<code>+10x-7y+3x-7+5z-8t-z-x-y+3</code></p>

<p>Expresii incorecte:<br>
<code>x+100</code> (<code>x</code> nu este precedat de <code>+</code> sau <code>-</code>)<br>
<code>+x+y-3zt</code> (<code>3zt</code> nu este monom, deoarece conţine două litere)<br>
<code>-x + y -34*t + 5z - 5u</code> (în expresie apar caractere nepermise, în acest caz spații, litera <code>u</code> și semnul <code>*</code>) </p>

<p>Valoarea matematică a unei expresii este valoarea care se obține dacă înlocuim literele care apar în expresie cu valori numerice și efectuăm calculele. Valoarea unui monom se obține înmulțind coeficientul monomului cu valoarea pe care o are variabila care apare în respectivul monom. De exemplu, valoarea expresiei <code>+3x</code> pentru <code>x=2</code>  este <code>6</code>.</p>

<h1>Cerința</h1>

<p>Fiind dată o expresie corectă, să se determine:<br>
1. valoarea matematică a expresiei dacă <code>x</code>, <code>y</code>, <code>z</code> și <code>t</code> au valoarea <code>1</code>.<br>
2. numărul de cvartete distincte <code>(x,y,z,t)</code>, de valori întregi care aparțin unui interval dat <code>[a,b]</code>, pentru care expresia matematică corespunzătoare expresiei date este egală cu o valoare dată <code>E</code>. Două cvartete sunt distincte dacă există cel puţin o poziţie pentru care valorile corespunzătoare sunt diferite.</p>

<h1>Date de intrare</h1>

<p>Datele de intrare se citesc din fişierul <code>eq4.in</code>, care are următoarea structură:<br>
- pe prima linie se află numărul natural <code>C</code>, care poate fi egal cu <code>1</code> sau <code>2</code>, în funcţie de cerinţa ce trebuie rezolvată;<br>
- pe a doua linie se află expresia dată;<br>
- pe a treia linie se află valorile <code>a b E</code>, separate prin câte un spațiu. </p>

<h1>Date de ieșire</h1>

<p>Datele de ieşire se vor scrie în fişierul <code>eq4.out</code> astfel:<br>
- Dacă <code>C=1</code>, pe prima linie se va scrie răspunsul la cerința 1;<br>
- Dacă <code>C=2</code>, pe prima linie se va scrie răspunsul la cerința 2.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>coeficienţii sunt numere naturale, având cel mult <code>4</code> cifre</li>
	<li><code>2 ≤ lungimea expresiei ≤ 100000</code></li>
	<li><code>-500 ≤ a ≤ b ≤ 500</code></li>
	<li><code>-10</code><sup><code>15</code></sup><code> ≤ E ≤ 10</code><sup><code>15</code></sup></li>
	<li>Testele care au <code>C=1</code> totalizează <code>20</code> de puncte;</li>
	<li>Testele care au <code>C=2</code> totalizează <code>70</code> de puncte;</li>
	<li>În cel puțin <code>30%</code> dintre teste, în expresia dată apar cel mult trei dintre literele <code>x</code>, <code>y</code>, <code>z</code> sau <code>t</code>.</li>
	<li>În concurs s-au acordat <code>10</code> puncte din oficiu. Aici se acordă <code>10</code> puncte pentru exemplele din enunț.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>eq4.in</code></p>

<pre contenteditable="true" editable="true">1
+10x-7y+3x-7+5z-8t-z-x-y+3
-1 1 0</pre>

<p><code>eq4.out</code></p>

<pre contenteditable="true" editable="true">-4</pre>

<h3>Explicație</h3>

<p>Se rezolvă cerința 1. Valoarea expresiei este: <code>10-7+3-7+5-8-1-1-1+3 = -4</code>.</p>

<h1>Exemplul 2:</h1>

<p><code>eq4.in</code></p>

<pre contenteditable="true" editable="true">1
-x+1
-1 1 0</pre>

<p><code>eq4.out</code></p>

<pre contenteditable="true" editable="true">0</pre>

<h3>Explicație</h3>

<p>Se rezolvă cerința 1. Valoarea expresiei este <code>-1+1 = 0</code>.</p>

<h1>Exemplul 3:</h1>

<p><code>eq4.in</code></p>

<pre contenteditable="true" editable="true">2
+10x-7y+3x-7+5z-8t-z-x-y+3
-1 1 0</pre>

<p><code>eq4.out</code></p>

<pre contenteditable="true" editable="true">8</pre>

<h3>Explicație</h3>

<p>Se rezolvă cerința 2. Sunt <code>8</code> cvartete: <code>(-1,-1,0,-1)</code>, <code>(0,-1,-1,0)</code>, <code>(0,-1,1,1)</code>, <code>(0,0,-1,-1)</code>, <code>(0,0,1,0)</code>, <code>(0,1,1,-1)</code>, <code>(1,0,0,1)</code>, <code>(1,1,0,0)</code> pentru care expresia este egală cu <code>0</code>.</p>

<h1>Exemplul 4:</h1>

<p><code>eq4.in</code></p>

<pre contenteditable="true" editable="true">2
-x+1+0z
-1 1 0</pre>

<p><code>eq4.out</code></p>

<pre contenteditable="true" editable="true">27</pre>

<h3>Explicație</h3>

<p>Se rezolvă cerința 2. Sunt <code>27</code> cvartete: <code>(1,-1,-1,-1)</code>, <code>(1,-1,-1,0)</code>, <code>(1,-1,-1,1)</code>, <code>(1,-1,0,-1)</code>, <code>(1,-1,0,0)</code>, <code>(1,-1,0,1)</code> etc. pentru care expresia este egala cu <code>0</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

ifstream cin("eq4.in");
ofstream cout("eq4.out");
int cer , a , b , cx , cz , ct , cy , c;
long long A[1002002] ,  B[1002002] , p1 , p2 , e;
string s;
int cb_min(long long a[] , int n , long long v)
{
    int st = 1 , dr = n , m;
    while (st <= dr)
    {
        m = (st + dr) / 2;
        if (a[m] >= v) dr = m - 1;
        else st = m + 1;
    }
    return st;
}
int cb_max(long long a[] , int n , long long v)
{
    int st = 1 , dr = n , m;
    while (st <= dr)
    {
        m = (st + dr) / 2;
        if (a[m] <= v) st = m + 1;
        else dr = m - 1;
    }
    return dr;
}
int main()
{
    cin >> cer >> s >> a >> b >> e;
    int i = 0;
    while(s.length())
    {
        int i = 0 , nr = 0 , semn;
        if(s[i] == '+') semn = 1;
        else semn = -1;
        i++;
        while(isdigit(s[i]))
        {
            nr = nr * 10 + s[i] - '0';
            i++;
        }
        if(nr == 0 &amp;&amp; s[i - 1] != '0') nr = 1;
        if(s[i] == 'x') cx = cx + semn * nr;
        else if(s[i] == 'y') cy = cy + semn * nr;
        else if(s[i] == 'z') cz = cz + semn * nr;
        else if(s[i] == 't') ct = ct + semn * nr;
        else c = c + semn * nr , i--;
        if(i + 1 <= s.length()) s = s.substr(i + 1);
        else s = "";
    }
    //cout << cx << " " << cy << " " << cz << " " << ct << " " << c <<'\n';
    if(cer == 1) cout << cx + cy + cz + ct + c;
    else
    {
        for(int i = a ; i <= b ; i++)
            for(int j = a ; j <= b ; j++)
            {
                A[++p1] = cz * i + ct * j + c;
                B[++p2] = e - cx * i - cy * j;
            }
        sort(A + 1 , A + p1 + 1);
        int nrs = 0;
        for(int i = 1 ; i <= p2 ; i++)
            if(A[cb_max(A , p1 , B[i])] == B[i])
                nrs = nrs + cb_max(A , p1 , B[i]) - cb_min(A , p1 , B[i]) + 1;
        cout << nrs;
    }
}</pre>
