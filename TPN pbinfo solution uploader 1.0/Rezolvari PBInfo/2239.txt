<p>Se consideră un șir <code>a[1]</code>, <code>a[2]</code>,…, <code>a[n]</code> de numere naturale nenule. </p>

<h1>Cerința</h1>

<p>Să se determine câte perechi de indici <code>(i, j)</code>, <code>1 ≤ i &lt; j ≤ n</code>, există cu proprietatea că suma <code>a[i] + a[j]</code> este egală cu o putere a lui <code>2</code>.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi cele <code>n</code> numere naturale nenule, separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran un singur număr natural reprezentând numărul de perechi de indici distincți <code>(i, j)</code> cu proprietatea că suma <code>a[i] + a[j]</code> este egală cu o putere a lui <code>2</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>2 ≤ n ≤ 100 000</code></li>
	<li><code>1 ≤ a[i] ≤ 1 000 000 000</code>, pentru orice <code>i = 1..n</code></li>
	<li>Numerele care sunt puteri ale lui <code>2</code> sunt <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, …</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595361721&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2239%2Fpow2&amp;flash=0&amp;wgl=1&amp;dt=1595361721649&amp;bpp=7&amp;bdt=226&amp;idt=150&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=1704230530973&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361722&amp;ga_hid=547909531&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066393&amp;oid=3&amp;pvsid=2696890879255029&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F661%2Ftriunghiuri1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=N2mc0pxyZZ&amp;p=https%3A//www.pbinfo.ro&amp;dtd=156" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CNDD3MWR3-oCFe7Fuwgda9sOHQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">4
3 5 3 13</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">4</pre>

<h3>Explicație</h3>

<p>Cele patru perechi de indici sunt: <code>(1,2)</code>, <code>(1,4)</code>, <code>(2,3)</code>, <code>(3,4)</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <algorithm>
using namespace std;

unsigned int v[32];
unsigned int a[100001];

int BS(unsigned int val, int start, int end)
{
    int l = start, r = end, m;
    int poz = -1;
    while (l <= r)
    {
        m = (l + r) / 2;
        if (a[m]==val)
        {
            poz = m;
            break;
        }
        if (a[m] < val)
        {
            l = m + 1;
        }
        else
            r = m - 1;
    }
    return poz;
}


int main ()
{   
    ios::sync_with_stdio(false);
    int i=0;
    v[0]=1;
    for (i = 1; i <= 31; ++i)
        v[i]=v[i-1]*2;

    int n;
    cin >> n;
    int cnt=0;
    int *item;
    
    for (i = 0 ; i < n ; ++i)
    {
        cin >> a[i];
    }
    sort(a, a+n);
    for (i = 0 ; i < n-1 ; ++i)
    {
        for (int j = 31; j > 0 ; --j)
        {
            if (v[j] <= a[i])
               break;
            unsigned int nr = v[j]-a[i];
            if (i <n-1)
            {
                int poz = BS(nr, i+1, n-1);
                if ( poz != -1 )
                {
                    cnt++;
                    int k = poz-1;
                    while (k > i)
                    {
                        if (a[k] == a[poz])
                            cnt++;
                        if (a[k] < a[poz])
                            break;
                        k--;
                    }
                    k = poz +1;
                    while (k < n)
                    {
                        if (a[k] == a[poz])
                            cnt++;
                        if (a[k] > a[poz])
                            break;
                        k++;
                    }
                }
            }
            
        }
        
    }
    
    cout << cnt;
    return 0;
}</pre>
