<p>Se consideră un şir de cuvinte separate două câte două printr-un spaţiu. Fiecare cuvânt este caracterizat prin numărul de ordine care reprezintă poziţia lui în şirul de cuvinte (primul cuvânt are numărul de ordine <code>1</code>). Unui cuvânt i se pot aplica în mod repetat următoarele transformări: primul caracter al cuvântului (cel mai din stânga) se şterge de acolo şi se adaugă după ultimul caracter din cuvânt. Astfel, dintr-un cuvânt <code>s</code> cu <code>k</code> caractere se pot obţine alte <code>k-1</code> cuvinte pe care le numim cuvinte obţinute din transformarea cuvântului <code>s</code>. De exemplu, dintr-un cuvânt format din <code>4</code> caractere <code>c1c2c3c4</code>, cuvintele obţinute prin transformarea lui sunt: <code>c2c3c4c1</code>, <code>c3c4c1c2</code>, <code>c4c1c2c3</code>.</p>

<p>Se caută în şirul de cuvinte prima pereche de cuvinte vecine <code>(a,b)</code>, în care al doilea cuvânt din pereche <code>(cuvântul b)</code> este identic cu un cuvânt obţinut din transformarea lui <code>a</code>. Dacă există o astfel de pereche, se şterge cuvântul <code>b</code> din şir. Prin ştergerea cuvântului <code>b</code> din şir, acesta va avea mai puţin cu un cuvânt! Se repetă operaţia de căutare de mai sus până când în şirul rămas nu mai există o pereche <code>(a,b)</code> de cuvinte vecine, astfel încât <code>b</code> să fie obţinut prin transformarea lui <code>a</code>.</p>

<p>Se ştie că pe parcursul modificărilor, cuvintele nu-şi schimbă numerele de ordine pe care le-au avut iniţial.</p>

<h1>Cerinţă:</h1>

<p>Scrieţi un program care să citească şirul de cuvinte şi să afişeze:</p>

<p>a) numărul de ordine al primului cuvânt şters sau valoarea <code>0</code> în cazul în care nu se şterge niciun cuvânt<br>
b) numerele de ordine ale cuvintelor rămase după finalizarea operaţiilor de modificare. </p>


<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>cuvinte4.in</code> conține o singură linie pe care se află şirul de cuvinte separate două câte două printr-un spaţiu.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>cuvinte4.out</code> va conține:</p>

<ul>
	<li>pe prima linie numărul de ordine al primului cuvânt şters sau valoarea <code>0</code> în cazul în care nu se şterge niciun cuvânt</li>
	<li>pe a doua linie numerele de ordine ale cuvintelor rămase în final în şirul de cuvinte, despărţite  două câte două printr-un spaţiu.</li>
</ul>

<h1>Restricții și precizări</h1>

<ul>
	<li>După ultimul cuvânt din şirul iniţial există caracterul <code>!</code></li>
	<li>Fiecare cuvânt are maxim <code>10</code> caractere, iar în şirul iniţial nu există mai mult de <code>25</code> cuvinte.</li>
	<li>Şirul de cuvinte iniţial este format din cel puţin un cuvânt. O pereche de cuvinte vecine <code>(a,b)</code>, din şirul de cuvinte este caracterizată prin faptul că, după cuvântul <code>a</code> se afla imediat cuvântul <code>b</code>.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595356842&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1087%2Fcuvinte4&amp;flash=0&amp;wgl=1&amp;dt=1595356842254&amp;bpp=4&amp;bdt=262&amp;idt=184&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=1338311089138&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356842&amp;ga_hid=2114627776&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1564&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21065756%2C21066358&amp;oid=3&amp;pvsid=1032354783199410&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1077%2Flitere&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=gS0DtkYbhZ&amp;p=https%3A//www.pbinfo.ro&amp;dtd=189" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CJfLjK__3uoCFRRE5Qod7qAFPw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>cuvinte4.in</code></p>

<pre contenteditable="true" editable="true">alfa faal alfa fala lafa afal calfa calfa!</pre>

<p><code>cuvinte4.out</code></p>

<pre contenteditable="true" editable="true">2
1 3 4 7 8</pre>

<h1>Explicație</h1>

<p>Cuvintele obţinute prin transformarea cuvântului <code>alfa</code> sunt: : <code>lfaa</code>, <code>faal</code>, <code>aalf</code>.  Prima pereche de cuvinte vecine care îndeplinesc cerinţele sunt cuvintele cu numerele de ordine <code>1</code> şi <code>2</code>. Va fi şters cuvântul cu numărul de ordine <code>2</code>. Şirul rezultat este format din următoarele <code>7</code> cuvinte: <code>alfa alfa fala lafa afal calfa calfa</code>. Prima pereche care îndeplineşte cerinţele din noul şir este perechea formată din cuvintele <code>fala</code> şi <code>lafa</code>, având numerele de ordine <code>4</code> şi <code>5</code>,  pentru că lista de cuvinte obţinute prin transformarea cuvântului <code>fala</code> sunt: <code>alaf</code>, <code>lafa</code>, <code>afal</code>. Se va şterge cuvântul cu numărul de ordine <code>5</code>. Şirul rezultat după ştergere este: <code>alfa alfa fala afal calfa calfa</code>. Prima pereche care îndeplineşte cerinţele problemei în noul şir este <code>fala</code> şi <code>afal</code>. Se şterge <code>afal</code> cu numărul de ordine <code>6</code>. Şirul rezultat după ştergere este: <code>alfa alfa fala calfa calfa</code>. În acest şir nu se mai găseşte nicio pereche care să îndeplinească cerinţele. Au rămas deci cuvintele: <code>alfa</code>, <code>alfa</code>, <code>fala</code>, <code>calfa</code>, <code>calfa</code>  care au numerele de ordine <code>1</code>, <code>3</code>, <code>4</code>, <code>7</code>, <code>8</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("cuvinte4.in");
ofstream cout("cuvinte4.out");

char mat[26][11];

bool perm(char a[] , char b[])
{
    char x[11];
    strcpy(x , a);
    int n = strlen(x);
    for(int i = 0 ; i < n - 1 ; ++i)
    {
        char aux = x[0];
        for(int j = 0 ; j < strlen(x) - 1 ; ++j)
            x[j]=x[j+1];
        x[strlen(x) - 1]=aux;
        if(strcmp(x , b) == 0)
            return 1;
    }
    return 0;
}

int main()
{
    int n = 0;
    int vec[26];
    while(cin >> mat[n])
        vec[n] = n + 1 , n++;
    int d = strlen(mat[n-1]);
    mat[n-1][d-1]='\0';
    int poz = 0;
    for(int i = 0 ; i < n - 1 ; ++i)
    {
        if(perm(mat[i] , mat[i+1]))
        {
            if(poz==0) poz = i+1;
            for(int j = i + 1 ; j < n - 1 ; ++j)
            {
                strcpy(mat[j] , mat[j+1]);
                vec[j]=vec[j+1];
            }
            i--;
            n--;
        }
    }
    if(poz)
    cout << poz + 1 << endl;
    else
        cout << 0 << endl;
    for(int i = 0 ; i < n ; ++i)
        cout << vec[i] << ' ';
    return 0;
}</pre>
