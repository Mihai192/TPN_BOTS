<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
using namespace std;

ifstream cin("conexidad.in");
ofstream cout("conexidad.out");

struct muchie
{
    int i , j;
}M[101];

vector <int> G[101];
int n , m , C[101] , nc , P[101] , maxip , V[101];

void dfs(int v , int c)
{
    C[v] = c;
    for(int i :G[v])
        if(!C[i]) dfs(i , c);
}

void dfculoare(int v , int c1 , int c2)
{
    C[v] = c2;
    for(int i :G[v])
        if(C[i] == c1) dfculoare(i , c1 , c2);
}

int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= m ; i++)
    {
        int x , y;
        cin >> x >> y;
        G[x].push_back(y);
        G[y].push_back(x);
        V[x]++;
        V[y]++;
    }
    for(int i = 1 ; i <= n ; i++)
    {
        if(!C[i])
        {
            nc++;
            dfs(i , nc);
        }
    }

    for(int k = 1 ; k < nc ; k++)
    {
        int x = 0 , y = 0 , mini = 999999;
        for(int i = 1 ; i < n ; i++)
            for(int j = i + 1 ; j <= n ; j++)
                if(C[i] != C[j] &amp;&amp; P[i] == 0 &amp;&amp; P[j] == 0 &amp;&amp; V[i] != 0 &amp;&amp; V[j] != 0)
                {
                    x = i;
                    y = j;
                    i = n + 1 , j = n + 1;
                }
            if(x == 0)
            {
                for(int i = 1 ; i < n ; i++)
                    for(int j = i + 1 ; j <= n ; j++)
                        if(C[i] != C[j] &amp;&amp; (P[i] < mini || P[j] < mini) &amp;&amp; (V[i] != 0 || V[j] != 0))
                        {
                            mini = max(P[i] , P[j]);
                            x = i;
                            y = j;
                        }
            }

            if(x == 0)
            {
                for(int i = 1 ; i < n ; i++)
                    for(int j = i + 1 ; j <= n ; j++)
                        if(C[i] != C[j] &amp;&amp; (P[i] < mini || P[j] < mini))
                        {
                            mini = max(P[i] , P[j]);
                            x = i;
                            y = j;
                        }
            }
            P[x]++;
            P[y]++;
            M[k] = {x , y};
            G[x].push_back(y);
            G[y].push_back(x);
            dfculoare(y , C[y] , C[x]);
    }
    for(int i = 1 ; i <= n ; i++)
        if(P[i] > maxip) maxip = P[i];

    cout << maxip << '\n' << nc - 1 << '\n';
    for(int i = 1 ; i < nc ; i++)
        cout << M[i].i << " " << M[i].j << '\n';
}</pre>
