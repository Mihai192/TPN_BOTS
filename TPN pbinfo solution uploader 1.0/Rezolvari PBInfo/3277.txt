<p>Se consideră o matrice cu <code>N</code> linii și <code>N</code> coloane, numerotate de la <code>1</code> la <code>N</code>, care memorează doar valori <code>0</code> și <code>1</code>. Se dau de asemenea coordonatele a trei componente din această matrice.</p>

<h1>Cerința</h1>

<p>Să se determine lungimea minimă a unui drum care pleacă din poziția <code>(1,1)</code>, trece obligatoriu prin cele trei componente date (nu contează în ce ordine) și apoi ajunge în poziția <code>(N, N)</code>, drum care trece doar prin componente marcate cu <code>0</code> și învecinate pe linii și coloane. Un pas din drum constă din deplasarea dintr-un punct <code>(i,j)</code> într-unul din cele patru învecinate pe linie și coloană, adică într-unul din punctele <code>(i-1,j)</code>, <code>(i,j-1)</code>, <code>(i+1, j)</code>, <code>(i,j+1)</code>.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>N</code>. Pe fiecare din următoarele <code>N</code> linii și <code>N</code> coloane este descrisă matricea binară. Pe ultimele trei linii sunt câte două numere naturale de forma <code>x y</code> ce descriu coordonatele în matrice (linie și coloană) ale celor trei puncte.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran un singur număr natural, care reprezintă lungimea minimă a drumului care pornește din <code>(1, 1)</code>, trece prin cele trei puncte date și ajunge în punctul <code>(N, N)</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>3 ≤ N ≤ 100</code></li>
	<li>Cele trei puncte sunt distincte, diferite de pozițiile <code>(1,1)</code> și <code>(N,N)</code> și se găsesc la poziții din matrice marcate cu <code>0</code>. De asemenea, la pozițiile <code>(1,1)</code> și <code>(N,N)</code> se găsește mereu valoarea <code>0</code>.</li>
	<li>Pentru datele de intrare va exista mereu soluție, adică există cel puțin un drum de la <code>(1,1)</code> la <code>(N,N)</code>.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356604&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3277%2Flee&amp;flash=0&amp;wgl=1&amp;dt=1595356603951&amp;bpp=4&amp;bdt=518&amp;idt=178&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=5806357419802&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356604&amp;ga_hid=407077124&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=22&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1198&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066004%2C21066717&amp;oid=3&amp;pvsid=155414294269376&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3368%2Flee2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=dKB6hdeSXN&amp;p=https%3A//www.pbinfo.ro&amp;dtd=183" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CMLPur3-3uoCFVfJsgod9R4FdQ"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">4
0 0 0 0
1 0 1 1
0 0 0 1
1 0 0 0
3 3
1 4
3 1</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">12</pre>

<h3>Explicație</h3>

<p>Cele trei puncte sunt situate în coordonatele <code>(3,3)</code>, <code>(1,4)</code>, <code>(3,1)</code>.<br>
Drumul de lungime minimă este:</p>

<ul>
	<li>de la <code>(1,1)</code> la <code>(1,4)</code> (lungime <code>3</code>)</li>
	<li>de la <code>(1,4)</code> la <code>(3,1)</code> (lungime <code>5</code>)</li>
	<li>de la <code>(3,1)</code> la <code>(3,3)</code> (lungime <code>2</code>)</li>
	<li>de la <code>(3,3)</code> la <code>(4,4)</code> (lungime <code>2</code>)<br>
Lungime totală: <code>3 + 5 + 2 + 2 = 12</code>.</li>
</ul>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

#define MAX 1000001
#define inf 10000000

bool a[101][101];
int d[101][101][8];

int di[] = {1, 0, -1, 0};
int dj[] = {0, 1, 0, -1};
int n;

pair<int, int> puncte[3];

void lee(pair<int, int> source)
{
    queue< pair<int, int> > Q;
    Q.push(source);
    d[1][1][0] = 0;
    pair<int, int> node;
    int ok = 0;
    while (!Q.empty())
    {
        node = Q.front();

        Q.pop();

        ok = 0;
        for (int i = 0; i < 3; ++ i)
            if (node == puncte[i])
                ok = (1 << i);

        for (int dir = 0, inou, jnou; dir < 4; ++ dir)
        {
            inou = node.first + di[dir];
            jnou = node.second + dj[dir];
            if (a[inou][jnou] == 1 || inou < 1 || jnou < 1 || inou > n || jnou > n)continue;

            for (int i = 0; i < 8; ++ i)
                if (d[inou][jnou][i | ok] > d[node.first][node.second][i] + 1)
                {
                    d[inou][jnou][i | ok] = d[node.first][node.second][i] + 1;
                    Q.push({inou, jnou});
                }
        }
    }
}
int main()
{
    cin >> n;
    for (int i = 1; i <= n; ++ i)
        for (int j = 1; j <= n; ++ j)
        {
            cin >> a[i][j];
            for (int k = 0; k < 8; ++ k)
                d[i][j][k] = inf;
        }
    for (int i = 0; i < 3; ++ i)
        cin >> puncte[i].first >> puncte[i].second;
    lee({1, 1});
    cout << d[n][n][7];
    return 0;
}</pre>
