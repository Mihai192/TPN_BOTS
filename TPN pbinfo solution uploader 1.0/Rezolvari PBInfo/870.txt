<h1>Cerința</h1>

<p>Se consideră un depou de cale ferată precum cel din imagine:<br>
<img alt="" height="162" src="/resurse/probleme/851-900/depou.png" width="247"><br>
Pe linia <code>A</code> se află <code>n</code> vagoane, numerotate cu valori distincte de la <code>1</code> la <code>n</code>, într-o ordine oarecare. Vagoanele trebuie mutate pe linia <code>C</code>, în ordinea <code>1 2 .. n</code>. Pentru aceasta se poate muta câte un vagon de pe o linie pe alta, în ordinea indicată de săgeți: </p>

<ul>
	<li><code>A -&gt; B</code>,</li>
	<li><code>A -&gt; C</code></li>
	<li><code>B -&gt; C</code>.</li>
</ul>

<p>Să se determine o succesiune de operații care să mute toate vagoanele de pe linia <code>A</code> pe linia <code>C</code> în ordinea dorită.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere naturale distincte cuprinse între <code>1</code> și <code>n</code>, reprezentând ordinea vagoanelor de pe linia <code>A</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran numărul <code>C</code> de operații efectuate, apoi cele <code>C</code> operații. Fiecare operație va fi afișată pe câte o linie a ecranului, și va consta din două caractere de forma <code>X Y</code>, semnificând faptul că se mută un vagon de pe linia <code>X</code> pe linia <code>Y</code>. Dacă nu este posibilă mutarea vagoanelor de pe linia <code>A</code> pe linia <code>C</code>, numărul de operații afișat va fi <code>0</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356714&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F870%2Fdepou&amp;flash=0&amp;wgl=1&amp;dt=1595356714350&amp;bpp=12&amp;bdt=243&amp;idt=140&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4952733401801&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356714&amp;ga_hid=1186063048&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=43&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1336&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=3406069031519250&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F848%2Fparanteze1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=856nZegTvp&amp;p=https%3A//www.pbinfo.ro&amp;dtd=150" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CP-kivL-3uoCFeDKuwgdVR0KPA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">4
2 1 3 4</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">6
A B
A B
A C
A C
B C
B C</pre>

<h1>Explicație</h1>

<p>Ordinea inițială a vagoanelor este următoarea:<br>
<img alt="" height="186" src="/resurse/probleme/851-900/depou-1.png" width="247"></p>

<p>După mutarea vagoanele vor fi în ordinea:<br>
<img alt="" height="185" src="/resurse/probleme/851-900/depou-2.png" width="247"></p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <stack>
using namespace std;

stack<int> a , b;

int main()
{
    int n;
    cin >> n;
    for(int i = 1 ; i <= n ; ++i)
    {
        int x;
        cin >> x;
        a.push(x);
    }
    int cnt = 1;
    int rez[10001] , p=1;
    while(!a.empty() || !b.empty())
    {
        if(!b.empty() &amp;&amp; b.top()==cnt)
            b.pop() , cnt++ , rez[p]=2 , rez[p+1]=3 , p+=2;
        else
        {
            while(!a.empty() &amp;&amp; a.top()!=cnt)
            {
                if(!b.empty() &amp;&amp; a.top()>= b.top())
                    break;
                b.push(a.top()) , a.pop();
                rez[p]=1 , rez[p+1]=2 , p+=2;
            }
            if(a.top()!=cnt)
                break;
            else
                rez[p]=1 , rez[p+1]=3 , p+=2 , a.pop() , cnt++;
        }
    }
    if(cnt < n)
        cout << 0;
    else
    {
        cout << (p-1)/2 << endl;
        for(int i = 1 ; i < p ; ++i)
        {
            if(rez[i]==1)
                cout << "A ";
            if(rez[i]==2)
                cout << "B ";
            if(rez[i]==3)
                cout << "C ";
            if(i % 2 == 0)
                cout << '\n';
        }
    }
    return 0;
}</pre>
