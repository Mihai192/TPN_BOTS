<h1>Cerința</h1>

<p>Se dau <code>n</code>, reprezentând numărul de elevi apoi, pe câte un rând, datele fiecărui elev: codul (număr natural de maxim <code>4</code> cifre), media la informatică (număr natural de la <code>1</code> la <code>10</code>) și numărul de absențe. Definiți un tip structură pentru a putea memora datele unui elev și rezolvați cerințele:</p>

<p>a) memorați datele tuturor elevilor într-un vector de structuri de tipul definit;<br>
b) afișați numărul de elevi cu media <code>10</code><br>
c) afișați media clasei (se va afișa doar partea întreagă a ei).<br>
d) afișați primii doi elevi după absențe (elevii cu cele mai multe absențe). Dacă sunt mai mulți elevi cu același număr de absențe se afișează în ordine crescătoare a codului. Dacă sunt mai mult de doi elevi număr maxim de absențe se afișează doar doi.</p>

<h1>Date de intrare</h1>

<p>Programul citește datele din fișierul <code>qclasa.in</code> astfel: pe primul rând <code>n</code> reprezentând numărul de elevi, iar apoi <code>n</code> rânduri cu câte trei numere naturale fiecare, separate prin câte un spațiu, reprezentând respectiv: codul, media și numărul de absențe pentru câte un elev.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa în fișierul <code>qclasa.out</code> patru linii, astfel: pe prima valoarea de la cerința b), pe a doua valoarea de la cerința c) pe a treia și pe a patra toate datele pentru fiecare dintre elevii obținuți la cerința d). Datele aceluiași elev se afișează în ordinea în care acestea se citesc din fișierul de intrare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 40</code></li>
	<li>codurile elevilor se garantează că sunt distincte</li>
	<li>mediile sunt numere naturale de la <code>1</code> la <code>10</code></li>
	<li>valorile pentru numărul de absențe sunt cuprinse între <code>0</code> și <code>100</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356783&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3164%2Fqclasa&amp;flash=0&amp;wgl=1&amp;dt=1595356782937&amp;bpp=51&amp;bdt=358&amp;idt=202&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4046337617538&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356783&amp;ga_hid=2019914051&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1252&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066523&amp;oid=3&amp;pvsid=1630293235523141&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3187%2Fratc2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=UxRXG9i4XJ&amp;p=https%3A//www.pbinfo.ro&amp;dtd=208" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CMmK6ZL_3uoCFVXFuwgd9oAFRg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>qclasa.in</strong></p>

<pre contenteditable="true" editable="true">3
1 10 3
2 8 1
3 8 5</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">1
8
3 8 5
1 10 3</pre>

<h3>Explicație</h3>

<p>Este un singur elev cu media <code>10</code>. Media clasei este <code>8.6666</code> dar noi afișăm doar partea întreagă a ei. Elevul cu codul <code>3</code> are cele mai multe absențe și îl urmează cel cu codul <code>1</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin("qclasa.in");
ofstream cout("qclasa.out");

int n , cnt , cc;

struct elev
{
    int medie, cod, abs;
}a[50];

bool comp(elev a, elev b)
{
    if(a.abs > b.abs) return 1;
    else if(a.abs == b.abs &amp;&amp; a.cod < b.cod) return 1;
    else return 0;
}
int main()
{
    cin >> n;
    for(int i = 1; i <= n; ++i)
    {
        cin >> a[i].cod >> a[i].medie >> a[i].abs;
        if(a[i].medie == 10) cnt++;
        cc += a[i].medie;
    }
    cout << cnt << '\n' << cc / n << '\n';
    sort(a + 1, a + n + 1, comp);
    for(int i = 1; i <= 2; ++i)
        cout << a[i].cod << ' ' << a[i].medie << ' ' << a[i].abs << "\n";
    return 0;
}</pre>
