<p>Pentru a converti un număr  din zecimal în binar îl vom împărți la <code>2</code> în mod repetat, până ce obținem câtul zero. Apoi vom colecta resturile obținute de la ultimul către primul. Aceste resturi sunt cifrele din reprezentarea binară a numărului dat, de la stânga la dreapta. De exemplu, <code>13</code><sub><code>(10)</code></sub> <code>= 1101</code><sub><code>(2)</code></sub>.</p>

<h1>Cerința</h1>

<p>Scrieți un program care,  pentru un șir dat de n numere naturale, rezolvă următoarele cerințe:<br>
1) Determină cel mai mare dintre cele <code>n</code> numere date ce are număr maxim de valori de <code>1</code> în reprezentarea binară.<br>
2) Determină cea mai lungă secvență de numere care au număr egal de valori de <code>1</code> în reprezentarea binară. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va alege cea mai din stânga. O secvență este un subșir de numere care apar pe poziții consecutive în șirul inițial.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>binar.in</code> conţine pe prima linie numărul C reprezentând cerința (<code>1</code> sau <code>2</code>), pe a doua linie numărul natural <code>n</code>, iar pe a treia linie <code>n</code> numere naturale separate prin câte un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Dacă <code>C = 1</code>, atunci pe prima linie a fișierului de ieșire <code>binar.out</code> se va scrie numărul ce reprezintă răspunsul la cerința <code>1</code>. Dacă <code>C = 2</code>, atunci pe prima linie a fișierului de ieșire <code>binar.out</code> se vor scrie, separate printr-un spațiu, lungimea maximă a secvenței determinate și poziția primului termen din secvență (se consideră că primul număr din cele <code>n</code> numere date se găsește pe poziția <code>1</code>).</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1.000.000</code></li>
	<li>Valorile din șirul de intrare sunt numere naturale de cel mult nouă cifre.</li>
	<li>Pentru <code>30%</code> din teste cerința va fi <code>C = 1</code>.</li>
	<li>În concurs s-au acordat <code>10</code> puncte din oficiu. Aici se acordă pentru testele din enunț.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>binar.in</code></p>

<pre contenteditable="true" editable="true">1
7
16 12 3 5 14 13 11</pre>

<p><code>binar.out</code></p>

<pre contenteditable="true" editable="true">14</pre>

<h3>Explicație</h3>

<p><code>16</code><sub><code>(10)</code></sub> <code>= 10000</code><sub><code>(2)</code></sub>;  <code>12</code><sub><code>(10)</code></sub> <code>= 1100</code><sub><code>(2)</code></sub>; <br>
<code>3</code><sub><code>(10)</code></sub> <code>= 11</code><sub><code>(2)</code></sub>; <code>5</code><sub><code>(10)</code></sub> <code>= 101</code><sub><code>(2)</code></sub>; <code>14</code><sub><code>(10)</code></sub> <code>= 1110</code><sub><code>(2)</code></sub>; <code>13</code><sub><code>(10)</code></sub> <code>= 1101</code><sub><code>(2)</code></sub>; <code>11</code><sub><code>(10)</code></sub> <code>= 1011</code><sub><code>(2)</code></sub>;<br>
Cel mai mare număr de valori de <code>1</code> dintr-o reprezentare binară este <code>3</code>; cel mai mare număr ce are <code>3</code> de <code>1</code> în reprezentarea binară este <code>14</code>.</p>

<h1>Exemplul 2:</h1>

<p><code>binar.in</code></p>

<pre contenteditable="true" editable="true">2
7
16 12 3 5 14 13 11</pre>

<p><code>binar.out</code></p>

<pre contenteditable="true" editable="true">3 2</pre>

<h3>Explicație</h3>

<p>Sunt două secvențe de lungime maximă de numere care au număr egal de valori de <code>1</code> în reprezentarea binară: <code>12 3 5</code> și <code>14 13 11</code>. O vom alege pe cea mai din stânga, care are lungimea <code>3</code> și începe la poziția <code>2</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("binar.in");
ofstream cout("binar.out");

int n , a[1000001] , b[1000001];

int binar(int x)
{
    int cnt = 0;
    while(x)
    {
        if(x%2)
            cnt++;
        x/=2;
    }
    return cnt;
}

int main()
{
    int t;
    cin >> t >> n;
    for(int i = 1 ; i <= n ; ++i)
    {
        cin >> a[i];
        b[i]=binar(a[i]);
    }
    int max=0 , max1 = 0;
    for(int i = 1 ; i <= n ; ++i)
        if(b[i] > max)
            max = b[i];
    for(int i = 1 ; i <= n ; ++i)
        if(b[i]==max &amp;&amp; a[i] > max1)
            max1=a[i];
    if(t==1)
        cout << max1;
    else
    {
        int l = 1 , lmax = 1 , start = 1;
        for(int i = 2 ; i <= n ; ++i)
        {
            if(b[i]==b[i-1])
            {
                l++;
                if(l > lmax)
                    lmax = l , start=i-lmax+1;
            }
            else
                l=1;
        }
        cout << lmax << ' ' << start;
    }
    return 0;
}</pre>
