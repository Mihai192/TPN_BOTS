<h1>Cerința</h1>

<p>Se dă un tablou cu <code>n</code> elemente, numere naturale. Să se afișeze numerele prime din șir, în ordinea în care apar în șir.</p>

<p>Se va defini și apela subprogramul <code>prim</code>, care verifică dacă un număr natural transmis ca parametru este prim.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>prime.in</code> conține pe prima linie numărul <code>n</code>, iar iar pe a doua linie cele <code>n</code> elemente ale tabloului.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de intrare <code>prime.out</code> va conține pe prima linie elementele cerute, separate prin exact un spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>elementele tabloului vor fi mai mici decât <code>1 000 000 000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595358220&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F988%2Fprime&amp;flash=0&amp;wgl=1&amp;dt=1595358220028&amp;bpp=6&amp;bdt=225&amp;idt=138&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=5589848365932&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595358220&amp;ga_hid=1710804075&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1054&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066612%2C21066715&amp;oid=3&amp;pvsid=311752365784151&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F994%2Ffiboverif1&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=tHJlvy00Dt&amp;p=https%3A//www.pbinfo.ro&amp;dtd=144" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CJ_whsCE3-oCFRmIsgod5z4IOw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>prime.in</code></p>

<pre contenteditable="true" editable="true">5
12 2 123 41 77</pre>

<p><code>prime.out</code></p>

<pre contenteditable="true" editable="true">2 41</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream fin("prime.in");
ofstream fout("prime.out");

int prim(int n)
{
    int cnt=0;
    for (int i = 1 ; i * i <= n ; ++i)
    {
        if (n%i==0)
        cnt+=2;
        if (i*i==n)
        cnt--;
    }
    if (cnt==2)
    return 1;
    else
    return 0;
}

int main()
{
    int n;
    fin >> n;
    int a[1001];
    for (int i = 0 ; i < n ; ++i)
    {
        fin >> a[i];
        if (prim(a[i]))
            fout << a[i] << ' ';
    }

    fin.close();
    fout.close();

    return 0;
}</pre>
