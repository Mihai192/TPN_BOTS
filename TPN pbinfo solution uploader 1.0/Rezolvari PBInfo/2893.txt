<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

#define inf 1000000000000000001;

ifstream cin("modernizare.in");
ofstream cout("modernizare.out");

long long d[100001];
long long n, mu, f;
vector<vector<pair<long long, long long>>> G(100001);

struct muchie{
    long long i, j, c;
}m[100001];

bool comp(muchie a, muchie b){
    if(min(d[a.i], d[a.j]) != min(d[b.i], d[b.j]))
        return min(d[a.i], d[a.j]) < min(d[b.i], d[b.j]);
    if(max(d[a.i], d[a.j]) != max(d[b.i], d[b.j]))
        return max(d[a.i], d[a.j]) < max(d[b.i], d[b.j]);
    return a.c < b.c;
}

void BFS(){
    d[1] = 0;
    for(int i = 2; i <= n; ++i)
        d[i] = inf;
    queue<int> Q;
    Q.push(1);
    while(!Q.empty()){
        int nod = Q.front();
        for(auto x:G[nod])
            if(d[x.first] > d[nod] + 1)
                d[x.first] = d[nod] + 1, Q.push(x.first);
        Q.pop();
    }
}

int main(){
    cin >> n >> mu >> f;
    for(int i = 1; i <= mu; ++i){
        cin >> m[i].i >> m[i].j >> m[i].c;
        G[m[i].i].push_back(make_pair(m[i].j, m[i].c));
        G[m[i].j].push_back(make_pair(m[i].i, m[i].c));
    }
    BFS();
    sort(m + 1, m + mu + 1, comp);
    int cnt = 0;
    for(int i = 1; i <= mu &amp;&amp; f; ++i){
        if(d[m[i].i] != 1000000000000000001){
            f -= m[i].c;
            if(f >= 0)
                cnt++;
        }
    }
    cout << cnt;
}</pre>
