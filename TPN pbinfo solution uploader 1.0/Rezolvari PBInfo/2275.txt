<h1>Cerința</h1>

<p>Se dau <code>n</code> numere naturale. Determinați cele mai mici două numere dintre cele introduse care au ultimele două cifre egale. Dacă nu există cel puțin două astfel de numere se va afișa <code>numere insuficiente</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>minimdoua.in</code> conține pe prima linie numărul <code>n</code>, iar pe a doua linie <code>n</code> numere naturale separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>minimdoua.out</code> va conține pe prima linie numerele <code>minim1</code> si <code>minim2</code>, reprezentând minimele cerute, în ordine crescătoare, dacă fișierul de intrare conține cel puțin două astfel de numere, respectiv <code>numere insuficiente</code>, în caz contrar.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 200</code></li>
	<li>pentru fiecare număr x de pe a doua linie a fișierului de intrare este îndeplinită relația <code>0 ≤ x ≤ 1.000.000</code></li>
	<li>minimele cerute vor avea cel puțin două cifre</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>minimdoua.in</code></p>

<pre contenteditable="true" editable="true">7
12 55 112 322 477 115 7</pre>

<p><code>minimdoua.out</code></p>

<pre contenteditable="true" editable="true">55 322</pre>

<h1>Exemplul 2:</h1>

<p><code>minimdoua.in</code></p>

<pre contenteditable="true" editable="true">6
12 55 112 3 4774 115 </pre>

<p><code>minimdoua.out</code></p>

<pre contenteditable="true" editable="true">numere insuficiente</pre>

<h3>Explicație</h3>

<p>În fișierul de intrare este doar un singur număr cu proprietatea cerută.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream fin("minimdoua.in");
ofstream fout("minimdoua.out");

int main()
{
    int n, j=0 , cnt=0;
    fin >> n;
    int a[201];
    int v[201];
    for (int i = 0 ; i < n; ++i)
    {
        fin >> a[i];
        if (a[i]%10 == (a[i]/10)%10 &amp;&amp; a[i]>9)
        {
            v[j]=a[i];
            j++;
            cnt++;
        }
    }
    sort(v,v+cnt);
    if (cnt>=2)
    fout << v[0] << ' ' << v[1];
    else
    fout << "numere insuficiente";
    
    fin.close();
    fout.close();
    
    return 0;
}</pre>
