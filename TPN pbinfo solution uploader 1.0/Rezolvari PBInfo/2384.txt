<h1>Cerința</h1>

<p>Un șir de numere aparțin unui <em>divigrup</em> dacă au același număr de divizori. Scrieți un program care citește un număr natural <code>N</code> și apoi <code>N</code> numere naturale nenule și care determină:</p>

<p>a. câte divigrupuri există în șirul de numere citite<br>
b. numărul de numere din fiecare divigrup, urmat de numerele ce aparțin acestuia, în ordine crescătoare.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>divigrup.in</code> conține pe prima linie numărul <code>N</code>, iar pe a doua linie <code>N</code> numere naturale separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>divigrup.out</code> va conține pe prima linie numărul <code>K</code>, reprezentând numărul de divigrupuri ce se pot forma cu numerele de pe a doua linie a fișierului de intrare. <br>
Pe următoarele K rânduri se vor descrie divigrupurile în ordine descrescătoare a numărului de divizori ai elementelor ce le aparțin, astfel încât fiecare rând va avea următoarea structură: <code>M</code> – numărul de elemente ale divigrupului – <code>x</code><sub><code>1</code></sub> <code>x</code><sub><code>2</code></sub> <code>x</code><sub><code>3</code></sub> … <code>x</code><sub><code>M</code></sub> – numerele aparținând divigrupului, în ordine crescătoare. Valorile scrise pe un rând vor fi separate prin câte un spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 200</code></li>
	<li>numerele de pe a doua linie a fișierului de intrare vor fi mai mici decât <code>1000000000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595361880&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2384%2Fdivigrup&amp;flash=0&amp;wgl=1&amp;dt=1595361879935&amp;bpp=4&amp;bdt=211&amp;idt=161&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4698442535641&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361880&amp;ga_hid=1548921332&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1152&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066623%2C21066716&amp;oid=3&amp;pvsid=585309022320217&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F236%2Fsort2&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=Pwp99vguAW&amp;p=https%3A//www.pbinfo.ro&amp;dtd=167" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CKeXm5GS3-oCFUP_sgod7_QMng"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>divigrup.in</code></p>

<pre contenteditable="true" editable="true">11
21 99 15 9 24 100 45 28 44 4 36</pre>

<p><code>divigrup.out</code></p>

<pre contenteditable="true" editable="true">5
2 36 100
1 24
4 28 44 45 99
2 15 21
2 4 9</pre>

<h3>Explicație</h3>

<p>Există <code>5</code> divigrupuri care sunt descrise pe următoarele <code>5</code> rânduri: primul divigrup format din <code>36</code> și <code>100</code>, care au același număr maxim de divizori, următorul divigrup are un singur element, pe <code>24</code> care are <code>8</code> divizori, al treilea divigrup format din <code>28</code>, <code>44</code>, <code>45</code> și <code>99</code> are <code>4</code> elemente, toate având <code>6</code> divizori, șamd.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("divigrup.in");
ofstream cout("divigrup.out");
int f[400];
int nrdiv(int n)
{
    int d = 2 , prod = 1;
    while(n > 1)
    {
        int p = 0;
        while(n % d == 0) p++ , n/=d;
        if(p) prod *= (p+1);
        d++;
        if(d * d > n) d = n;
    }
    return prod;
}
int main()
{
    int n , c = 0 , a[300] , v[300];
    cin >> n;
    for(int i = 0 ; i < n ; ++i)
        cin >> a[i];
    for(int i = 0 ; i < n ; i++)
        for(int j = i + 1 ; j < n ; j++)
            if(a[i] > a[j]) swap(a[i] , a[j]);
    for(int i = 0 ; i < n ; ++i)
    {
        v[i]=nrdiv(a[i]);
        if(f[v[i]]==0) c++;
        f[v[i]]++;
    }
    cout << c << '\n';
    for(int i = 300 ; i >= 1 ; --i)
    {
        int cnt = 0;
        for(int j = 0 ; j < n ; ++j)
            if(v[j]==i) cnt++;
        if(cnt  > 0)
        {
            cout << cnt << ' ';
            for(int j = 0 ; j < n ; ++j)
                if(v[j]==i)
                    cout << a[j] << ' ';
            cout << '\n';
        }
    }
    return 0;
}</pre>
