<h1>Cerința</h1>

<p>Se dă un şir format din <code>n</code> numere naturale nenule. Să se afle numărul secvenţelor din şir care au produsul elementelor egal cu <code>2</code><sup><code>k</code></sup>, unde <code>k</code> este un număr natural dat.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>memory006.in</code> conține pe prima linie numerele <code>n</code> şi <code>k</code>, iar pe a doua linie <code>n</code> numere naturale nenule, separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>memory006.out</code> va conține pe prima linie numărul <code>S</code>, reprezentând numărul secvenţelor din şir care au produsul elementelor egal cu <code>2</code><sup><code>k</code></sup>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 500.000</code></li>
	<li><code>1 ≤ k ≤ 10.000</code></li>
	<li>numerele de pe a doua linie a fișierului de intrare vor fi mai mari decât <code>1</code> şi mai mici decât <code>10</code><sup><code>18</code></sup></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595361553&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1839%2Fmemory006&amp;flash=0&amp;wgl=1&amp;dt=1595361553517&amp;bpp=5&amp;bdt=251&amp;idt=97&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=7066342676969&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361554&amp;ga_hid=1927997613&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=1368680424673866&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1512%2Fmars&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=ytPWAqdymf&amp;p=https%3A//www.pbinfo.ro&amp;dtd=106" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CNrhw_WQ3-oCFZLFuwgdDHcEYA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>memory006.in</code></p>

<pre contenteditable="true" editable="true">5 3
7 4 2 4 5</pre>

<p><code>memory006.out</code></p>

<pre contenteditable="true" editable="true">2</pre>

<h3>Explicație</h3>

<p>Avem <code>n=5,k=3</code>. În şirul dat există două secvenţe care au produsul elementelor egal cu <code>2</code><sup><code>3</code></sup>, şi anume <code>4,2</code> şi <code>2,4</code>. </p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream fin("memory006.in");
ofstream fout("memory006.out");

long long n,k,i,suma,nr,x,st,dr,p[60];
long mij;
char a[10001],t,j;

char exp(long s,long d)
{
    if(s>d) return 0;
    mij=(s+d)/2;
    if(x==p[mij])
        return mij;
    if(x<p[mij])
        return exp(s,mij-1);
    else
        return exp(mij+1,d);
}

int main()
{
    fin >> n >> k;
    p[1]=2;
    for(i=2;i<=57;++i)
        p[i]=p[i-1]*2;
    nr=0;
    suma=0;
    st=0;
    dr=-1 ;
    for(i=0;i<n;++i)
    {
        fin>>x;
        t=exp(1,57);
        if(t==0)
        {
           suma=0;
           st=0;
           dr=-1;
        }
        else
        {
           dr=(dr+1)%10001;
           a[dr]=t ;
           suma=suma+t;
           if(suma>=k)
           {
              if(suma==k)
                ++nr;
              else
              {
                while(suma>k)
              {
                  suma=suma-a[st];
                  st=(st+1)%10001;
              }
              if(suma==k)
                ++nr;
              }
           }
        }
    }
    fout << nr;
    return 0;
}</pre>
