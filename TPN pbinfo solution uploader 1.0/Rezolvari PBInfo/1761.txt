<p>Renumitul nostru brutar a avut azi noapte un vis tare ciudat: acesta trăia într-un univers paralel în care nu omul îl mănâncă pe blat ci blatul îl mănâncă pe om… (eh, poate nu chiar atât de paralel). Astfel, brutarul nostru a fost atacat de blatul pe care tocmai îl pregătise (pentru prăjituri, evident) și a încercat să scape. Acesta a ieșit din brutărie și a ajuns în fața unui câmp de formă dreptunghiulară, cu dimensiunile cunoscute, ce poate fi împărțit în celule elementare cu latura de o unitate (exact ca o matrice!). Acesta poate intra pe câmp prin orice celulă a primei linii și trebuie să ajungă în orice celulă a ultimei linii (blatul se va întări până va ajunge acolo). Unele celule îi sunt inaccesibile din cauza diverselor obstacole (pietre, pomi, gropi,etc.)</p>

<p>Brutarul nostru se poate deplasa în <code>6</code> moduri:</p>

<ul>
	<li>Din căsuța curentă în cele adiacente ( <code>Nord</code>, <code>Vest</code>, <code>Sud</code>, <code>Est</code> )</li>
	<li>Două mișcări speciale ce pot varia.</li>
</ul>

<p>Mutările speciale vor fi citite din fișier și o mutare se va codifica astfel: <code>xA yB</code>, unde <code>x</code> și <code>y</code> sunt numere naturale nenule iar <code>A</code> și <code>B</code> sunt două caractere ce codifică direcția (<code>A</code> poate fi <code>'N'</code> sau <code>'S'</code> de la <code>Nord</code> respectiv <code>Sud</code> iar <code>B</code> poate fi <code>‘E’</code> sau <code>‘V’</code> de la <code>Est</code> respectiv <code>Vest</code>)</p>

<p>Ex. <code>5N 2V</code> codifică mutarea <code>5</code> poziții spre Nord și <code>2</code> poziții spre Vest. (din poziția <code>(x,y)</code> ajunge în poziția <code>(x-5, y-2)</code>)</p>

<p>O mutare specială se poate face dacă celula destinație nu este ocupată de un obstacol și dacă nu implică ieșirea brutarului din matrice.</p>

<h1>Cerința</h1>

<p>Brutarul vă roagă să îi specificați un traseu cu număr minim de celule parcurse, ce pornește de pe prima linie și se termină pe ultima linie, pentru a nu fi blătuit (mâncat de blat).</p>

<h1>Date de intrare</h1>

<p>Pe prima linie a fișierului <code>brutar.in</code> se vor afla două numere naturale separate prin spațiu: <code>N</code> și <code>M</code> reprezentând numărul de linii și numărul de coloane ale câmpului. Urmează <code>N</code> linii a câte <code>M</code> caractere <code>‘X’</code> și <code>‘O’</code> unde <code>‘X'</code> reprezintă obstacol iar <code>‘O’</code> reprezintă zonă liberă.</p>

<p>Ultimele două linii reprezintă codificarea celor două mutări speciale, câte o mutare pe o linie.</p>

<h1>Date de ieșire</h1>

<p>Fișierul <code>brutar.out</code> va conține, pe prima linie, numărul <code>T</code> de celule al unui traseu de lungime minimă. Următoarele <code>T</code> linii vor conține descrierea traseului, câte o celulă pe o linie, prin coordonatele ei, în ordinea în care au fost parcurse.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N, M ≤ 1.000</code></li>
	<li><code>1 ≤ x ≤ N</code></li>
	<li><code>1 ≤ y ≤ M</code></li>
	<li>Se garantează că mereu va există cel puțin un drum care pornește de pe prima linie și ajunge pe ultima linie a matricei.</li>
	<li>Dacă există mai multe soluții cu număr minim de pași, se poate afișa oricare dintre acestea.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595353640&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1761%2Fbrutar&amp;flash=0&amp;wgl=1&amp;dt=1595353640215&amp;bpp=4&amp;bdt=240&amp;idt=167&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=3946470406170&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353640&amp;ga_hid=597378656&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1638&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;eid=21066717%2C44717729&amp;oid=3&amp;pvsid=586692498542619&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1998%2Frover&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=gzWdYLRKsV&amp;p=https%3A//www.pbinfo.ro&amp;dtd=176" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPHGn7jz3uoCFVDgsgodZHoCOg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>brutar.in</code></p>

<pre contenteditable="true" editable="true">14 10
XXXXXXOXXX
OXOOOXOOOO
OOXXOOXOXO
OXOOOOXXXX
OOOOXXOXOX
OXOXOXXOOO
XOXOOOOXOO
OXXXOXOOOX
XOOXOXOXOO
OXOXOXOXOO
OOOOXXOOXO
XOOOXOXOOX
OXOOOOOOOO
XOXXXOXXXX
2S 1V
2S 1E</pre>

<p><code>brutar.out</code></p>

<pre contenteditable="true" editable="true">9
1 7
3 6
5 7
7 6
9 5
10 5
12 4
12 3
14 2</pre>

<h3>Explicație</h3>

<p>Drumul este colorat în galben:</p>

<p><img alt="" src="https://www.pbinfo.ro/resurse/36311c/asedas.png"></p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("brutar.in");
ofstream cout("brutar.out");

int n , m , x , y;
bool a[1001][1001];
int b[1001][1001];
struct poz
{
    int i , j;
};
 poz P[10001] , D[1000001];
queue <poz> Q;

int di[6] = { 0 , 0 , 1 , -1};
int dj[6] = {-1 , 1 , 0 ,  0};

bool inside(int i , int j)
{
    return i >= 1 &amp;&amp; j >= 1 &amp;&amp; i <= n &amp;&amp; j <= m;
}

void lee()
{
    while(!Q.empty())
    {
        poz r;
        r = Q.front();
        for(int i = 0 ; i < 6 ; i++)
        {
            int inou = r.i + di[i];
            int jnou = r.j + dj[i];
            if(inside(inou , jnou) &amp;&amp; b[inou][jnou] == 0 &amp;&amp; a[inou][jnou] == 1)
            {
                b[inou][jnou] = b[r.i][r.j] + 1;
                Q.push({inou , jnou});
            }
        }
        Q.pop();
    }
}

int main()
{
    cin >> n >> m;
    char s;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
        {
            cin >> s;
            if(s == 'O') a[i][j] = 1;
            else if(s == 'X') a[i][j] = 0;
        }
     cin >> x >> s;
     if(s == 'N') di[4] = -x;
     else if(s == 'S') di[4] = x;
     cin >> x >> s;
     if(s == 'E') dj[4] = x;
     else dj[4] = -x;
     cin >> x >> s;
     if(s == 'N') di[5] = -x;
     else if(s == 'S') di[5] = x;
     cin >> x >> s;
     if(s == 'E') dj[5] = x;
     else dj[5] = -x;
     for(int i = 1 ; i <= m ; i++)
        if(a[1][i] == 1) {Q.push({1 , i});b[1][i] = 1;}
    lee();
    /*for(int i = 1 ; i <= n ; i++)
    {
        for(int j = 1 ; j <= m ; j++)
            cout << b[i][j] << " ";
        cout << '\n';
    }*/
    int mini = 1000000 , pmin = 0;
    for(int i = 1 ; i <= m ; i++)
        if(b[n][i] > 0 &amp;&amp; b[n][i] < mini)
        {
            mini = b[n][i];
            pmin = i;
        }
    int i = n , j = pmin , k = mini;
    cout << mini << '\n';
    D[k].i = n , D[k].j = j;
    di[4] = -di[4];
     dj[4] = -dj[4];
     di[5] = -di[5];
     dj[5] = -dj[5];
    while(i != 1)
    {
        for(int d = 0 ; d < 6 ; d++)
        {
            int inou = i + di[d];
            int jnou = j + dj[d];
            if(inside(inou , jnou) &amp;&amp; b[inou][jnou] == b[i][j] - 1)
            {
                i = inou;
                j = jnou;
                D[--k] = {i , j};
                break;
            }
        }
    }
    for(int i = 1 ; i <= mini ; i++)
        cout << D[i].i << " " << D[i].j << '\n';
}</pre>
