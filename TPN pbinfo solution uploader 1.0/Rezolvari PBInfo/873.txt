<h1>Cerința</h1>

<p>Se dau dau două vase cu capacitatea <code>A</code>, respectiv <code>B</code> litri, iniţial goale. Se cere să se măsoare cu ajutorul lor <code>C</code> litri de apă, având la dispoziţie următoarele operaţii:</p>

<ul>
	<li>umplerea completă a unui vas (de la robinet). Operaţia se notează <code>R X</code>, unde <code>X</code> poate fi <code>A</code> sau <code>B</code>.</li>
	<li>golirea completă a unui vas (în chiuvetă). Operaţia se notează <code>X C</code> , unde <code>X</code> poate fi <code>A</code> sau <code>B</code>.</li>
	<li>mutarea dintr-un vas în celălalt. Mutarea din vasul <code>X</code> în vasul <code>Y</code> se încheie când se goleşte vasul <code>X</code> sau când se umple vasul <code>Y</code>. Operaţia se notează <code>X Y</code>, unde <code>X</code> şi <code>Y</code> sunt diferite şi pot fi <code>A</code> sau <code>B</code>.</li>
</ul>

<p>Să se determine o secvenţă de operaţii în urma cărora unul dintre vase să conţină <code>C</code> litri de apă.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numerele  <code>A B C</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran numărul minim de operaţii <code>n</code>, apoi cele <code>n</code> operaţii, fiecare pe o linie. Operaţiile pot fi: <code>R A, R B, A C, B C, A B, B A</code>, cu semnificaţia de mai sus.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ A , B , C ≤ 1000</code></li>
	<li>se garantează că pentru toate datele de test există soluţie</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356558&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F873%2Fvase&amp;flash=0&amp;wgl=1&amp;dt=1595356558334&amp;bpp=10&amp;bdt=543&amp;idt=178&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5374573432327&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356558&amp;ga_hid=1221300285&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=14&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1152&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066392%2C21066429&amp;oid=3&amp;pvsid=1993149463653217&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1238%2Flabirint&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=mO5vC3N9W4&amp;p=https%3A//www.pbinfo.ro&amp;dtd=186" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="COL12af-3uoCFTrAuwgdL4ELCg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5 8 2</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">4
R A
A B
R A
A B</pre>

<h1>Explicaţie</h1>

<p>Vasul <code>A</code> are capacitatea de <code>5</code> litri, iar vasul <code>B</code> are capacitatea de <code>8</code> litri. Se cere să se măsoare <code>2</code> litri de apă.</p>

<p>Cele <code>4</code> operaţii sunt:</p>

<ul>
	<li><code>R A</code> – se umple vasul <code>A</code>. <code>A</code> conţine <code>5</code> litri, <code>B</code> conţine <code>0</code> litri</li>
	<li><code>A B</code> – se mută apă din vasul <code>A</code> în <code>B</code>. Se va muta toată apa din <code>A</code>. <code>A</code> conţine <code>0</code> litri, <code>B</code> conţine <code>5</code> litri</li>
	<li><code>R A</code> – se umple vasul <code>A</code>. <code>A</code> conţine <code>5</code> litri, <code>B</code> conţine <code>5</code> litri</li>
	<li><code>A B</code> – se mută apă din vasul <code>A</code> în <code>B</code>. Se vor muta <code>3</code> litri de apă din <code>A</code>. <code>A</code> conţine <code>2</code> litri, <code>B</code> conţine <code>8</code> litri</li>
	<li>vasul <code>A</code> conţine <code>2</code> litri</li>
</ul>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>

using namespace std;

int a, b, c, ic = -1, sc = 0, i, v[1000000], difa, difb, lg, f[1000000];
bool gasit;

struct elem
{
    int va, vb, dad, op;
};
elem C[1000000], now;

int main()
{
    cin >> a >> b >> c;
    ic++;
    while (ic <= sc)
    {
        now = C[ic];
        ic++;
        if (!f[1000 * a + now.vb])
        {
            sc++;
            C[sc].va = a;
            C[sc].vb = now.vb;
            C[sc].dad = ic - 1;
            C[sc].op = 1;
            f[1000 * a + now.vb] = 1;
        }
        if (C[sc].va == c || C[sc].vb == c)
            break;
        if (!f[1000 * now.va + b])
        {
            sc++;
            C[sc].va = now.va;
            C[sc].vb = b;
            C[sc].dad = ic - 1;
            C[sc].op = 2;
            f[1000 * now.va + b] = 1;
        }
        if (C[sc].va == c || C[sc].vb == c)
            break;
        if (!f[now.vb])
        {
            sc++;
            C[sc].va = 0;
            C[sc].vb = now.vb;
            C[sc].dad = ic - 1;
            C[sc].op = 3;
            sc++;
            f[now.vb] = 1;
        }
        if (!f[1000 * now.va])
        {
            sc++;
            C[sc].va = now.va;
            C[sc].vb = 0;
            C[sc].dad = ic - 1;
            C[sc].op = 4;
            f[1000 * now.va] = 1;
        }
        if (C[sc].va == c || C[sc].vb == c)
            break;
        if (now.va > b - now.vb)
        {
            difa = now.va - b + now.vb;
            difb = b;
        }
        else
        {
            difa = 0;
            difb = now.vb + now.va;
        }
        if (!f[1000 * difa + difb])
        {
            sc++;
            C[sc].va = difa;
            C[sc].vb = difb;
            C[sc].dad = ic - 1;
            C[sc].op = 5;
            f[1000 * difa + difb] = 1;
        }
        if (C[sc].va == c || C[sc].vb == c)
            break;
        if (now.vb > a - now.va)
        {
            difb = now.vb - a + now.va;
            difa = a;
        }
        else
        {
            difb = 0;
            difa = now.va + now.vb;
        }
        if (!f[1000 * difa + difb])
        {
            sc++;
            C[sc].va = difa;
            C[sc].vb = difb;
            C[sc].dad = ic - 1;
            C[sc].op = 6;
            f[1000 * difa + difb] = 1;
        }
        if (C[sc].va == c || C[sc].vb == c)
            break;
    }
    i = sc;
    while (i)
    {
        lg++;
        v[lg] = C[i].op;
        i = C[i].dad;
    }
    cout << lg << '\n';
    for (i = lg; i >= 1; i--)
    {
        switch (v[i])
        {
        case 1:
            cout << "R A\n";
            break;
        case 2:
            cout << "R B\n";
            break;
        case 3:
            cout << "A C\n";
            break;
        case 4:
            cout << "B C\n";
            break;
        case 5:
            cout << "A B\n";
            break;
        case 6:
            cout << "B A\n";
            break;
        }
    }
    return 0;
}</pre>
