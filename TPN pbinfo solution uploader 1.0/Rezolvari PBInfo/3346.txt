<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("pestelee.in");
ofstream cout("pestelee.out");

#define mod 10007

const int di[] = {-1 , 1 , 0 , 0};
const int dj[] = {0 , 0 , -1 , 1};

struct poz
{
    int i , j;
};

int cer , n , m , a[501][501] , x1 , y1 , x2 , y2 , b[501][501] , d[501][501];

bool inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m;
}

void lee(int i , int j)
{
    queue <poz> Q;
    Q.push({i , j});
    b[i][j] = 1;
    d[i][j] = 1;
    while(!Q.empty())
    {
        poz x;
        x = Q.front();
        for(int i = 0 ; i < 4 ; i++)
        {
            int inou = x.i + di[i];
            int jnou = x.j + dj[i];
            if(inside(inou , jnou) &amp;&amp; b[inou][jnou] == 0 &amp;&amp; a[inou][jnou] == 0)
            {
                Q.push({inou , jnou});
                b[inou][jnou] = b[x.i][x.j] + 1;
                d[inou][jnou] = (d[inou - 1][jnou] % mod + d[inou][jnou - 1] % mod + d[inou + 1][jnou] % mod + d[inou][jnou + 1] % mod) % mod;
            }
        }
        Q.pop();
    }
}

int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            cin >> a[i][j];
    
    cin >> x1 >> y1 >> x2 >> y2;
    cin >> cer;
    
    lee(x1 , y1);
    if(cer == 1) cout << b[x2][y2];
    else cout << d[x2][y2];
}</pre>
