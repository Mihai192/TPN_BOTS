<h1>Cerința</h1>

<p>Marinel a învăţat la şcoală despre divizibilitatea numerelor naturale. Un număr natural nenul <code>a</code> este divizor al numărului natural nenul <code>b</code> dacă restul împărţirii lui <code>b</code> la <code>a</code> este <code>0</code>. De exemplu, numărul <strong>3</strong> este divizor al lui <strong>12</strong> iar numărul <strong>4</strong> nu este divizor al lui <strong>15</strong>. Un număr natural nenul <code>n</code> este număr <code>prim</code> dacă are doar <code>2</code> divizori: <code>1</code> şi <code>n</code>. De exemplu, numărul <strong>7</strong> este număr prim deoarece îi are ca divizori doar pe <strong>1</strong> şi <strong>7</strong> iar numărul <strong>21</strong> nu este număr prim deoarece îi are ca divizori pe <strong>1</strong>, <strong>3</strong>, <strong>7</strong> şi <strong>21</strong>. Scrieţi un program care să îl ajute pe Marinel să îşi verifice tema primită pentru acasă.</p>

<p>Fiind date numărul <strong>n</strong> al numerelor din şir şi <strong>numerele</strong> din şir, să se determine:<br>
1) <strong>divizorii</strong> celui mai mare număr din şir, inclusiv 1 şi el însuşi;<br>
2) numerele <strong>prime</strong> din şir;<br>
3) numerele care sunt divizori ai <strong>tuturor</strong> numerelor din şir.</p>

<h1>Date de intrare</h1>

<p>Fişierul de intrare <code>divizori2.in</code> conține pe prima linie un număr natural <code>P</code>, pe a doua linie un număr natural <code>n</code> reprezentând numărul de numere din şir şi pe a treia linie cele <code>n</code> numere naturale din şir, separate prin spaţii.</p>

<h1>Date de ieșire</h1>

<p>Dacă valoarea lui <code>P</code> este <code>1</code>, se va rezolva numai punctul 1) din cerinţă:
 fişierul <code>divizori2.out</code> va conţine pe prima linie doar divizorii celui mai mare număr din şir. <br>
Dacă valoarea lui <code>P</code> este <code>2</code>, se va rezolva doar punctul 2) din cerinţă: <br>
fişierul <code>divizori2.out</code> va conţine pe prima linie doar numerele prime din şir sau numărul -1 dacă şirul nu conţine numere prime. <br>
Dacă valoarea lui <code>P</code> este <code>3</code>, se va rezolva numai punctul 3) din cerinţă: <br>
fişierul <code>divizori2.out</code> va conţine pe prima linie doar numerele care sunt divizori ai tuturor numerelor din şir.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>valoarea lui <strong>P</strong> poate să fie doar <strong>1</strong> sau <strong>2</strong> sau <strong>3</strong>;</li>
	<li>numărul natural <strong>n</strong> este cuprins între <strong>2</strong> şi <strong>1000</strong>;</li>
	<li>numerele din şir sunt numere naturale nenule cu cel mult <strong>6</strong> cifre;</li>
	<li>pentru rezolvarea corectă a primei cerinţe se acordă <strong>30</strong> de puncte;</li>
	<li>pentru rezolvarea corectă a celei de-a doua cerinţe se acordă <strong>30</strong> de puncte;</li>
	<li>pentru rezolvarea corectă a celei de-a treia cerinţe se acordă <strong>40</strong> de puncte;</li>
</ul>

<h1>Exemplu1:</h1>

<p><code>divizori2.in</code></p>

<pre contenteditable="true" editable="true">1
7
12 18 8 4 13 6 17</pre>

<p><code>divizori2.out</code></p>

<pre contenteditable="true" editable="true">1 2 3 6 9 18</pre>

<h3>Explicație</h3>

<p><strong>P=1</strong> deci se rezolvă prima cerinţă.<br>
Cel mai mare număr din şir este <strong>18</strong>.<br>
Divizorii numărului <strong>18</strong> sunt <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>6</strong>, <strong>9</strong> şi <strong>18</strong>.</p>

<h1>Exemplu2:</h1>

<p><code>divizori2.in</code></p>

<pre contenteditable="true" editable="true">2
7
12 18 8 4 13 6 17</pre>

<p><code>divizori2.out</code></p>

<pre contenteditable="true" editable="true">13 17</pre>

<h3>Explicație</h3>

<p><strong>P=2</strong> deci se rezolvă a doua cerinţă.<br>
Numerele prime din şir sunt <strong>13</strong> şi <strong>17</strong>.</p>

<h1>Exemplu3:</h1>

<p><code>divizori2.in</code></p>

<pre contenteditable="true" editable="true">2
7
12 18 8 4 12 6 15</pre>

<p><code>divizori2.out</code></p>

<pre contenteditable="true" editable="true">-1</pre>

<h3>Explicație</h3>

<p><strong>P=2</strong> deci se rezolvă a doua cerinţă.<br>
Nu sunt numere prime în şir.</p>

<h1>Exemplu4:</h1>

<p><code>divizori2.in</code></p>

<pre contenteditable="true" editable="true">3
4
70 42 21 35</pre>

<p><code>divizori2.out</code></p>

<pre contenteditable="true" editable="true">1 7</pre>

<h3>Explicație</h3>

<p><strong>P=3</strong> deci se rezolvă a treia cerinţă.<br>
Divizorii lui <strong>70</strong> sunt <code>1</code>, <strong>2</strong>, <strong>5</strong>, <code>7</code>, <strong>10</strong>, <strong>14</strong>, <strong>35</strong> şi <strong>70</strong>.<br>
Divizorii lui <strong>42</strong> sunt <code>1</code>, <strong>2</strong>, <strong>3</strong>, <strong>6</strong>, <code>7</code>, <strong>14</strong>, <strong>21</strong> şi <strong>42</strong>.<br>
Divizorii lui <strong>21</strong> sunt <code>1</code>, <strong>3</strong>, <code>7</code> şi <strong>21</strong>.<br>
Divizorii lui <strong>35</strong> sunt <code>1</code>, <strong>5</strong>, <code>7</code> şi <strong>35</strong>.<br>
Numerele care sunt divizori ai tuturor numerelor din şir sunt <code>1</code> şi <code>7</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cmath>
using namespace std;
ifstream fin("divizori2.in");
ofstream fout("divizori2.out");
int prim(long long n)
{
    if(n == 0 || n == 1) return 0;
    if(n == 2) return 1;
    if(n % 2 == 0) return 0;
    else for(int d = 3 ; d*d <= n ; d += 2) if(n % d == 0) return 0;
    return 1;
}
int main()
{
    int n , x , p , maxi = -1 , a , b , r , d, ok = 0;
    fin >> p >> n;
    if(p == 1)
    {
        for(int i = 1 ; i <= n ; ++i)
        {
            fin >> x;
            {
                if(x > maxi) maxi = x;
            }
        }
        for(int i = 1 ; i <= maxi ; ++i)
        {
            if(maxi % i == 0) fout << i <<" ";
        }
    }
    if(p == 2)
    {
        for(int i = 1 ; i <= n ; ++i)
        {
            fin >> x;
            {
                if(prim(x)) {fout << x << " ";ok = 1;}
            }
        }
        if(ok == 0) fout << -1;
    }
    if(p == 3)
    {
        fin >> a;
        for(int i = 1 ; i < n ; ++i)
        {
            fin >> b;
            int b1 = b;
            while(b != 0)
            {
                r = a % b;
                a = b;
                b = r;
            }
            d = a;
        }
        for(int i = 1 ; i <= d ; ++i)
        {
            if(d % i ==0) fout << i <<" " ;
        }
    }

    fin.close();
    fout.close();

    return 0;
}</pre>
