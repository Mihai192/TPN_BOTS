<h1>Cerința</h1>

<p>Zoli și D’Umbră s-au pierdut într-un labirint cu <code>n x n</code> camere dispuse pe cate <code>n</code> linii și <code>n</code> coloane. D’umbră se află în camera <code>(1, 1)</code>, iar Zoli se află în camera <code>(n, n)</code>. Aceștia vor trebui să parcurgă labirintul pentru a se regăsi. Dacă unul dintre ei se aflâ în camera <code>(i, j)</code>, acesta se poate deplasa spre una din camerele aflate la pozițiile <code>(i + 1, j)</code>, <code>(i, j + 1)</code>, <code>(i - 1, j)</code> sau <code>(i, j - 1)</code>, fără a părăsi labirintul.</p>

<p>Camerele nu pot fi accesate ușor. La fiecare cameră se află câte o ușă având o rezistență <code>R</code> care poate fi spartă cu un baros cu o putere <code>P ≥ R</code>. Unul dintre cei doi (nu contează care) va avea acces la un arsenal de barosuri cu puteri între <code>0</code> și <code>100.000</code>. </p>

<p>Determinați puterea minimă pe care o poate avea barosul ce trebuie folosit astfel încât Zoli și D’Umbră să se poată întâlni.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>labirint.in</code> conține pe prima linie numărul <code>n</code>, iar pe următoarele <code>n</code> linii <code>n</code> numere, al <code>j</code> -lea număr de pe linia <code>i + 1</code> reprezintă rezistența ușii de la camera aflată în <code>(i, j)</code>.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>labirint.out</code> va conține pe prima linie numărul <code>Pmin</code>, reprezentând puterea minimă pe care o poate avea un baros folosit pentru a sparge anumite uși și a conecta camerele <code>(1, 1)</code> și <code>(n, n)</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1.000</code></li>
	<li><code>0 ≤</code> rezistența unei uși <code>≤ 100.000</code></li>
	<li>pentru <code>50%</code> din punctaj, <code>Pmin ≤ 600</code> și <code>n ≤ 500</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356552&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1238%2Flabirint&amp;flash=0&amp;wgl=1&amp;dt=1595356552416&amp;bpp=6&amp;bdt=584&amp;idt=233&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=3290915781106&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356552&amp;ga_hid=2021980874&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=13&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1240&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=2148424233121556&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1275%2Fjaina&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=gfKCUBMPfX&amp;p=https%3A//www.pbinfo.ro&amp;dtd=243" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPqM9qT-3uoCFQ2usgodBwMAgg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>labirint.in</code></p>

<pre contenteditable="true" editable="true">4
1 2 3 4 
2 3 1 4 
2 1 2 3
3 3 1 1 </pre>

<p><code>labirint.out</code></p>

<pre contenteditable="true" editable="true">2</pre>

<h3>Explicație</h3>

<p><code>(1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3) -&gt; (4, 3) -&gt; (4, 4)</code><br>
Se evită camerele cu rezistență mai mare decât <code>2</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
#include <queue>
using namespace std;
ifstream cin("labirint.in");
ofstream cout("labirint.out");

int a[1001][1001] , b[1001][1001] , n , g;

int di[] = {-1 ,  0 , 0 , 1};
int dj[] = { 0 , -1 , 1 , 0};

struct poz
{
    int i,j;
};

queue<poz> q;

bool inside(int i,int j)
{
    return i > 0 &amp;&amp; j > 0 &amp;&amp; i <= n &amp;&amp; j <= n;
}

int lee(poz start, int v)
{
    if(a[1][1] > v) return 0;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            b[i][j] = 0;
    q.push(start);
    b[1][1] = 1;
    while(!q.empty())
    {
        poz x = q.front();
        for(int d = 0; d < 4; d++)
        {
            int inou = x.i + di[d];
            int jnou = x.j + dj[d];
            if(inside(inou,jnou) &amp;&amp; b[inou][jnou] == 0 &amp;&amp; a[inou][jnou] <= v)
            {
                    b[inou][jnou] = b[x.i][x.j]+1;
                    q.push({inou , jnou});
            }
        }
        q.pop();
    }
    return b[n][n];
}

void cautabin(int st , int dr)
{
    poz x;
    x.i = 1;
    x.j = 1;
    while(st <= dr)
        {
            int mij = (st + dr)/2;
            if(lee(x , mij)) dr = mij - 1;
            else st = mij + 1;
        }
    cout << st;
}
int main()
{
    cin >> n;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            cin >> a[i][j];
    cautabin(1 , 100000);
    return 0;
}</pre>
