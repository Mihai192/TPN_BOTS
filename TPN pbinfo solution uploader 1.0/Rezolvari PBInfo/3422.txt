<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector <int> G[101];
vector <int> H[101];

int n , m , x , y , k , c , cnt , d[101] , v[101] , ok , d2[101] , v2[101];

void bfs1(int nod)
{
    d[nod] = 0;
    v[nod] = 1;
    queue <int> Q;
    Q.push(nod);
    while(!Q.empty())
    {
        int x = Q.front();
        for(auto i : G[x])
            if(!v[i])
            {
                d[i] = d[x] + 1;
                v[i] = 1;
                Q.push(i);
            }
        Q.pop();
    }
}

void bfs2(int nod)
{
    d2[nod] = 0;
    v2[nod] = 1;
    queue <int> q;
    q.push(nod);
    while(!q.empty())
    {
        int x = q.front();
        for(auto i : H[x])
            if(!v2[i])
            {
                d2[i] = d2[x] + 1;
                v2[i] = 1;
                q.push(i);
            }
        q.pop();
    }
}

int main()
{
    cin >> n >> m >> k;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> x >> y;
        G[x].push_back(y);
        H[y].push_back(x);
    }

    bfs1(1);
    bfs2(1);
    for(int i = 1 ; i <= n ; i++)
    {
        if(d[1] != 0 &amp;&amp; d2[i] != 0)
        {
            if(min(d[i] , d2[i]) == k) cout << i << " " , ok++;
            ok++;
        }
        else if(d[i] != 0 &amp;&amp; d[i] == k) cout << i << " " , ok++;
        else if(d2[i] != 0 &amp;&amp; d2[i] == k) cout << i << " " , ok++;
    }
    if(ok == 0) cout << "Nu exista";
}</pre>
