<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <cstdio>
using namespace std;

char s[10002],c;
bool a[102][10002];
int sus[102][10002], st[102][10002], sts[102][10002],stj[102][10002],b[4],sir[2][10002],d[2];
int i,j,N,M,K,Q,A,B,P,x,max1,p1,p2;

int cbinarp(int A,int B, int u)
{
    int i,j,k;
    if (B<sir[A][1]) return -1;
    if (B>sir[A][u]) return -1;
    if (B==sir[A][1]) return 1;
    i=1;
    j=u;
    while (i<=j)
    {
        k=(i+j)/2;
        if (sir[A][k]==B&amp;&amp;sir[A][k-1]<B) return k;
        else
            if (sir[A][k]>=B) j=k-1;
            else i=k+1;
    }
    return -1;
}

int cbinaru(int A,int B, int u)
{
    int i,j,k;
    if (B<sir[A][1]) return -1;
    if (B>sir[A][u]) return -1;
    if (B==sir[A][u]) return u;
    i=1;
    j=u;
    while (i<=j)
    {
        k=(i+j)/2;
        if (sir[A][k]==B&amp;&amp;(sir[A][k+1]>B||k==u)) return k;
        else
            if (sir[A][k]>B) j=k-1;
            else i=k+1;
    }
    return -1;
}

int main()
{
    freopen("jocxzero.in", "r", stdin);
    freopen("jocxzero.out", "w", stdout);
    scanf("%d\n",&amp;P);
    scanf("%d %d %d\n", &amp;N, &amp;M, &amp;K);
    for (j=1;j<=N;j++)
        {
            gets(s+1);
            for (i=1;i<=M;i++)
                if (s[i]=='X') a[j][i]=1;
                else
                if (s[i]=='0') a[j][i]=0;
        }
        st[1][1]=sus[1][1]=sts[1][1]=1;
        for (j=2;j<=M;j++)
        {
            if (a[1][j]==a[1][j-1]) st[1][j]=st[1][j-1]+1;
            else st[1][j]=1;
            sus[1][j]=1;
            sts[1][j]=1;
        }
        for (i=2;i<=N;i++)
        {
            if (a[i][1]==a[i-1][1]) sus[i][1]=sus[i-1][1]+1;
            else sus[i][1]=1;
            st[i][1]=1;
            sts[i][1]=1;
        }
        for (i=2;i<=N;i++)
            for (j=2;j<=M;j++)
                {
                    if (a[i][j]==a[i][j-1]) st[i][j]=st[i][j-1]+1;
                    else st[i][j]=1;
                    if (a[i][j]==a[i-1][j]) sus[i][j]=sus[i-1][j]+1;
                    else sus[i][j]=1;
                    if (a[i][j]==a[i-1][j-1]) sts[i][j]=sts[i-1][j-1]+1;
                    else sts[i][j]=1;
                }
        stj[N][1]=1;
        for (i=N-1;i>=1;i--)
            stj[i][1]=1;
        for (j=2;j<=M;j++)
            stj[N][j]=1;
        for (i=N-1;i>=1;i--)
            for (j=2;j<=M;j++)
                {
                    if (a[i][j]==a[i+1][j-1]) stj[i][j]=stj[i+1][j-1]+1;
                    else stj[i][j]=1;
                }
        for (i=1;i<=N;i++)
            for (j=1;j<=M;j++)
        {
            x=a[i][j];
            if (sus[i][j]>=K) b[x]++;
            if (st[i][j]>=K) b[x]++;
            if (sts[i][j]>=K) b[x]++;
            if (stj[i][j]>=K) b[x]++;
        }
    if (P==1)
        printf("%d %d\n", b[1], b[0]);
    else
    {
        for (j=1;j<=M;j++)
        {
            d[0]=0;
            d[1]=0;
            for (i=1;i<=N;i++)
            {
                if (st[i][j]>=K) d[a[i][j]]++;
                if (sus[i][j]>=K) d[a[i][j]]++;
                if (sts[i][j]>=K) d[a[i][j]]++;
                if (stj[i][j]>=K) d[a[i][j]]++;
            }
            sir[1][j]=sir[1][j-1]+d[1];
            sir[0][j]=sir[0][j-1]+d[0];
        }
        scanf("%d\n", &amp;Q);
        for (i=1;i<=Q;i++)
        {
            scanf("%c %d\n",&amp;c, &amp;B);
            if (c=='X') A=1;
            else A=0;
            p1=cbinarp(A,B,M-1);
            p2=cbinaru(A,B,M-1);
            if (p1==-1) printf("0\n");
            else
                printf("%d\n",p2-p1+1);
        }
    }
    return 0;
}</pre>
