<blockquote>
	<p><i>„MARVEL AT <span class="caps">HIS</span> <span class="caps">MIGHT</span>!”</i></p>
</blockquote>

<h1>Cerința</h1>

<p><strong>Zoli</strong> și <strong>D’Umbră</strong> s-au pierdut din nou prin labirintul cu <code>n x n</code> camere dispuse pe <code>n</code> linii și <code>n</code> coloane. De această dată, amândoi se află în camera <code>(1, 1)</code>. A mai trecut de ultima dată și cateva lucruri s-au schimbat. Ei îl au acum la dispoziție pe <strong>Memobot</strong>, un roboțel controlat prin telecomandă care poate primi secvențe de comenzi. Când roboțelul primeste o secvență de comenzi, acesta va respecta fiecare comandă din secvență, apoi va aștepta o nouă comandă.</p>

<p>Din păcate pentru ei, <strong>Dr. Boom</strong> s-a plictisit să trimită <strong>Boom Bots</strong> (niște roboței care explodează singuri) să-i enerveze pe eroii din <strong>Azeroth</strong>. Așadar, acesta îi poziționează în câteva camere din labirint și care vor exploda când se vor afla în cameră cu înca cineva.</p>

<p>Acum <strong>Zoli</strong> și <strong>D’Umbră</strong> vor trebui să îl trimită pe <strong>Memobot</strong> pentru a curăța drumul până la ieșirea aflată în camera <code>(n, n)</code>. Ajutați-i să iasă din labirint pe drumul cel mai scurt parcurs de <strong>Memobot</strong>! (Drumul cel mai scurt este, bineînțeles, cel ce conține un număr minim de secvențe de comenzi)</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>labirint2.in</code> conține pe prima linie numerele <code>n</code> (dimensiunea labirintului), <code>b</code> (numărul de <strong>Boom Bots</strong> pe care <strong>Dr. Boom</strong> îi poziționează în labirint), <code>s</code> (numărul de secvențe de comenzi) și <code>k</code> (numărul de comenzi din fiecare secvență).</p>

<p>Pe următoarele <code>b</code> linii se află câte o pereche de numere naturale <code>x</code> și <code>y</code> reprezentând faptul că <strong>Dr. Boom</strong> a trimis un <strong>Boom Bot</strong> în camera aflată la coordonatele <code>(x, y)</code>.</p>

<p>Pe următoarele <code>s</code> linii se află cate <code>k</code> litere din mulțimea <code>{'U', 'D', 'L', 'R'}</code> care reprezintă direcția spre care se va deplasa <strong>Memobot</strong> în secvență. (<code>U</code> – Sus, <code>D</code> – Jos, <code>L</code> – Stânga, <code>R</code> – Dreapta).</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>labirint2.out</code> va conține pe prima linie numărul <code>S</code>, reprezentând numărul minim de secvențe de comenzi pe care Memobot trebuie să le primească.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 400</code></li>
	<li><code>1 ≤ b ≤ n * n</code></li>
	<li><code>1 ≤ k, s ≤ 10</code></li>
	<li><strong>Ordinea comenzilor din fiecare secvență nu poate fi schimbată!</strong></li>
	<li>Memobot poate trece de două ori prin aceeași cameră.</li>
	<li>Pentru <code>30%</code> din teste, <code>k = 1</code>, <code>s = 4</code> și secvențele sunt diferite între ele. (<strong>Memobot</strong> va putea merge pe direcțiile simple: Dreapta, Stânga, Sus și Jos)</li>
	<li>Dacă <strong>Memobot</strong> primește o secvență de comenzi care îl conduc spre o cameră inexistentă (pe linia/coloana <code>0</code> sau <code>n + 1</code>), atunci <strong>Memobot</strong> nu va executa secvența.</li>
	<li>Dacă cel puțin <code>2</code> <strong>Boom Bots</strong> se află într-o cameră, aceștia vor exploda înainte ca <strong>Memobot</strong> să pornească.</li>
	<li>Dacă nu există nici un drum prin care <strong>Memobot</strong> să ajungă în camera <code>(n, n)</code>, atunci se va afișa mesajul ”Imposibil!”</li>
	<li>Personajul este <strong>D’Umbră</strong> și nu <strong>Dumbră</strong>, și <strong>Dr. Boom</strong> este sigur de acest lucru.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595353254&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1241%2Flabirint2&amp;flash=0&amp;wgl=1&amp;dt=1595353254623&amp;bpp=4&amp;bdt=200&amp;idt=180&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=4132846399752&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353255&amp;ga_hid=743620757&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1591&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=4442378611630080&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1461%2Fmeteoriti&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=fNRHBvn6v2&amp;p=https%3A//www.pbinfo.ro&amp;dtd=186" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPeosYDy3uoCFYSnsgodPDwBmw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>labirint2.in</code></p>

<pre contenteditable="true" editable="true">4 3 4 2
3 2
3 3
4 1
D R
D L
U R
D D</pre>

<p><code>labirint2.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h3>Explicație</h3>

<p>Comenzile sunt, în această ordine: <code>(D, R), (U, R), (D, R), (D, D)</code></p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <queue>

using namespace std;

ifstream cin("labirint2.in");
ofstream cout("labirint2.out");

#define Inf 1000001

int a[401][401] , n , b , s , k;

struct poz
{
    int i , j;
};

queue <poz> q;
vector< vector<int> > dir;

bool inside(int i, int j)
{
    return i <= n &amp;&amp; j <= n &amp;&amp; i >= 1 &amp;&amp; j >= 1;
}
void lee()
{
    a[1][1] = 0;
    q.push({1 , 1});
    poz newr;
    bool ok;
    while(!q.empty())
    {
        poz r;
        r = q.front();
        q.pop();
        newr = r;
        if (a[r.i][r.j] == -1)continue;
        for (int i = 1; i <= s; ++ i)
        {
            ok = 1;
            newr = r;
            for (int j = 0; j < k &amp;&amp; ok; ++ j)
            {
                if (dir[i][j] == 1)newr.i --;
                else if (dir[i][j] == 2)newr.i ++;
                else if (dir[i][j] == 3)newr.j ++;
                else newr.j --;

                if (a[newr.i][newr.j] == -1 || !inside(newr.i, newr.j))ok = 0;
            }
            if (ok &amp;&amp; a[r.i][r.j] + 1 < a[newr.i][newr.j])
            {
                a[newr.i][newr.j] = a[r.i][r.j] + 1;
                q.push(newr);
            }
        }
    }
}

void init()
{
    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= n; j ++)
            if(a[i][j] != -1) a[i][j] = Inf;
}
int main()
{
    cin >> n >> b >> s >> k;

    init();
    for (int i = 1, x, y; i <= b; i ++)
    {
        cin >> x >> y;
        if(a[x][y] == Inf) a[x][y] = -1;
        else a[x][y]--;
    }
    init();
    dir = vector< vector<int> >(s + 1);
    char c;
    for (int i = 1; i <= s; i ++)
    {
        for (int j = 1; j <= k; j ++)
        {
            cin >> c;
            if (c == 'U')dir[i].push_back(1);
            else if (c == 'D')dir[i].push_back(2);
            else if (c == 'R')dir[i].push_back(3);
            else dir[i].push_back(4);
        }
    }
    lee();
    if (a[n][n] != Inf)cout << a[n][n];
    else cout << "Imposibil!";

    /*for (int i = 1; i <= n; i ++)
    {
        for (int j = 1; j <= n; j ++)
            fout << a[i][j] <<' ';
        fout << '\n';
    }*/
    return 0;
}</pre>
