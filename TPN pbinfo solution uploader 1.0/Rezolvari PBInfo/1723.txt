<p>O culegere de probleme are <code>P</code> pagini, numerotate de la <code>1</code> la <code>P</code>.
      Problemele din culegere sunt numerotate cu <code>1,2,3,...,</code>etc, în ordinea apariţiei lor în culegere. 
      Pe prima pagină a culegerii este scrisă o singură problemă (cea cu numărul <code>1</code>). 
      Pe a doua pagină sunt scrise exact două probleme (cele cu numerele <code>2</code> şi <code>3</code>, în această ordine). 
      Pe cea de-a treia pagină sunt scrise exact trei probleme (cele cu numerele <code>4</code>, <code>5</code> şi <code>6</code>, în această ordine),…, pe cea de a <code>P</code>-a pagină sunt scrise exact <code>P</code> probleme. </p>

<h1>Cerința</h1>

<p>Scrieţi un program care citeşte numerele naturale <code>P</code> şi <code>N</code> şi determină valorile:<br>
a)	<code>T</code>, numărul total de cifre care au fost utilizate în numerotarea tuturor problemelor din culegere;<br>
b)	<code>M</code>, numărul minim de pagini pe care ar trebui să le aibă culegerea, astfel încât aceasta să conţină şi problema numerotată cu <code>N</code>.</p>

<h1>Date de intrare</h1>

<p>Fişierul <code>culegere.in</code> conţine pe prima linie cele două numere naturale <code>P</code> şi <code>N</code>, separate printr-un spaţiu, cu semnificaţia din enunţ.</p>

<h1>Date de ieșire</h1>

<p>Fişierul <code>culegere.out</code> conţine:<br>
</p><ul>
	<li>pe prima linie numărul natural <code>T</code>, cu semnificaţia din enunţ;</li>
	<li>pe a doua linie numărul natural <code>M</code>, cu semnificaţia din enunţ.</li><br>
</ul><p></p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ P ≤ 16000</code></li>
	<li><code>1 ≤ N ≤ 2112600000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3229452458&amp;w=728&amp;lmt=1595359321&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1723%2Fculegere1&amp;flash=0&amp;wgl=1&amp;dt=1595359321041&amp;bpp=4&amp;bdt=237&amp;idt=232&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=7697930336550&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595359321&amp;ga_hid=1591786487&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1358&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066004%2C21066428%2C21066705&amp;oid=3&amp;pvsid=1976677379683765&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1610%2Fcolier&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=JetactRrCs&amp;p=https%3A//www.pbinfo.ro&amp;dtd=238" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CN6mjc2I3-oCFRDgsgod7BMAdg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>culegere.in</code></p>

<pre contenteditable="true" editable="true">5 9</pre>

<p><code>culegere.out</code></p>

<pre contenteditable="true" editable="true">21
4</pre>

<h3>Explicație</h3>

<p>Problemele sunt numerotate cu numerele:<br>
</p><ul>
	<li><code>1</code> (pagina <code>1</code>)</li>
	<li><code>2,3</code> (pagina <code>2</code>)</li>
	<li><code>4,5,6</code> (pagina <code>3</code>)</li>
	<li><code>7,8,9,10</code> (pagina <code>4</code>)</li>
	<li><code>11,12,13,14,15</code> (pagina <code>5</code>)</li><br>
</ul><p></p>

<p>În scrierea acestor numere s-au folosit <code>21</code> de cifre =&gt; <code>T=21</code>. <br>
Pentru a conţine şi problema cu numărul <code>9</code>, culegerea trebuie să aibă minimum <code>4</code> pagini =&gt; <code>M=4</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("culegere.in");
ofstream cout("culegere.out");

long long int p, n;

int main()
{
    cin >> p >> n;
    long long int nrp = p * (p + 1)/2, aux = nrp , pt = 10 , tcif = 0, nrcif = 0;
    while (aux)
        nrcif ++ , aux /= 10;
    for (int i = 1; i < nrcif; i++ , pt*=10)
        tcif += (i * (pt - pt / 10));
    tcif += (nrcif * (nrp - pt/10 + 1));
    cout << tcif << '\n';
    long long int m = 1;
    while (m * (m + 1) / 2 < n)
        m++;
    cout << m;
    return 0;
}</pre>
