<h1>Cerința</h1>

<p>Într-o zi telefonul lui Max s-a stricat. Văzând o reclamă la noul telefon cu sistemul de operare Ubuntu, s-a gândit să achiziționeze și el unul.</p>

<p>Drumul de la casa lui la magazin poate fi reprezentat ca o matrice cu <code>n</code> linii și <code>m</code> coloane. În fiecare element al matricei este o barieră; pentru a trece de bariere trebuie plătită o sumă de bani, care nu este aceeași  pentru fiecare barieră și poate fi chiar <code>0</code>. Casa lui Max se află pe coordonatele <code>(ic,jc)</code>, iar magazinul la coordonatele <code>(im,jm)</code>.</p>

<p>Pentru că trebuie să cumpere telefonul, este nevoie ca drumul lui sa fie cât mai puțin costisitor, plătind la bariere o sumă totală minimă.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>ubuph.in</code> conține pe prima linie numerele  <code>n</code> si <code>m</code>, iar pe următoarele <code>n</code> linii, câte <code>m</code> numere naturale reprezentând sumele care trebuie plătite la bariere.</p>

<p>Ultima linie va conține coordonatele  <code>(im,jm)</code> si <code>(ic,jc)</code> cu proprietatea din enunț.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>ubuph.out</code> va conține pe prima linie numărul <code>S</code>, reprezentând suma minimă care trebuie cheltuită  pentru a ajunge la magazin.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n,m ≤ 1000</code>.</li>
	<li>elementele matricei vor fi mai mici decât <code>1.000.000</code>.</li>
	<li>Max se poate deplasa numai pe linii sau pe coloane și nu poate ieși din matrice.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595356564&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1871%2Fubuph&amp;flash=0&amp;wgl=1&amp;dt=1595356563949&amp;bpp=7&amp;bdt=583&amp;idt=208&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=3661927251026&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356564&amp;ga_hid=375675071&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=15&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1228&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066716&amp;oid=3&amp;pvsid=3795359231317544&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F873%2Fvase&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=h3iDUeAhvO&amp;p=https%3A//www.pbinfo.ro&amp;dtd=213" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CInds6r-3uoCFdyNsgoddwIPPw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>ubuph.in</code></p>

<pre contenteditable="true" editable="true">4 4
1 0 0 5 
6 1 2 8
10 10 10 1
1 10 0 1
1 1 3 3</pre>

<p><code>ubuph.out</code></p>

<pre contenteditable="true" editable="true">13</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("ubuph.in");
ofstream cout("ubuph.out");

int n , m , is , ip , js , jp;
int a[1001][1001];

int inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m;
}

struct poz
{
    int i , j;
};

queue <poz> Q;

const int di[] = { 0 , 0 , -1 , 1};
const int dj[] = {-1 , 1 ,  0 , 0};

long long b[1001][1001];

void lee()
{
    poz r;
    r.i = ip;
    r.j = jp;
    Q.push(r);
    while(!Q.empty())
    {
        poz r;
        r = Q.front();
        for(int i = 0 ; i < 4 ; i++)
        {
            int inou = r.i + di[i];
            int jnou = r.j + dj[i];
            if(inside(inou , jnou) &amp;&amp; b[inou][jnou] > a[inou][jnou] + b[r.i][r.j])
            {
                Q.push({inou , jnou});
                b[inou][jnou] = a[inou][jnou] + b[r.i][r.j];
            }
        }
        Q.pop();
    }
}
int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
        cin >> a[i][j];

    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= m ; j++)
            b[i][j] = 20000001;

    cin >> ip >> jp >> is >> js;

    b[ip][jp] = a[ip][jp];
    lee();
    cout << b[is][js];
}</pre>
