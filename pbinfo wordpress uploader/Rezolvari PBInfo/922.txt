<h1>Cerința</h1>

<p>Se dau coordonatele carteziene a <code>n</code> puncte în plan. Să se determine distanța maximă dintre  un punct dat și originea sistemului de coordonate și numărul de puncte situate la acea distanță față de origine.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> perechi de puncte <code>x y</code>, reprezentând coordonatele punctelor.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran două numere <code>D C</code>, reprezentând distanța maximă față de originea sistemului și numărul de puncte situate la acea distanță.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 100</code></li>
	<li>coordonatele punctelor sunt numere întregi din intervalul <code>[-1000,1000]</code></li>
	<li>distanța maximă se va afișa cu cel puțin trei zecimale exacte</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356798&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F922%2Fpuncte&amp;flash=0&amp;wgl=1&amp;dt=1595356798760&amp;bpp=12&amp;bdt=205&amp;idt=161&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=4456239925937&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356799&amp;ga_hid=1439618759&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066358%2C21066715&amp;oid=3&amp;pvsid=4257705414353984&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1013%2Faniversari&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=cPmEc6xHHD&amp;p=https%3A//www.pbinfo.ro&amp;dtd=168" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CLGlrJr_3uoCFfrGuwgdIqULnA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">7
2 -1 
-2 4 
2 3 
3 -1 
-2 -4 
2 -2 
-4 2 </pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">4.472 3</pre>

<h1>Explicație</h1>

<p>Cele trei puncte aflate la distanța <code>4.472</code> față de origine sunt: <code>-2 4</code>, <code>-2 -4</code> și <code>-4 2</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <cmath>
using namespace std;
struct punct{int x , y;};
double dist00(punct p)
{
    return sqrt(p.x*p.x+p.y*p.y);///distanta de la p la origine
}
int main()
{
    int n , c = 0 ;
    punct P[101];
    double dmax = 0;
    cin >> n;
    for(int i = 1 ; i <= n ; ++i)
        cin >> P[i].x >> P[i].y;
    for(int i = 1 ; i <= n ; ++i)
    {
        double d = dist00(P[i]);
        if(d > dmax) dmax = d , c = 1;
        else if(d==dmax) c++;
    }
    cout << dmax << " " << c;
}</pre>
