<h1>Cerința</h1>

<p>Se consideră o clădire de formă dreptunghiulară, împărțită în <code>n*m</code> camere, dispuse sub forma unei matrice cu <code>n</code> linii și <code>m</code> coloane. Dintr-o cameră se poate trece în oricare dintre cele <code>4</code> camere vecine pe linie sau pe coloană. Unele camere sunt închise, și în ele nu se poate intra deloc. Trecerea dintr-o cameră în altă cameră durează un minut.</p>

<p>În anumite camere se află echipe de pompieri. Pentru o intervenție cât mai rapidă în cazul unui eventual incendiu apărut în una dintre camerele clădirii, este necesar să se știe, pentru fiecare cameră care este timpul minim în care o echipă de pompieri ajunge în acea cameră.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>acces1.in</code> conține pe prima linie numerele <code>n m</code>; următoarele <code>n</code> linii conțin câte <code>m</code> caractere, care pot fi:</p>

<ul>
	<li><code>-</code> – reprezintă o cameră liberă</li>
	<li><code>#</code> – reprezintă o cameră închisă</li>
	<li><code>P</code> – reprezintă o cameră în care se găsește o echipă de pompieri</li>
</ul>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>acces1.out</code> va conține o matrice cu <code>n</code> linii și <code>m</code> coloane, fiecare element al matricei reprezentând timpul minim necesar ca o echipă de pompieri să ajungă în camera corespunzătoare. Pentru camerele ocupate se va fișa simbolul <code>#</code>, iar pentru cele libere în care nu va ajunge nici o echipă se va afișa <code>-</code>.<br>
Matricea va fi afișată linie cu linie, câte o linie a matricei pe o linie a fișierului, elementele de pe fiecare linie fiind separate prin câte un spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n,m ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356614&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F868%2Facces1&amp;flash=0&amp;wgl=1&amp;dt=1595356614349&amp;bpp=19&amp;bdt=239&amp;idt=184&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=2913995532440&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356614&amp;ga_hid=1530679597&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=24&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1240&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066393%2C21066624&amp;oid=3&amp;pvsid=930883329221939&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F884%2Fpaznici&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=a3ThvP9g3D&amp;p=https%3A//www.pbinfo.ro&amp;dtd=190" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CLvitcL-3uoCFajiuwgdsHMLnw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>acces1.in</code></p>

<pre contenteditable="true" editable="true">4 6
P-#-#P
--##--
--P---
-----#</pre>

<p><code>acces1.out</code></p>

<pre contenteditable="true" editable="true">0 1 # - # 0 
1 2 # # 2 1 
2 1 0 1 2 2 
3 2 1 2 3 # </pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("acces1.in");
ofstream cout("acces1.out");
const int di[]={-1 , 0 , 1 , 0};
const int dj[]={0 , 1 , 0 , -1};
int n , m ;
int a[1002][1002], numar;
bool prt[1001][1001];

struct poz{int i , j;};
poz q[1000000];

bool inside(int i , int j){return i>=1 &amp;&amp; i<=n &amp;&amp; j>=1 &amp;&amp; j<=m;}
void lee(int dr)
{
    int st=1;
    while(st<=dr)
    {
        int i = q[st].i;
        int j = q[st].j;
        //if (i == n)break;
        for(int d = 0 ; d < 4 ; d++)
        {
            int inou=i+di[d];
            int jnou=j+dj[d];
            if(inside(inou,jnou) &amp;&amp; a[inou][jnou]==0 )
            {
                q[++dr].i=inou;
                q[dr].j=jnou;
                a[inou][jnou]=a[i][j]+1;
            }
        }
        st++;
    }
    //return a[q[st].i][q[st].j];
}
int main()
{
    char ch;
    int dr = 0;
    cin >> n >> m;
    for (int i = 1; i <= n; ++ i)
        for (int j = 1; j <= m; ++ j)
        {
            cin >> ch;
            if (ch == 'P')
            {
                poz start;
                start.i = i;
                start.j = j;
                a[i][j] = 1;
                q[++ dr] = start;
                prt[i][j] = 1;
            }
            else if (ch == '#')a[i][j] = -1;
            //else if (ch == '-')a[i][j] = 1;
        }

    lee(dr);
    for (int i = 1; i <= n; ++ i)
    {

        for (int j = 1; j <= m; ++ j)
            if (a[i][j] == -1)cout << "# ";
            else if (a[i][j] == 0 &amp;&amp; prt[i][j] == 0)cout << "- ";

            else cout << a[i][j] - 1 << ' ';
        cout << '\n';
            }
    return 0;
}</pre>
