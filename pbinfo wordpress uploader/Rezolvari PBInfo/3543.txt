<h1>Cerința</h1>

<p>Se dă un string <code>s</code>. Asupra acestuia, se aplică <code>5</code> tipuri de operații:</p>

<ul>
	<li><code>(1, c)</code> – se adaugă caracterul <code>c</code> la începutul string-ului</li>
	<li><code>(2, c)</code> – se adaugă caracterul <code>c</code> la finalul string-ului</li>
	<li><code>(3)</code>    – se șterge primul caracter al string-ului</li>
	<li><code>(4)</code>    – se șterge ultimul caracter al string-ului</li>
	<li><code>(5)</code>    – string-ul se va transforma în răsturnatul său</li>
</ul>

<p>Să se afișeze string-ul rezultat după cele <code>q</code> operații.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură string-ul <code>s</code>, numărul natural <code>q</code> si cele <code>q</code> query-uri.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran string-ul rezultat.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>q</code> si lungimea inițială a lui <code>s</code> sunt mai mici sau egale decat <code>100.000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356939&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3543%2Fstringpushpop&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595356939828&amp;bpp=6&amp;bdt=358&amp;idt=112&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5051133960494&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356940&amp;ga_hid=346870016&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1108&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066429&amp;oid=3&amp;pvsid=252224198540490&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F857%2Fmultimi4&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=1c3UnBi2TU&amp;p=https%3A//www.pbinfo.ro&amp;dtd=124" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPboy93_3uoCFdvJuwgdO3MIEw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">fnic
7
1 a
3
4
1 o
2 b
5
1 p</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">pbinfo</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <queue>
using namespace std;

char s[100001];
deque<char> Q;

int main(){
    ios::sync_with_stdio(false);
    cin >> s;
    int i = 0;
    while(s[i]){
        Q.push_back(s[i]);
        i++;
    }
    int n;
    cin >> n;
    bool rasturnat = false;
    for(int i = 1; i <= n; ++i){
        int c;
        cin >> c;
        if(c == 1 || c == 2){
            char ch;
            cin >> ch;
            if(c == 1 &amp;&amp; !rasturnat)
                Q.push_front(ch);
            else if(c == 1 &amp;&amp; rasturnat)
                Q.push_back(ch);
            if(c == 2 &amp;&amp; !rasturnat)
                Q.push_back(ch);
            else if(c == 2 &amp;&amp; rasturnat)
                Q.push_front(ch);
        }
        else{
            if(c == 3 &amp;&amp; !rasturnat)
                Q.pop_front();
            else if(c == 3 &amp;&amp; rasturnat)
                Q.pop_back();
            if(c == 4 &amp;&amp; !rasturnat)
                Q.pop_back();
            else if(c == 4 &amp;&amp; rasturnat)
                Q.pop_front();
            if(c == 5)
                rasturnat = !rasturnat;
        }
    }
    if(rasturnat)
        while(!Q.empty()){
            cout << Q.back();
            Q.pop_back();
        }
    else
        while(!Q.empty()){
            cout << Q.front();
            Q.pop_front();
        }
    return 0;
}</pre>
