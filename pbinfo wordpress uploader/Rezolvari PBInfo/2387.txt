<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <iomanip>
#include <algorithm>
#include <cmath>
using namespace std;

ifstream cin("mosia1.in");
ofstream cout("mosia1.out");

struct punct
{
    int x, y, d;
}v[1003];
double d1[1003] , d2[1003] , X , Y;
int n;

bool comp(punct a, punct b)
{
    return atan2(a.y - Y , a.x - X) < atan2(b.y - Y , b.x - X);
}

double dist(punct a, punct b)
{
    int dx = a.x - b.x , dy = a.y - b.y;
    return sqrt(dx * dx + dy * dy);
}

int main()
{
    cin >> n;
    for (int i = 1; i <= n; ++i)
    {
        cin >> v[i].x >> v[i].y >> v[i].d;
        X += v[i].x;
        Y += v[i].y;
    }

    X /= n;
    Y /= n;
    sort(v + 1, v + n + 1, comp);

    v[0] = v[n];
    v[n + 1] = v[1];

    for (int i = 1; i <= n; ++i)
        d1[i] = d2[i] = v[i].d * dist(v[i - 1], v[i + 1]) / 2;

    d1[n] = d2[1] = 0;

    for(int i = 2 ; i <= n ; ++i)
    {
        d1[i] = max(d1[i - 1], d1[i] + d1[i - 2]);
        d2[i] = max(d2[i - 1], d2[i] + d2[i - 2]);
    }

    cout << fixed << setprecision(4) << max(d1[n], d2[n]);

    return 0;

}</pre>
