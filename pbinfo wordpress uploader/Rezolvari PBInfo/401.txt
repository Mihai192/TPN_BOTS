<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <fstream>
#include <algorithm>
#include <cassert>
using namespace std;
#define NN 100005

ifstream fin("pachete_multe.in");
ofstream fout("pachete_multe.out");

int n, spatiu[NN], unde[NN], liber ,M;

struct manevra{
    int sursa,dest;
    manevra(){sursa = 0, dest = 0;}
    manevra(int i,int j){sursa = i, dest = j;}
    friend ostream&amp; operator << (ostream &amp;os, manevra x)
    {
        os << x.sursa << " " << x.dest;
        return os;
    }
};

manevra v[2*NN+10];

void muta(int i){
    v[++M] = manevra(i,liber);
    spatiu[liber] = spatiu[i];
    unde[spatiu[i]] = liber;
    spatiu[i] = 0;
    liber = i;
}

int main(){
    assert(fin >> n );
    for(int i=1 ; i<=n ; ++i)
        assert(fin >> spatiu[i]), unde[spatiu[i]] = i;
    liber = n+1;
    for(int i=1 ; i<=n ; ++i)
        if(spatiu[i]!=i)
        {
            if(spatiu[i]!=0)
                muta(i);
            muta(unde[i]);
        }
    fout << M << "\n";
    for(int i=1;i<=M;++i)
        fout << v[i] << "\n";
    return 0;
}</pre>
