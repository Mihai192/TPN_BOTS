<p>Eu sunt fascinată de numerele prime. Consider că numerele prime sunt “scheletul” tuturor numerelor sau “atomii” acestora, pentru că orice număr natural mai mare decât <code>1</code> poate fi scris ca un produs de numere prime. Recent am aflat şi alte proprietăţi interesante legate de numerele prime, de exemplu:</p>

<ol>
	<li>În şirul Fibonacci există o infinitate de numere prime. Vă mai amintiţi şirul Fibonacci? <code>0</code>, <code>1</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>5</code>, <code>8</code>, <code>13</code>, <code>...</code> Este şirul în care fiecare termen, exceptând primii doi, se obţine ca suma celor doi termeni care îl precedă.</li>
	<li>Există numere naturale denumite „economice”. Un număr natural este economic dacă numărul de cifre necesare pentru scrierea sa este mai mare decât numărul de cifre necesare pentru scrierea descompunerii sale în factori primi (adică decât numărul de cifre necesare pentru scrierea factorilor primi şi a puterilor acestora). De exemplu <code>128</code> este economic pentru că <code>128</code> se scrie cu <code>3</code> cifre, iar descompunerea sa în factori primi se scrie cu două cifre (<code>2^7</code>); <code>4374</code> este economic pentru că se scrie cu <code>4</code> cifre, în timp ce descompunerea sa în factori primi se scrie cu <code>3</code> cifre (<code>2*3^7</code>). Observaţi că atunci când un factor prim apare la puterea <code>1</code>, aceasta nu este necesar să fie scrisă.</li>
	<li>Multe numere naturale pot fi scrise ca sumă de două numere prime. Dar nu toate. De exemplu, <code>121</code> nu poate fi scris<br>
ca sumă de două numere prime.</li>
</ol>

<h1>Cerința</h1>

<p>Scrieţi un program care citeşte numărul natural <code>n</code> şi o secvenţă de n numere naturale, apoi rezolvă următoarele cerinţe:</p>

<ol>
	<li>determină şi afişează câte dintre numerele din secvenţa dată sunt numere prime din şirul Fibonacci;</li>
	<li>determină şi afişează câte dintre numerele din secvenţa dată sunt numere economice;</li>
	<li>determină şi afişează câte dintre numerele din secvenţa dată nu pot fi scrise ca sumă de două numere prime.</li>
</ol>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>prime1.in</code> conține pe prima linie un număr natural <code>c</code> care reprezintă cerinţa (<code>1</code> , <code>2</code> sau <code>3</code>). Pe a doua linie se află numărul natural <code>n</code>. Pe a treia linie se află o secvenţă de <code>n</code> numere naturale separate prin spaţii.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>prime1.out</code> va conţine o singură linie pe care va fi scris răspunsul la cerinţa din fişierul de intrare.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 &lt; n ≤ 50</code></li>
	<li>Dacă <code>c=1</code> sau <code>c=3</code> numerele naturale din şir sunt mai mari decât <code>1</code> şi mai mici decât <code>10^7</code>.</li>
	<li>Dacă <code>c=2</code> numerele naturale din şir sunt mai mari decât <code>1</code> şi mai mici decât <code>10^14</code>.<br>
Pentru rezolvarea corectă a cerinţei 1 se acordă 20 de puncte; pentru rezolvarea corectă a cerinţei 2 se acordă 50 de<br>
puncte, iar pentru rezolvarea corectă a cerinţei 3 se acordă 30 de puncte.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>prime1.in</code></p>

<pre contenteditable="true" editable="true">1
5
2 10 13 997 233</pre>

<p><code>prime1.out</code></p>

<pre contenteditable="true" editable="true">3</pre>

<h1>Exemplul 2</h1>

<p><code>prime1.in</code></p>

<pre contenteditable="true" editable="true">2
4
128 25 4374 720</pre>

<p><code>prime1.out</code></p>

<pre contenteditable="true" editable="true">2</pre>

<h1>Exemplul 3</h1>

<p><code>prime1.in</code></p>

<pre contenteditable="true" editable="true">3
5
57 30 121 11 3</pre>

<p><code>prime1.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h1>Explicații</h1>

<p>Pentru exemplul 1: Cerinţa este 1. Cele <code>3</code> numere prime din şirul Fibonacci existente în secvenţă sunt <code>2</code>, <code>13</code> şi <code>233</code>.</p>

<p>Pentru exemplul 2: Cerinţa este 2. Succesiunea conţine două numere economice (<code>128</code> şi <code>4374</code>).</p>

<p>Pentru exemplul 3: Cerinţa este 3. Sunt <code>4</code> numere naturale din secvenţă care nu pot fi scrise ca sumă de două numere prime: <code>57</code>, <code>121</code>, <code>11</code>, <code>3</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("prime1.in");
ofstream cout("prime1.out");
int a[100] , n , catefib , catec , catep;
int prim(int n)
{
    if(n == 0 || n == 1) return 0;
    if(n == 2) return 1;
    if(n % 2 == 0) return 0;
    for(int i = 3 ; i * i <= n ; i += 2) if(n % i == 0) return 0;
    return 1;
}

int cb(int x)
{
    int st = 0 , dr = 35 , poz = -1;
    while(st <= dr)
    {
        int m =(st + dr)/2;
        if(x <= a[m])
        {
             poz = m;
             dr = m - 1;
        }
        else st = m + 1;
    }
    if(a[poz] == x) return 1;
    else return 0;
}

int nrcif(long long n)
{
    int c = 0;
    while(n)
    {
        n /= 10;
        c++;
    }
    return c;
}
int eco(long long n)
{
    long long d = 2 , cnt = 0;
    long long aux = n;
    while(n > 1)
    {
        int p = 0;
        while(n % d == 0) p++ , n /= d;
        if(p > 1) cnt = cnt + nrcif(p) + nrcif(d);
        else if(p == 1) cnt = cnt + nrcif(d);
        d++;
        if(d*d > n) d = n;
    }
    if(nrcif(aux) > cnt) return 1;
    else return 0;
}

int num(int n)
{
    if(n % 2 == 0) return 0;
    else if(prim(n - 2)) return 0;
    return 1;
}
int main()
{
    a[1] = 1;
    a[2] = 1;
    for(int i = 3 ; i <= 35 ; i++)
        a[i] = a[i-1] + a[i-2];
    long long n , cer , x;
    cin >> cer >> n;
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> x;
        if(cb(x) &amp;&amp; prim(x)) catefib++;
        if(eco(x)) catec++;
        if(num(x)) catep++;
    }
    if(cer == 1) cout << catefib;
    if(cer == 2) cout << catec;
    if(cer == 3) cout << catep;
}</pre>
