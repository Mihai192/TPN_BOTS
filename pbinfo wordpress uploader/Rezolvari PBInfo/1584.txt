<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("spirala2.in");
ofstream cout("spirala2.out");
int a[501][501] , n , k , cer;
int inside(int i , int j)
{
    return i <= n &amp;&amp; i >= 1 &amp;&amp; j <= n &amp;&amp; j >= 1;
}
int main()
{
    cin >> cer >> n >> k;
    int l = n * n;
    int i = 1 , j = 1 , ind = 1;
    while(l)
    {
        while(a[i][j] == 0 &amp;&amp; l &amp;&amp; inside(i , j))
        {
            a[i][j] = ind;
            j++;
            ind++;
            l--;
        }
        j--;
        i++;
        while(a[i][j] == 0 &amp;&amp; l &amp;&amp; inside(i , j))
        {
            a[i][j] = ind;
            i++;
            ind++;
            l--;
        }
        i--;
        j--;
        while(a[i][j] == 0 &amp;&amp; l &amp;&amp; inside(i , j))
        {
            a[i][j] = ind;
            j--;
            ind++;
            l--;
        }
        j++;
        i--;
        while(a[i][j] == 0 &amp;&amp; l  &amp;&amp; inside(i , j))
        {
            a[i][j] = ind;
            i--;
            ind++;
            l--;
        }
        j++;
        i++;
    }
    if(cer == 1)
    {
        long long sum = 0;
        for(int s = 1 ; s <= n ; s++)
             if(s != k)
                sum = sum + (a[s][k] % 100003) + (a[k][s] % 100003);
        cout << sum;
    }
    else if(cer == 2)
    {
        for(int s = 1 ; s <= n ; s++)
            swap(a[s][k] , a[k][s]);
        for(int s = 1 ; s <= n ; s++)
        {
            for(int p = 1 ;  p <= n ; p++)
                cout << a[s][p] << " ";
            cout << '\n';
        }
    }

    return 0;
}</pre>
