<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <stack>
using namespace std;

ifstream cin("nuclee.in");
ofstream cout("nuclee.out");

stack <int> S;
vector <int> G[1001];
vector <int> c;
int n , x , y , v[1001] , L[1001] , cnt , inS[1001] , rez;

void tarjan(int nod)
{
    v[nod] = L[nod] = ++cnt;
    S.push(nod);
    inS[nod] = 1;
    for(auto i : G[nod])
    {
        if(!v[i]) tarjan(i) , L[nod] = min(L[nod], L[i]);
        else if(inS[i]) L[nod] = min(L[nod], v[i]);
    }

    if(v[nod] == L[nod])
    {
        c.clear();
        while(true)
        {
            int val = S.top();
            S.pop();
            c.push_back(val);
            inS[val] = 0;
            if(nod == val) break;
        }
        rez++;
    }
}

int main()
{
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> x;
        for(int j = 1 ; j <= x ; j++)
        {
            cin >> y;
            G[i].push_back(y);
        }
    }

    for(int i = 1 ; i <= n ; i++)
        if(!v[i]) cnt = 0 , tarjan(i);

    cout << rez;
    return 0;
}</pre>
