<h1>Cerința</h1>

<p>Un şir se numeşte <code>şir zigzag</code>, dacă monotonia elementelor pe poziții succesive alternează între strict crescător și strict descrescător, adică <code>a[1]&gt;a[2]&lt;a[3]&gt;a[4] ...</code> sau <code>a[1]&lt;a[2]&gt;a[3]&lt;a[4]...</code>.</p>

<p>Se citeşe un şir cu <code>n</code> elemente. Să se verifice dacă este şir zigzag. </p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere naturale, reprezentând elementele șirului.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran unul dintre mesajele <code>DA</code> sau <code>NU</code> după cum șirul dat este şir zigzag sau nu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>3 ≤ n ≤ 1000</code></li>
	<li><code>0 ≤</code> elementele şirului <code>≤ 1 000 000 000</code></li>
</ul>

<h1>Exemplu 1:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
1 5 3 7 5</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">DA</pre>

<h3>Explicație</h3>

<p>Avem relațiile <code>1 &lt; 5 &gt; 3 &lt; 7 &gt; 5</code>, deci e vorba de un șir zigzag.</p>

<h1>Exemplu 2:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
4 3 5 1 2</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">DA</pre>

<h3>Explicație</h3>

<p>Avem relațiile <code>4 &gt; 3 &lt; 5 &gt; 1 &lt; 2</code>, deci e vorba de un șir zigzag.</p>

<h1>Exemplu 3:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">5
4 3 2 1 2</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">NU</pre>

<h3>Explicație</h3>

<p>Primele trei elemente ale șirului nu își schimbă monotonia, deci nu e șir zigzag.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>

using namespace std;
int n,ok,i;
int main()
{
    cin>>n;
    int a[n];
    for (i=0;i<n;i++)
    {
        cin>>a[i];
    }
    ok=1;
    for (i=0;i<n-2;i++)
    {
        if (a[i]<a[i+1])
        {
            if (a[i+1]<a[i+2])
                ok=0;
        }
        else
        {
            if (a[i]>a[i+1])
            {
                if (a[i+1]>a[i+2])
                    ok=0;
            }
        }
        if (a[i]==a[i+1])
            ok=0;
    }
    if (ok==0)
        cout<<"NU";
    else cout<<"DA";

    return 0;
}</pre>
