<p>Parcul oraşului a fost neglijat mult timp, astfel că acum toate aleile sunt distruse. Prin urmare, anul acesta Primăria şi-a propus să facă reamenajări. Parcul are forma unui pătrat cu latura de <code>n</code> metri și este înconjurat de un gard care are exact două porți. Proiectanții de la Primărie au realizat o hartă a parcului și au trasat pe hartă un caroiaj care împarte parcul în <code>nxn</code> zone pătrate cu latura de <code>1</code> metru. Astfel harta parcului are aspectul unei matrice pătratice cu <code>n</code> linii și <code>n</code> coloane. Liniile și respectiv coloanele sunt numerotate de la <code>1</code> la <code>n</code>. Elementele matricei corespund zonelor pătrate de latură <code>1</code> metru. O astfel de zonă poate să conțină un copac sau este liberă. Edilii orașului doresc să paveze cu un număr minim de dale pătrate cu latura de <code>1</code> metru zonele libere (fără copaci) ale parcului, astfel încât să se obțină o alee continuă de la o poartă la alta.</p>

<h1>Cerința</h1>

<p>Scrieți un program care să determine numărul minim de dale necesare pentru construirea unei alei continue de la o poartă la cealaltă.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>alee.in</code> conține pe prima linie două valori naturale <code>n</code> și <code>m</code> separate printr-un spațiu, reprezentând dimensiunea parcului, respectiv numărul de copaci care se găsesc în parc. Fiecare dintre următoarele <code>m</code> linii conține câte două numere naturale <code>x</code> și <code>y</code> separate printr-un spațiu, reprezentând pozițiile copacilor în parc (<code>x</code> reprezintă linia, iar <code>y</code> reprezintă coloana zonei în care se află copacul). Ultima linie a fișierului conține patru numere naturale <code>x1 y1 x2 y2</code>, separate prin câte un spațiu, reprezentând pozițiile celor două porți (<code>x1</code>, <code>y1</code> reprezintă linia și respectiv coloana zonei ce conține prima poartă, iar <code>x2</code>, <code>y2</code> reprezintă linia și respectiv coloana zonei ce conține cea de a doua poartă).</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>alee.out</code> va conţine o singură linie pe care va fi scris un număr natural care reprezintă numărul minim de dale necesare pentru construirea aleii.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 175</code></li>
	<li><code>1 ≤ m &lt; n*n</code></li>
	<li>Aleea este continuă dacă oricare două plăci consecutive au o latură comună.</li>
	<li>Aleea începe cu zona unde se găsește prima poartă și se termină cu zona unde se găsește cea de a doua poartă.</li>
	<li>Pozițiile porților sunt distincte şi corespund unor zone libere.</li>
	<li>Pentru datele de test există întotdeauna soluție.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595356519&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2167%2Falee&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595356519653&amp;bpp=5&amp;bdt=560&amp;idt=181&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=1389123729787&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356520&amp;ga_hid=1763309368&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=7&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1480&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=280908604979758&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1099%2Finsule&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=P8xVu2BCVH&amp;p=https%3A//www.pbinfo.ro&amp;dtd=188" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPyCopX-3uoCFSnauwgd4XQFFg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>alee.in</code></p>

<pre contenteditable="true" editable="true">8 6 
2 7
3 3
4 6
5 4
7 3
7 5 
1 1 8 8</pre>

<p><code>alee.out</code></p>

<pre contenteditable="true" editable="true">15</pre>

<h3>Explicație</h3>

<p>O modalitate de a construi aleea cu număr minim de dale este: <br>
<span class="caps">OOO</span>——-<br>
—OO—x-<br>
—xO——<br>
—-OOx—<br>
—-xO—-<br>
——OO—<br>
—x-xOO-<br>
———OO<br>
(cu X am marcat copacii, cu – zonele libere, iar cu O dalele aleii).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("alee.in");
ofstream cout("alee.out");
const int di[]={-1 , 0 , 1 , 0};
const int dj[]={0 , 1 , 0 , -1};
struct poz{int i , j;};
int n , a[200][200];
poz p1 , p2;
bool inside(int i , int j)
{
    return i>=1 &amp;&amp; i<=n &amp;&amp; j>=1 &amp;&amp; j<=n;
}
void lee(poz start)
{
    poz q[40000];
    int st , dr;
    st=dr=1;
    q[st]=start;
    a[start.i][start.j]=1;
    while(st<=dr)
    {
        int i = q[st].i;
        int j = q[st].j;
        for(int d = 0 ; d < 4 ; d++)
        {
            int inou=i+di[d];
            int jnou=j+dj[d];
            if(inside(inou,jnou) &amp;&amp; a[inou][jnou]==0)
            {
                q[++dr].i=inou;
                q[dr].j=jnou;
                a[inou][jnou]=a[i][j]+1;
            }
        }
        st++;
    }

}
int main()
{
    int c;
    cin >> n >> c;
    for(int i =1 ; i <= c ; ++i)
    {
        int x , y;
        cin >> x >> y;
        a[x][y]=-1;
    }
    cin >> p1.i >> p1.j >> p2.i >> p2.j;///pozitiile
    lee(p1);
    cout << a[p2.i][p2.j];

}</pre>
