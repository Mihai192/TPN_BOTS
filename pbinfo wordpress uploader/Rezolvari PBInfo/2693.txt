<h1>Cerința</h1>

<p>Se dă un șir de caractere în care cuvintele sunt formate din litere mici și mari ale alfabetului englez și sunt separate prin spații. Să se afișeze cuvintele în ordine descrescătoare după numărul de vocale și să se afișeze fiecare cuvânt pe câte o linie. Dacă două cuvinte au același număr de vocale atunci ele se vor ordona descrescător după lungime, iar dacă au aceeași lungime atunci se vor ordona lexicografic.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură un șir de caractere.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran cuvintele din text, în ordinea cerută, câte unul pe linie.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>șirul va conține maximum <code>255</code> de caractere.</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595357296&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2693%2Fvocsortdesc&amp;flash=0&amp;wgl=1&amp;dt=1595357295898&amp;bpp=4&amp;bdt=215&amp;idt=124&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=979777081056&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595357296&amp;ga_hid=411521625&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1022&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066392&amp;oid=3&amp;pvsid=4350784377834377&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2584%2Finsertinvers&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=PBqrbRkTqe&amp;p=https%3A//www.pbinfo.ro&amp;dtd=136" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CIfHsIeB3-oCFbPAuwgdYNMGbw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">ana are mere</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">mere
ana
are</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <cstring>
using namespace std;

char m[260][260];

bool voc(char ch)
{
    return ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'I' || ch == 'i' || ch == 'o' || ch == 'O' || ch == 'u' || ch == 'U';
}

int nrvoc(char s[])
{
    int i = 0;
    int cnt = 0;
    while(s[i])
    {
        if(voc(s[i]))
            cnt++;
        i++;
    }
    return cnt;
}

int main()
{
    char s[256];
    cin.getline(s , 300);
    int i = 0 , cnt = 1 , j = 0;
    while(s[i]!='\0')
    {
        if(s[i]!=' ')
        {
            m[cnt][j]=s[i];
            j++;
        }
        if(s[i]==' ' &amp;&amp; s[i+1]!=' ')
            cnt++ , j=0;
        i++;
    }
    int v[101];
    for(int i = 1 ; i <= cnt ; ++i)
        v[i]=nrvoc(m[i]);
    for(int i = 1 ; i <= cnt ; ++i)
        for(int j = i + 1 ; j <= cnt ; ++j)
            if(v[j] > v[i])
                swap(m[j] , m[i]) , swap(v[j] , v[i]);
    for(int i = 1 ; i <= cnt ; ++i)
        for(int j = i + 1 ; j <= cnt ; ++j)
            if(strlen(m[j]) > strlen(m[i]) &amp;&amp; v[j]==v[i])
                swap(m[j] , m[i]);
    for(int i = 1 ; i <= cnt ; ++i)
        for(int j = i + 1 ; j <= cnt ; ++j)
            if(v[i] == v[j] &amp;&amp; strlen(m[i]) == strlen(m[j]) &amp;&amp; strcmp(m[i] , m[j])==1)
                swap(m[j] , m[i]);
    for(int i = 1 ; i <= cnt ; ++i)
        cout << m[i] << endl;
    return 0;
}</pre>
