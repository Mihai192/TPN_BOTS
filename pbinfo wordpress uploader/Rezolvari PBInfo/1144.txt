<p>Ca în mai toate poveștile, Făt-Frumos a căutat o Cosânzeană și a găsit-o, dar tatăl ei i-a cerut să-i paveze drumul de lungime <code>N</code> care leagă castelele sale. Dalele cu care va pava drumul au aceeași lățime (egală cu lățimea drumului) și lungimi numere naturale. Fiind un împărat cam sâcâit, acesta dorește ca pavarea să se facă folosind un număr minim de dale, diferența de lungime între două dale vecine să nu fie mai mare ca <code>1</code>, iar prima și ultima dală să fie de lungime <code>1</code>. Împăratul nu se mulțumește să primească de la Făt-Frumos doar un număr (numărul minim de dale necesare): el vrea și posibilitatea de pavare cea mai mică din punct de vedere lexicografic. </p>

<p>Compararea lexicografică a două șiruri de  numere este o extensie la numere a comparării alfabetice a două cuvinte. Astfel, fiind date două șiruri numerice de aceeași lungime, <code>A</code><sub><code>1</code></sub>, <code>A</code><sub><code>2</code></sub>, … <code>A</code><sub><code>m</code></sub> și <code>B</code><sub><code>1</code></sub>, <code>B</code><sub><code>2</code></sub>, … <code>B</code><sub><code>m</code></sub>, acestea sunt egale dacă și numai dacă <code>A</code><sub><code>i</code></sub><code> = B</code><sub><code>i</code></sub> pentru orice <code>i</code> de la <code>1</code> la <code>m</code>. Șirul <code>A</code> este mai mic lexicografic decât șirul <code>B</code> dacă există o valoare <code>k</code> astfel încât <code>A</code><sub><code>k</code></sub><code>  &lt;B</code><sub><code>k</code></sub> și <code>A</code><sub><code>i</code></sub><code>=B</code><sub><code>i</code></sub> pentru orice <code>i</code> de la <code>1</code> la <code>k-1</code>. De exemplu, șirul <code>3, 5, 4, 1</code> este mai mare lexicografic decât șirul <code>3, 5, 2, 9</code> pentru că prima poziție pe care valorile diferă este poziția <code>3</code> (<code>4&gt;2</code>), fără a mai conta valorile aflate după aceasta.</p>

<h1>Cerință</h1>

<p>Cunoscând lungimea drumului, determinați numărul minim de dale necesare pavării și posibilitatea de pavare cu număr minim de dale, care este cea mai mică din punct de vedere lexicografic.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>pavare1.in</code> conține pe prima linie un număr natural <code>V</code>. Linia a doua conține un număr natural <code>N</code> ce reprezintă lungimea drumului.</p>

<h1>Date de ieșire</h1>

<p>Dacă <code>V</code> va avea valoarea <code>1</code>, în fișierul <code>pavare1.out</code> se va scrie, pe prima linie, doar numărul minim de dale necesare pavării.</p>

<p>Dacă <code>V</code> va avea valoarea <code>2</code>, în fișierul <code>pavare1.out</code> se va scrie, pe prima linie, un șir de numere separate prin câte un spațiu, ce reprezintă soluția de pavare a drumului, folosind un număr minim de dale, care este cea mai mică din punct de vedere lexicografic.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>V</code> poate fi <code>1</code> sau <code>2</code></li>
	<li><code>1 ≤ N ≤ 1000 000 000</code></li>
	<li>Pentru 30% din punctaj <code>V = 1</code>.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>pavare1.in</code></p>

<pre contenteditable="true" editable="true">1
7</pre>

<p><code>pavare1.out</code></p>

<pre contenteditable="true" editable="true">5</pre>

<h1>Explicație</h1>

<p>Pentru drumul de lungime <code>7</code> sunt necesare <code>5</code> dale.</p>

<h1>Exemplul 2</h1>

<p><code>pavare1.in</code></p>

<pre contenteditable="true" editable="true">2
7</pre>

<p><code>pavare1.out</code></p>

<pre contenteditable="true" editable="true">1 1 2 2 1</pre>

<h1>Explicație</h1>

<p>Soluțiile cu număr minim de dale sunt: <code>(1 1 2 2 1)</code>, <code>(1 2 1 2 1)</code>, <code>(1 2 2 1 1)</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cmath>
using namespace std;
long long val , n , r , x;
ifstream cin("pavare1.in");
ofstream cout("pavare1.out");
int main()
{
    cin >> val >> x;
    r = (long long)((1 + sqrt(4*x))/2);
    if(x <= (r*(r-1) + r) )
    {
        if(val == 1) {cout << r * 2 - 1 << "\n" ; return 0;}
        if (x == r*(r-1))
        {
            for(int i = 1; i <= r - 1 ; i++) cout << i << " ";
            for(int i = r - 1 ; i >= 1 ; i--) cout << i << " ";
        }
        else
        {
            for(int i = 1 ; i <= (x - (r*(r-1))) ; i++)cout<<i<<" ";
            for(int i = (x - (r*(r-1))) ; i <= r - 1 ; i++) cout << i << " ";
            for(int i = r - 1 ; i >= 1 ; i--) cout << i << " ";
        }
    }
    else
    {
        if(val == 1) {cout << r * 2 << "\n" ; return 0;}
        long long k = x - (r*(r-1)) - r;
        for(int i = 1 ; i <= k ; i++) cout << i << " ";
        for(int i = k ; i <= r ; i++) cout << i << " ";
        for(int i = r - 1 ; i >= 1 ; i--) cout << i << " ";
    }
    return 0;
}</pre>
