<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector <int> G[102];
vector <int> H[102];
int n , m , x , y , S[101] , D[101] , c , cnt;
struct poz
{
    int i , j;
}M[501];

void dfs_succ(int v , int c)
{
    S[v] = c;
    for(int i : G[v])
        if(!S[i]) dfs_succ(i , c);
}

void dfs_pred(int v , int c)
{
    D[v] = c;
    for(int i : H[v])
        if(!D[i]) dfs_pred(i , c);
}

int comp(poz a , poz b)
{
    if(a.i < b.i) return 1;
    else if(a.i == b.i &amp;&amp; a.j < b.j) return 1;
    else return 0;
}

int main()
{
    cin >> n >> m;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> x >> y;
        G[x].push_back(y);
        H[y].push_back(x);
        M[i].i = x , M[i].j = y;
    }
    sort(M + 1 , M + m + 1 , comp);
    for(int i = 1 ; i <= n ; i++)
        if(!S[i])
        {
            c++;
            dfs_succ(i , c);
            dfs_pred(i , c);
            for(int i = 1 ; i <= n ; i++)
                if(S[i] != D[i]) S[i] = D[i] = 0;
        }
    for(int i = 1 ; i <= m ; i++)
        if(S[M[i].i] != S[M[i].j]) cnt++;

    cout << cnt << '\n';
    for(int i = 1 ; i <= m ; i++)
        if(S[M[i].i] != S[M[i].j]) cout << M[i].i << " " << M[i].j << '\n';
    
    return 0;

}</pre>
