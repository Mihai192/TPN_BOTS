<p>Se consideră <code>C</code> o coadă de numere naturale, iniţial vidă. Se definesc 2 tipuri de operaţii.</p>

<p>Operaţia <code>1</code> : <code>push X</code>, adaugă elementul <code>X</code> în coadă. Dacă <code>X</code> există deja în coadă, se scot toate elementele din coadă, pana la întâlnirea lui, inclusiv <code>X</code>.<br>
Exemplu: 
	<code>C: 2 4 5 1 6
	Push 5
	C: 1 6 5</code> ( s-au scos <code>2, 4, 5</code>).</p>

<p>Operaţia <code>2</code>: <code>query X</code>, cere afişarea poziţiei elementului <code>X</code> în coada <code>C</code>. Dacă elementul nu există în coadă, se afişează <code>-1</code>.<br>
Exemplu:
	<code>C: 2 5 1 3 7
	Query 1
	Răspuns: 3</code></p>

<h1>Cerința</h1>

<p>Dându-se <code>M</code>, reprezentând numărul de operaţii şi cele <code>M</code> operaţii, să se răspundă la operaţiile de tip <code>query</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>coada1.in</code> conține:<br>
</p><ul>
	<li>Pe prima linie numărul natural <code>M</code>;</li>
	<li>Pe următoarele <code>M</code> linii, câte un string şi câte un număr natural, de forma <code>tip_operaţie x</code>, reprezentând <code>tipul operaţiei</code> şi numărul <code>X</code>.</li><br>
</ul><p></p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>coada1.out</code> va conține:<br>
</p><ul>
	<li>Răspunsurile pentru operaţiile de tip <code>query</code>, câte unul pe linie.</li><br>
</ul><p></p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 &lt;= M &lt;= 50 000</code></li>
	<li><code>1 &lt;= X &lt;= 1 000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356657&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1598%2Fcoada1&amp;flash=0&amp;wgl=1&amp;dt=1595356657028&amp;bpp=25&amp;bdt=230&amp;idt=196&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=6947086183502&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356657&amp;ga_hid=762056919&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=32&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1358&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066522&amp;oid=3&amp;pvsid=852598537131110&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F867%2Fgenerare2-cu-coada&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=fYhvZksnyO&amp;p=https%3A//www.pbinfo.ro&amp;dtd=205" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CKPs49b-3uoCFRvKuwgd7iwEfg"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>coada1.in</code></p>

<pre contenteditable="true" editable="true">10
push 3
push 6
push 8
push 2
query 6
push 6
query 4
push 6
push 7
query 6</pre>


<p><code>coada1.out</code></p>

<pre contenteditable="true" editable="true">2
-1
1</pre>

<h3>Explicație</h3>

<p>Înaintea primei întrebări, coada arată asa: <code>3 6 8 2</code>, deci <code>6</code> apare pe poziţia <code>2</code>.<br>
Înaintea celei de-a doua întrebări, coada arată asa: <code>8 2 6</code>, deci <code>4</code> nu apare.<br>
Înaintea ultimei întrebări, coada arată asa: <code>6 7</code>, deci <code>6</code> apare pe poziţia <code>1</code>. </p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;
ifstream cin("coada1.in");
ofstream cout("coada1.out");
int f[1001];
queue<int>Q;
int main()
{
    int  c , x , sterse=0 , poz = 0;
    string s;
    cin >> c;
    for(int i = 1 ; i <= c ; i++)
    {
        cin >> s;
        cin >> x;
        if(s == "push")
        {
            if(f[x] != 0)
            {
                while(Q.front() != x)
                {
                    f[Q.front()] = 0;
                    Q.pop();
                    sterse++;
                }
                Q.pop();
                sterse++;
            }
            poz++;
            Q.push(x);
            f[x] = poz;
        }
        else
        {
            if(f[x] == 0) cout << -1 << '\n';
            else cout << f[x] - sterse<< '\n';
        }
    }
}</pre>
