<h1>Cerința</h1>

<p>Se dă un șir de paranteze rotunde care se închid corect (corect parantezat). Să se determine adâncimea parantezării.</p>

<p>Pentru un șir de paranteze închise corect <code>S</code>, adâncimea parantezării, <code>D(S)</code> este definită astfel:</p>

<ul>
	<li>dacă șirul <code>S</code> este vid, <code>D(S)=0</code></li>
	<li>dacă <code>S=(T)</code>, unde <code>T</code> este un șir de paranteze corect, <code>D(S)=1+D(T)</code></li>
	<li>dacă <code>S=AB</code>, unde <code>A</code> și <code>B</code> sunt șiruri de paranteze corecte, <code>D(S)=max{D(A),D(B)}</code></li>
</ul>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>paranteze2.in</code> conține pe prima un  șir de paranteze rotunde, corect parantezat.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>paranteze2.out</code> va conține pe prima linie un număr <code>M</code>, reprezentând adâncimea parantezării.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>șirul va conține cel mult <code>254</code> de paranteze</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356698&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F849%2Fparanteze2&amp;flash=0&amp;wgl=1&amp;dt=1595356698804&amp;bpp=17&amp;bdt=214&amp;idt=171&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=2242797298759&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356699&amp;ga_hid=1695586091&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=40&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1086&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21065724%2C21066716&amp;oid=3&amp;pvsid=42533714707776&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2645%2Fminlex&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=vxDdbrkomt&amp;p=https%3A//www.pbinfo.ro&amp;dtd=178" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CKK72er-3uoCFVPHuwgd0XILOA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>paranteze2.in</code></p>

<pre contenteditable="true" editable="true">()((()())())</pre>

<p><code>paranteze2.out</code></p>

<pre contenteditable="true" editable="true">3</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("paranteze2.in");
ofstream cout("paranteze2.out");

int main()
{
    char ch[300];
    cin >> ch;
    int v[300];
    int i = 0;
    int var=0;
    while(ch[i]!='\0')
    {
        if(ch[i]=='(')
            var++ , v[i]=var;
        else
            v[i]=var , var--;
        i++;
    }
    int max=0;
    for(int j = 0 ; j < i ; ++j)
        if(v[j]>max)
            max=v[j];
    cout << max;
    return 0;
}</pre>
