<h1>Cerința</h1>

<p>Se dau două șiruri de caractere formate din litere mici ale alfabetului englez. Să se afle dacă aceste șiruri sunt prietene. Un șir de caractere este prieten cu un alt șir de caractere dacă se poate obține din acesta prin inversarea, ori de câte ori, a caracterelor sale, cu mențiunea că nu se pot inversa între ele decât caractere de pe poziții cu aceeași paritate.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură două șiruri de caractere <code>a</code> și <code>b</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa pe ecran mesajul <code>PRIETENE</code>, dacă cele două șiruri <code>a</code> și <code>b</code> sunt prietene, respectiv mesajul <code>NU SUNT PRIETENE</code>, dacă cele două șiruri <code>a</code> și <code>b</code> nu sunt prietene.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>cele două șiruri au maxim <code>100</code> de caractere fiecare;</li>
	<li>pozițiile caracterelor în șir sunt numerotate începând cu <code>0</code>.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">rutina	naturi</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">PRIETENE</pre>

<h3>Explicație</h3>

<p>Șirul <code>naturi</code> se obține din <code>rutina</code> prin inversarea caracterelor de pe pozițiile pare: <code>0</code> și <code>4</code>, se obține <code>nutira</code>, apoi se inversează caracterele de pe pozițiile impare: <code>1</code> și <code>5</code>, se obține <code>natiru</code>, apoi caracterele de pe pozițiile impare <code>3</code> și <code>5</code> și se obține <code>naturi</code>.</p>

<h1>Exemplul 2:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">rutina	unitar</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">NU SUNT PRIETENE</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("cub.in");
ofstream cout("cub.out");

int exp(int n , int x)
{
    int c = 0;
    while(n % x == 0)
    {
        n /= x;
        c++;
    }
    return c;

}

int main()
{
    int n , c2 = 0 , c3 = 0 , c5 = 0 , f[1001] = {0} , x , c7 = 0;
    unsigned long long c = 0;
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> x;
        c2 = (c2 + exp(x , 2)) % 3;
        c3 = (c3 + exp(x , 3)) % 3;
        c5 = (c5 + exp(x , 5)) % 3;
        c7 = (c7 + exp(x , 7)) % 3;
        f[27*c2 + 9*c3 + 3*c5 + c7]++;
        //cout << 4*c2 + 2*c3 + c5 << endl;
    }
    c = f[0];
    for(int i = 0 ; i <= 80 ; i++)
        c = c + 1ll * f[i] * (f[i] - 1) / 2;
    cout << c;
}</pre>
