<h1>Cerința</h1>

<p>Un număr prim se numește <strong>trunchiabil-stânga</strong> dacă, prin eliminare repetată a primei cifre, toate numerele rezultate sunt prime.<br>
Se dă un număr natural, să se verifice dacă numărul este <strong>prim trunchiabil-stânga</strong>.</p>

<h1>Date de intrare</h1>

<p>Programul citește un număr natural nenul <code>n</code>.</p>

<h1>Date de ieșire</h1>

<p>Programul va afișa <code>DA</code> dacă <code>n</code> este <strong>prim trunchiabil-stânga</strong>, altfel va afișa <code>NU</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>n</code> este mai mic decât <code>1.000.000</code>.</li>
	<li>Cel mai mare prim trunchiabil-stânga este <code>357686312646216567629137</code>.</li>
</ul>

<h1>Exemplu 1:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">1223</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">DA</pre>

<h1>Exemplu 2:</h1>

<p><strong>Intrare</strong></p>

<pre contenteditable="true" editable="true">263</pre>

<p><strong>Ieșire</strong></p>

<pre contenteditable="true" editable="true">NU</pre>

<h3>Explicație</h3>

<p><strong>Exemplu 1:</strong> <code>1223</code> e prim. Eliminăm <strong>1</strong>, <code>223</code> e prim. Eliminăm <strong>2</strong>, <code>23</code> e prim. Eliminăm <strong>2</strong>, <code>3</code> e prim.<br>
Deci, numărul <code>1223</code> e prim trunchiabil-stânga.<br>
<strong>Exemplu 2:</strong> <code>263</code> e prim. Eliminăm <strong>2</strong>, dar <code>63</code> nu e prim.<br>
Deci, <code>263</code> nu e prim trunchiabil-stânga.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
using namespace std;

unsigned long long a;
bool ok = true;

int nrcif(unsigned long long a){
    int cnt = 0;
    while(a) cnt ++, a/=10;
    return cnt;
}

unsigned long long sterg(unsigned long long n){
    int a = nrcif(n);
    unsigned long long p = 1;
    while(a){
        p *= 10;
        a--;
    }
    p/=10;
    return n % p;
}

bool prim(unsigned long long n){
    unsigned long long cnt = 1;
    unsigned long long d = 2;
    while(n > 1){
        int p = 0;
        while(n % d == 0)
            n/=d, p++;
        cnt *= p + 1;
        if(cnt > 2)
            return 0;
        d++;
        if(d * d > n)
            d = n;
    }
    if(cnt == 2)
        return 1;
    return 0;
}

int main(){
    cin >> a;
    while(nrcif(a) > 1){
        if(!prim(a))
            ok = false;
        a = sterg(a);
    }
    if(!prim(a))
        ok = false;
    if(ok == true)
        cout << "DA";
    else
        cout << "NU";
    return 0;
}</pre>
