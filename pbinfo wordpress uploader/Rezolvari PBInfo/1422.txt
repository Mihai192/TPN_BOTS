<p>În ograda lui Gigel se găsesc găini și văcuțe. Se dau două numere naturale: <code>C</code> – numărul de capete și <code>P</code> – numărul de picioare din curte.</p>

<h1>Cerința</h1>

<p>1. Să se afișeze câte găini și câte văcuțe sunt în ograda lui Gigel.<br>
2. Maria, colega lui Gigel, îl provoacă pe acesta să calculeze numărul de divizori impari pentru numărul <code>C</code> și numărul de divizori pari pentru numărul <code>P</code>. Deoarece Gigel nu este bun la matematică, vă cere ajutorul. Să se afișeze cele două numere calculate.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>ograda.in</code> conține pe prima linie un număr natural <code>X</code> (<code>1</code> sau <code>2</code>) reprezentând numărul cerinței ce trebuie rezolvată.</p>

<p>A doua linie conține două numere <code>C</code> și <code>P</code>, separate printr-un spațiu, cu semnificațiile din cerință.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>ograda.out</code> va conține:<br>
Pentru cerința 1: pe prima linie se vor afișa două numere, separate printr-un spațiu, <code>G</code> și <code>V</code> reprezentând numărul de găini, respectiv numărul de văcuțe din ogradă.<br>
Pentru cerința 2: pe prima linie se vor afişa două numere, separate printr-un spațiu, reprezentând numărul de divizori impari pentru numărul <code>C</code> și numărul de divizori pari pentru numărul <code>P</code>.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>C</code> și <code>P</code> sunt numere naturale, <code>2*C</code> ≤ <code>P</code> ≤ <code>4*C</code>, iar <code>P</code> este un număr par.</li>
	<li>Pentru cerința 1: <code>C, P ≤ 200000000000</code></li>
	<li>Pentru cerința 2: <code>C, P ≤ 50000000</code></li>
	<li>Se consideră că toate găinile au <code>2</code> picioare și <code>1</code> cap, iar toate văcuțele au <code>4</code> picioare și <code>1</code> cap. Gigel nu se află în ogradă în momentul numărării capetelor și picioarelor.</li>
	<li><strong>Pentru X = 1 se va rezolva doar cerința 1. Pentru X = 2 se va rezolva doar cerința 2.</strong></li>
	<li><code>d</code> este divizorul lui <code>a</code> dacă restul împărţirii lui <code>a</code> la <code>d</code> este <code>0</code>.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>ograda.in</code></p>

<pre contenteditable="true" editable="true">1
5 16</pre>

<p><code>ograda.out</code></p>

<pre contenteditable="true" editable="true">2 3</pre>

<h3>Explicație</h3>

<p>Cerința este <code>1</code>. În ogradă sunt <code>2</code> găini și <code>3</code> văcuțe.</p>

<h1>Exemplul 2</h1>

<p><code>ograda.in</code></p>

<pre contenteditable="true" editable="true">2
5 16</pre>

<p><code>ograda.out</code></p>

<pre contenteditable="true" editable="true">2 4</pre>

<h3>Explicație</h3>

<p>Cerința este <code>2</code>. Numărul <code>5</code> are <code>2</code> divizori impari (<code>1</code> și <code>5</code>), iar numărul <code>16</code> are <code>4</code> divizori pari (<code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream fin("ograda.in");
ofstream fout("ograda.out");
int par(int n)
{
   int cnt = 0;
    for( unsigned long long  i = 1 ; i <= n ; ++i)
        {
            if(n % i == 0 &amp;&amp; i % 2 ==0) cnt++;
        }
        return cnt;
}
int impar(int n)
{
    int cnt = 0;
    for( unsigned long long  i = 1 ; i <=n ; ++i)
        {
            if(n % i == 0 &amp;&amp; i % 2 ==1) cnt++;
        }
        return cnt;
}
int main()
{
    unsigned long long c , p , g , v , cntc = 0 , cntp = 0 , x;
    fin >> x >> c >> p;
    g = (c * 4 - p) / 2;
    v =(p - c * 2) / 2;
    if(x == 1) fout << g << " " <<v;
    else if(x == 2)
    {
       fout << impar(c) << " " << par(p);
    }

    fin.close();
    fout.close();

    return 0;
}</pre>
