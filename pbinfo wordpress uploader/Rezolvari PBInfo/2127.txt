<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

ifstream cin("ninjago.in");
ofstream cout("ninjago.out");

int n , m , x , y , cer , cost , v[31205] , T[31205] , cnt , nrm;
vector <int> G[31205];
vector <pair<int , int>> GR[31205];
char a , b , c , d;

struct poz
{
    int i , j , w , areE;
}M[31205];
poz A[31205];

void dfs(int nod)
{
    v[nod] = 1;
    for(auto i : G[nod])
        if(!v[i]) v[i] = 1 , dfs(i);
}

bool comp(poz a , poz b)
{
    return a.w < b.w;
}

int radacina(int a)
{
    if(a == T[a]) return a;
    else return T[a] = radacina(T[a]);
}

int leaga(int a , int b)
{
    if(T[a] > T[b]) T[a] = T[b];
    else T[b] = T[a];
}

void kruskal()
{
    int r1 , r2;
    for(int i = 1 ; i <= m ; i++)
    {
        r1 = radacina(M[i].i);
        r2 = radacina(M[i].j);
        if(r1 != r2)
        {
            nrm++;
            A[nrm] = M[i];
            leaga(r1 , r2);
        }
    }
}

int main()
{
    cin >> cer >> n >> m;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> M[i].i >> M[i].j >> a >> b >> c >> d;
        cost = 0;
        if(a != 'E' &amp;&amp; b != 'E' &amp;&amp; c != 'E' &amp;&amp; d != 'E')
        {
            G[M[i].i].push_back(M[i].j);
            G[M[i].j].push_back(M[i].i);
            cost = (a - 'A' + 1) + 5 * (b - 'A' + 1) + 25 * (c - 'A' + 1) + 125 * (d - 'A' + 1);
            M[i].areE = 0;
        }
        else
        {
            if(a != 'E')
                cost += (a - 'A' + 1);
            if(b != 'E')
                cost += 5 * (b - 'A' + 1);
            if(c != 'E')
                cost += 25 * (c - 'A' + 1);
            if(d != 'E')
                cost += 125 * (d - 'A' + 1);
            int nr = 0;
            if(a == 'E') nr++;if(b == 'E') nr++;if(c == 'E') nr++;if(d == 'E') nr++;
            M[i].areE = nr;
            cost += 1000 * nr;
        }
        M[i].w = cost;
    }
    if(cer == 1)
    {
        dfs(1);
        int cnt = 0;
        for(int i = 1 ; i <= n ; i++)
            if(v[i] != 0) cnt++;
        cout << cnt;
    }
    else
    {
        for(int i = 1 ; i <= n ; i++)
            T[i] = i;
        sort(M + 1 , M + m + 1 , comp);
        
        kruskal();
        
        int p = 0 , sum = 0 , cateE = 0;;
        for(int i = 1 ; i <= nrm ; i++)
        {
            if(A[i].areE > 0) p++ , cateE += A[i].areE;
            sum += A[i].w - A[i].areE * 1000;
        }
        
        if(cer == 2) cout << p << '\n' << cateE;
        else cout << sum;
    }
}</pre>
