<h1>Cerința</h1>

<p>Se consideră un număr natural <code>k</code> și două tablouri unidimensionale <code>A</code> și <code>B</code>, cu <code>n</code> respectiv <code>m</code> elemente, numere întregi, sortate crescător. Să se afișeze primele <code>k</code> perechi de numere de sumă minimă. Fiecare pereche conține un număr din <code>A</code>, un număr din <code>B</code>.  </p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>kminsum.in</code> conține pe prima linie trei numere naturale <code>n</code>, <code>m</code> și <code>k</code> având semnificația din enunț.<br>
Pe a doua linie se găsesc <code>n</code> numere naturale separate prin spații ce reprezintă elementele tabloului <code>A</code>.<br>
Pe a treia linie se găsesc <code>m</code> numere naturale separate prin spații ce reprezintă elementele tabloului <code>B</code>.</p>


<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>kminsum.out</code> va conține <code>k</code> linii. Fiecare linie conține două numere întregi separate prin spațiu ce reprezintă descrierea unei perechi (un număr din <code>A</code>, un număr din <code>B</code>)..</p>


<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n, m ≤ 1000</code></li>
	<li><code>1 ≤ k ≤ 20000</code></li>
	<li>valorile elementelor celor două tablouri vor aparține intervalului <code>[-1.000.000,1.000.000]</code></li>
	<li>ordinea de afișare a celor <code>k</code> perechi nu contează</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=1958414068&amp;w=728&amp;lmt=1595360920&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2087%2Fkminsum&amp;flash=0&amp;wgl=1&amp;dt=1595360920633&amp;bpp=22&amp;bdt=189&amp;idt=179&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=6509209364616&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595360921&amp;ga_hid=1006578067&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1132&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;eid=21066358%2C21066393%2C21066623&amp;oid=3&amp;pvsid=1051993790965534&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2253%2Fvacantadevara&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=OcGMCA6Xs4&amp;p=https%3A//www.pbinfo.ro&amp;dtd=185" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPXt5ceO3-oCFXLHuwgdAPAMCw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>kminsum.in</code></p>

<pre contenteditable="true" editable="true">5 3 4
1 2 3 4 5
2 3 6</pre>

<p><code>kminsum.out</code></p>

<pre contenteditable="true" editable="true">1 2
1 3
2 2
2 3</pre>


<h3>Explicație</h3>

<p>Tablou <code>A</code> conține <code>5</code> numere sortate crescător, tablou <code>B</code> conține <code>3</code> numere sortate crescător. Se pot forma <code>5•3</code> perechi. Primele <code>4</code> perechi corect formate de sumă minimă sunt: <code>1 2</code>, <code>1 3</code>, <code>2 2</code>, <code>2 3</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <bits/stdc++.h>
using namespace std;

ifstream fin("kminsum.in");
ofstream fout("kminsum.out");

int n, m, k, a[1001], b[1001];

void cmmp(int arr1[], int n1, int arr2[],int n2, int k)
{
    int index2[n1];
    memset(index2, 0, sizeof(index2));
    while (k > 0)
    {
        int min_sum = INT_MAX;
        int min_index = 0;
        for (int i1 = 0; i1 < n1; i1++)
        {
            if (index2[i1]<n2 &amp;&amp; arr1[i1]+arr2[index2[i1]]<min_sum)
            {
                min_index = i1;
                min_sum = arr1[i1] + arr2[index2[i1]];
            }
        }
        fout<<arr1[min_index]<<" "<<arr2[index2[min_index]]<<'\n';
        index2[min_index]++;
        k--;
    }
}
int main()
{
    int i;
    fin>>n>>m>>k;
    for(i=0;i<n;i++)
        fin>>a[i];
    for(i=0;i<m;i++)
        fin>>b[i];
    cmmp(a,n,b,m,k);
    return 0;
}</pre>
