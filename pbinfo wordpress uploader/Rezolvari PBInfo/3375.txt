<p>Vasilică vizitează cetățile medievale. Fiind curios, el încearcă să descopere pasajele secrete și ascunzătorile. Din nefericire, s-a rătăcit și a ajuns într-o sală din care nu poate ieși decât trecând printr-un labirint. Există o hartă a labirintului, o matrice de <code>n</code> linii și <code>m</code> coloane, un element din această matrice reprezentând o cameră. Deplasarea în labirint se poate face numai prin camerele adiacente pe orizontală și verticală. Intrările în labirint sunt notate cu <code>A</code>, ieșirile cu <code>C</code>, iar camerele zidite (inaccesibile) cu <code>Z</code>. Ieșirea din labirint se poate face din una din camerele C, în fiecare astfel de cameră existând câte un elicopter încuiat. Toate elicopterele se deschid cu aceeași cheie, câte un exemplar al cheii aflându-se în camerele <code>B</code>. Trecerea în altă cameră va dura <code>1</code> unitate de timp. Pentru a ieși din labirint Vasilică intră pe una din intrările notate cu <code>A</code>, ia cheia dintr-o cameră <code>B</code> și iese din labirint printr-o cameră <code>C</code>. El va intra în camera <code>A</code> la timpul <code>1</code>. Camerele de tip <code>A</code> pot fi situate oriunde pe hartă. În drumul de la o cameră de tip <code>A</code> către o cameră de tip <code>B</code> se poate trece printr-o cameră de tip <code>C</code> fără a se ieși din labirint.</p>

<h1>Cerința</h1>

<p>Ajutați-l pe Vasilică să iasă cât mai repede din labirint.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>labirint.in</code> conține pe prima linie numărul <code>n</code> de linii şi numărul <code>m</code> de coloane ale hărții, iar pe următoarele <code>n</code> linii, câte <code>m</code> caractere, reprezentând elementele acesteia. Caracterele pot fi <code>_</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>Z</code> cu semnificația din text. <code>_</code> reprezintă o cameră fără restricții (liberă).</p>

<h1>Date de ieșire</h1>

<p>Pe prima linie a fişierului de ieşire labirint.out se va scrie numărul ce reprezintă timpul cel mai scurt în care Vasilică poate să iasă din labirint.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤  n, m  ≤ 1000</code></li>
	<li>întotdeauna există un drum de ieșire</li>
	<li>operația de luare a cheii sau a elicopterului dintr-o cameră nu consumă timp</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=872686288&amp;w=728&amp;lmt=1595353607&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3375%2Flabirint3&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595353607788&amp;bpp=14&amp;bdt=215&amp;idt=204&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=4518285820292&amp;frm=20&amp;pv=1&amp;ga_vid=1744050990.1595352838&amp;ga_sid=1595353608&amp;ga_hid=1918675300&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=814&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1392&amp;biw=1200&amp;bih=647&amp;scr_x=0&amp;scr_y=0&amp;eid=21066005&amp;oid=3&amp;pvsid=2837869573720240&amp;pem=168&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1168%2Ffadaugarelalista&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C770%2C1200%2C647&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=2&amp;fsb=1&amp;xpc=J3t3BbRx1W&amp;p=https%3A//www.pbinfo.ro&amp;dtd=213" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CLbK5qjz3uoCFU0Q5godwtIO-w"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>labirint.in</code></p>

<pre contenteditable="true" editable="true">5 6
ZA____
A__Z__
A_C__B
C___Z_
___B_Z</pre>

<p><code>labirint.out</code></p>

<pre contenteditable="true" editable="true">9</pre>

<h3>Explicație</h3>

<p>Timpul cel mai scurt în care Vasilică poate să iasă din labirint este de <code>9</code> unități și avem două variante: plecăm din <code>A(3,1)</code> la timpul <code>1</code> și ajungem în <code>B(3,6)</code> sau în <code>B(5,4)</code> la timpul <code>6</code> (luăm cheia) și ieșim prin <code>C(3,3)</code> la timpul <code>9</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

# define inf 1000000001

ifstream cin("labirint.in");
ofstream cout("labirint.out");

char mat[1001][1001], ch;
int n, m, a[1001][1001];
queue<pair<int, int>> Q;

bool inmat(int i, int j){
    return i >= 1 &amp;&amp; j >= 1 &amp;&amp; i <= n &amp;&amp; j <= m;
}

int di[]={0,0,-1,1};
int dj[]={-1,1,0,0};

void lee(){
    while(!Q.empty()){
        pair<int, int> p;
        p = Q.front();
        for(int d = 0; d <= 3; ++d){
            int inou = p.first + di[d];
            int jnou = p.second + dj[d];
            if(inmat(inou, jnou) &amp;&amp; a[inou][jnou] != -1 &amp;&amp; a[inou][jnou] > a[p.first][p.second] + 1)
                a[inou][jnou] = a[p.first][p.second] + 1, Q.push(make_pair(inou, jnou));
        }
        Q.pop();
    }
}

int main(){
    cin >> n >> m;
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            cin >> ch, mat[i][j] = ch;
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j){
            if(mat[i][j] == 'Z')
                a[i][j] = -1;
            else if(mat[i][j] == 'A')
                Q.push(make_pair(i, j));
            else
                a[i][j] = inf;
        }
    lee();
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j){
            if(mat[i][j] == 'Z')
                a[i][j] = -1;
            else if(mat[i][j] == 'B')
                Q.push(make_pair(i, j));
            else
                a[i][j] = inf;
        }
    lee();
    int mini = 1000000000;
    for(int i = 1; i <= n; ++i)
    for(int j = 1; j <= m; ++j){
        if(mat[i][j] == 'C' &amp;&amp; a[i][j] < mini)
            mini = a[i][j];
    }
    cout << mini + 1;
    return 0;
}</pre>
