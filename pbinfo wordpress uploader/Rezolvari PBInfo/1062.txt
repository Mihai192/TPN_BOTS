<p>Lizuca are <code>n</code> flori ornamentale de înălţimi <code>h</code><sub><code>1</code></sub>, <code>h</code><sub><code>2</code></sub>, …, <code>h</code><sub><code>n</code></sub>, exprimate în centimetri. Pentru a uda plantele, Lizuca stabileşte  următorul program: în prima zi va alege o plantă pe care o va uda, în a doua zi va alege două plante pe care le va uda,  în ziua a treia va alege trei plante pe care le va uda şi aşa mai departe. Dacă o plantă este udată într-o anumită zi, atunci creşte <code>1</code> centimetru până la sfârşitul acelei zile, iar dacă nu este udată, rămâne la înălţimea pe care o avea la sfârşitul zilei precedente. </p>

<h1>Cerinţa</h1>

<p>Scrieţi un program care determină:</p>

<p>a) un număr natural <code>S</code>, exprimat în centimetri, reprezentând suma înălţimilor finale ale tuturor plantelor, dacă Lizuca le-ar uda după procedeul descris, timp de <code>n</code> zile;<br>
b) un număr natural <code>K</code>, reprezentând numărul maxim de zile în care Lizuca poate uda florile după procedeul descris anterior, astfel ca la sfârşitul celei de a <code>K</code>-a zi, nicio plantă ornamentală să nu atingă înălţimea <code>H</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>flori1.in</code> conține pe prima linie două numere naturale <code>n</code> şi <code>H</code>, separate printr-un spaţiu, având semnificaţia din enunţ. Linia a doua conţine n numere naturale: <code>h</code><sub><code>1</code></sub>, <code>h</code><sub><code>2</code></sub>, …, <code>h</code><sub><code>n</code></sub>, separate prin câte un singur spaţiu, reprezentând înălţimile iniţiale ale plantelor.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>flori1.out</code> va conține pe prima linie un număr natural <code>S</code> având semnificaţia descrisă în cerinţa a). </p>

<p>A doua linie va conţine un număr natural <code>K</code>, având semnificaţia descrisă în cerinţa b).</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N, H ≤ 100</code></li>
	<li><code>1 ≤ h</code><sub><code>1</code></sub><code>, h</code><sub><code>2</code></sub><code>, ... h</code><sub><code>n</code></sub><code> &lt; H</code></li>
	<li>O plantă poate fi udată o singură dată pe zi.</li>
	<li>Pentru rezolvarea corectă a cerinţei a) se acordă 30 % din punctajul total pentru fiecare test.</li>
	<li>Pentru rezolvarea corectă a cerinţei b) se acordă 70 % din punctajul total pentru fiecare test.</li>
</ul>

<h1>Exemplul 1</h1>

<p><code>flori1.in</code></p>

<pre contenteditable="true" editable="true">3 4
2 1 1</pre>

<p><code>flori1.out</code></p>

<pre contenteditable="true" editable="true">10
2</pre>

<h1>Explicație</h1>

<p>Dacă în prima zi se udă planta  <code>3</code>, atunci înălţimile devin: <code>2 1 2</code><br>
Dacă în a doua zi se udă plantele <code>1</code> şi <code>2</code>, atunci  înălţimile devin: <code>3 2 2</code><br>
Procedeul se opreşte aici, deoarece în ziua a treia, ar trebui să se ude toate plantele, iar planta <code>1</code> ar ajunge să aibă înălţimea <code>4</code></p>


<h1>Exemplul 2</h1>

<p><code>flori1.in</code></p>

<pre contenteditable="true" editable="true">4 5
1 3 2 1</pre>

<p><code>flori1.out</code></p>

<pre contenteditable="true" editable="true">17
3</pre>

<h1>Explicație</h1>

<p>Dacă în prima zi se udă planta <code>1</code>, atunci înălţimile devin: <code>2 3 2 1</code><br>
Dacă în a doua zi se udă plantele <code>1</code> şi <code>4</code>, atunci  înălţimile devin: <code>3 3 2 2</code><br>
Dacă în a treia zi se udă plantele <code>1</code>, <code>3</code> şi <code>4</code>, atunci  înălţimile devin: <code>4 3 3 3</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;
ifstream cin("flori1.in");
ofstream cout("flori1.out");
int n , k , h , a[101] , sum , ok;
int main()
{
    cin >> n >> h;
    for(int i = 0 ; i < n ; ++i)
    {
        cin >> a[i];
        sum += a[i];
    }
    sum += n * (n + 1) / 2;
    while(ok == 0)
    {
        sort(a , a + n);
        for(int i = 0; i <= k &amp;&amp; ok == 0 ; ++i)
            if(a[i] + 1 >= h) ok = 1;
        if(ok == 0)
        {
            for(int i = 0; i <= k ; ++i) a[i]++;
            k++;
        }
    }
    cout << sum << '\n' << k;
    return 0;
}</pre>
