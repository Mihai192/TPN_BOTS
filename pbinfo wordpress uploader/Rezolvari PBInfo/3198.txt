<p>Programul de mai jos citește din fișierul <code>input.txt</code> un vector de elemente întregi și construiește în memorie (apoi scrie în fișierul <code>output.txt</code>) un vector care conține aceleași elemente, doar că având toate elementele egale cu 0 la final. Ordinea celorlalte elemente se păstrează.<br>
Programul dă întotdeuna rezultatul corect, însă este ineficient din punctul de vedere al timpului de execuție.</p>

<h1>Cerința</h1>

<p>Rolul vostru este acela de a optimiza programul, astfel încât acesta să se execute în limita de timp indicată în enunț, pentru un vector de cel mult 1 milion de elemente. Limita de memorie trebuie, de asemenea, respectată. În acest sens, este permisă modificarea (oricât de radicală) a funcției <code>nule</code>. Orice modificare în afara corpului acestei funcții va conduce la respingerea soluței.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>input.txt</code> conține pe prima linie numărul <code>n</code>, iar pe a doua linie <code>n</code> numere naturale separate prin spații.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>output.txt</code> va conține pe prima linie numărul <code>n</code>, iar pe a doua linie elementele vectorului generat.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1.000.000</code></li>
</ul>

<h1>Important</h1>

<p>Soluţia propusă va conţine doar definiţia funcţiei cerute. Prezenţa în soluţie a altor instrucţiuni poate duce la erori de compilare sau de execuţie care vor avea ca efect depunctarea soluţiei.</p>

<pre contenteditable="true" editable="true">void nule(std::vector&lt;int&gt; &amp;v)
{
...
}</pre>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595358142&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F3198%2Foptimize&amp;flash=0&amp;wgl=1&amp;adsid=NT&amp;dt=1595358142802&amp;bpp=4&amp;bdt=219&amp;idt=149&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5636739522130&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595358143&amp;ga_hid=1922568755&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1408&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=1658679842693091&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F820%2Ffactorialrec&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=rIJdBXV6xU&amp;p=https%3A//www.pbinfo.ro&amp;dtd=155" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CPbbnZuE3-oCFQ7BuwgddL0OFA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>input.txt</code></p>

<pre contenteditable="true" editable="true">10
0 3 8 0 0 3 8 7 0 10</pre>

<p><code>output.txt</code></p>

<pre contenteditable="true" editable="true">10
3 8 3 8 7 10 0 0 0 0</pre>

<h1>Codul programului</h1>

<pre contenteditable="true" editable="true">/*
    Acadnet 2017 - Etapa Interjudeteana
    Problema A - Optimize Nule
*/
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
#include &lt;stdlib.h&gt;
#define INPUT_FILENAME "input.txt"
#define OUTPUT_FILENAME "output.txt"
/*
    Aceasta este singura functie pe care aveti
    voie sa o modificati / rescrieti.
*/
void nule(std::vector&lt;int&gt; &amp;v)
{
    int i, j, aux, size = v.size();
    bool swaped;
    for(i = 0; i &lt; size - 1; i++) {
        swaped = false;
        for(j = 0; j &lt; size - i - 1; j++) {
            if(v[j] == 0) {
                aux = v[j];
                v[j] = v[j+1];
                v[j+1] = aux;
                swaped = true;
            }
        }
        if(!swaped)
            break;
    }
}
int main(void)
{
    std::vector&lt;int&gt; v;
    int size, i, x;
    std::ifstream input_file;
    std::ofstream output_file;
    // Read vector from input file
    input_file.open(INPUT_FILENAME);
    if(!input_file.good()) {
        std::cout &lt;&lt; "Failed to open " &lt;&lt; INPUT_FILENAME &lt;&lt; std::endl;
        exit(-1);
    }
    input_file &gt;&gt; size;
    v.reserve(size);
    for(i = 0; i &lt; size; i++) {
        input_file &gt;&gt; x;
        v.push_back(x);
    }
    input_file.close();
    // Call nule() function
    nule(v);
    // Print vector to output file
    output_file.open(OUTPUT_FILENAME);
    if(!output_file.good()) {
        std::cout &lt;&lt; "Failed to open " &lt;&lt; OUTPUT_FILENAME &lt;&lt; std::endl;
        exit(-1);
    }
    output_file &lt;&lt; size &lt;&lt; std::endl;
    for(i = 0; i &lt; size; i++)
        output_file &lt;&lt; v[i] &lt;&lt; " ";
    output_file &lt;&lt; std::endl;
    output_file.close();
    return 0;
}</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">void nule(std::vector<int> &amp;v)
{
    int n = v.size();
    int poz = 0;
    for(int i = 0; i < n; ++i)
        if(v[i] != 0)
            v[poz] = v[i], poz++;
    for(int i = poz; i < n; ++i)
        v[i] = 0;
}</pre>
