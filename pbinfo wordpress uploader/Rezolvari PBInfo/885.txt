<h1>Cerința</h1>

<p>Harta unei galaxii îndepărtate are forma unei matrice cu <code>n</code> linii și <code>m</code> coloane, în care fiecare element corespunde unei planete. Unele planete sunt locuibile, altele sunt afectate de radiații nucleare și nu pot fi locuite. Deplasarea prin galaxie se poate face doar de la o planetă la alta, cu condiția să fie ambele locuibile și să se învecineze pe linie sau pe coloană (teleportarea și zborul hiperluminic nu au fost încă inventate).</p>

<p>În această galaxie există patru imperii, având ca nume litere mari diferite ale alfabetului englez, iar capitalele lor sunt situate în cele patru colțuri ale matricei. Ele își dispută din cele mai vechi timpuri controlul planetelor locuibile din galaxie, dar acum au ajuns la un acord: fiecare imperiu va controla planetele locuibile situate față de el la o distanță mai mică decât față de celelalte trei imperii. Dacă o planetă se află la aceeași distanță minimă față de două sau mai multe imperii, ea va rămâne necontrolată de niciun imperiu. Planetele nelocuibile nu fac parte din niciun imperiu. Prin distanța dintre două planete se înțelege distanța minimă dintre ele.</p>

<p>Afișați harta galaxiei în care planetele sunt marcate în conformitate cu imperiul care le controlează.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>imperii.in</code> conține pe prima linie numerele <code>n m</code>. Urmează <code>n</code> linii cu câte <code>m</code> caractere, reprezentând harta imperiului. Caracterele pot fi: <code>-</code>, pentru o planetă locuibilă, <code>#</code>, pentru o planetă nelocuibilă, respectiv patru litere mari distincte ale alfabetului englez, pentru cele patru imperii.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>imperii.out</code> va conține <code>n</code> linii, fiecare cu câte <code>m</code> caractere, reprezentând harta imperiului, în care planetele controlate de un anumit imperiu sunt marcate cu litera corespunzătoare acestuia.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ n , m ≤ 1000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595356569&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F885%2Fimperii&amp;flash=0&amp;wgl=1&amp;dt=1595356569498&amp;bpp=8&amp;bdt=556&amp;idt=167&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280&amp;correlator=5942874070332&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595356570&amp;ga_hid=1161513618&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=16&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1240&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=2465441548592371&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F1871%2Fubuph&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=1GhFd79XoU&amp;p=https%3A//www.pbinfo.ro&amp;dtd=175" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="COOwg63-3uoCFXrhuwgdntgGDw"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>imperii.in</code></p>

<pre contenteditable="true" editable="true">5 7 
D-#---Y
-------
##--#--
--#---#
M-----A</pre>

<p><code>imperii.out</code></p>

<pre contenteditable="true" editable="true">DD#YYYY
DDD-YYY
##D-#-Y
MM#-AA#
MMM-AAA</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

ifstream cin("imperii.in");
ofstream cout("imperii.out");

#define Inf 100000001
#define Max 1001

struct poz
{
    int i , j;
};

const int di[] = {-1 , 1 , 0 ,  0};
const int dj[] = {0 ,  0 ,  -1 , 1};

queue< pair<int, poz> > Q;
int n , m;
int d1[Max][Max], d2[Max][Max], d3[Max][Max], d4[Max][Max];
bool a[Max][Max];

int inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <=m;
}

void Lee(int i , int j, int d[][Max])
{
    poz x;
    x.i = i;
    x.j = j;

    Q.push(make_pair(0, x));
    while(!Q.empty())
    {
        x = Q.front().second;

        if (Q.front().first < d[x.i][x.j])
            continue;

        for(int i = 0 ; i < 4 ; i++)
        {
            int inou = x.i + di[i];
            int jnou = x.j + dj[i];
            if(inside(inou , jnou) &amp;&amp; (d[inou][jnou] > d[x.i][x.j] + 1 || d[inou][jnou] == 0) &amp;&amp; a[inou][jnou] != 1)
            {
                poz y;
                y.i = inou;
                y.j = jnou;
                d[inou][jnou] = d[x.i][x.j] + 1;
                Q.push(make_pair(d[inou][jnou], y));
            }
        }
        Q.pop();
    }
    d[i][j] = 0;
}
int main()
{
    char c, c1, c2, c3, c4;

    cin >> n >> m;
    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= m; j ++)
        {
            cin >> c;
            if (c == '#')a[i][j] = 1;

            if (i == 1 &amp;&amp; j == 1)c1 = c;
            if (i == 1 &amp;&amp; j == m)c2 = c;
            if (i == n &amp;&amp; j == 1)c3 = c;
            if (i == n &amp;&amp; j == m)c4 = c;
        }

    Lee(1, 1, d1);
    Lee(1, m, d2);
    Lee(n, 1, d3);
    Lee(n, m, d4);

    for (int i = 1; i <= n; i ++)
    {
        for (int j = 1; j <= m; j ++)
        {
            if (a[i][j])cout <<'#';
            else if (d1[i][j] < d2[i][j] &amp;&amp; d1[i][j] < d3[i][j] &amp;&amp; d1[i][j] < d4[i][j])cout << c1;
            else if (d2[i][j] < d1[i][j] &amp;&amp; d2[i][j] < d3[i][j] &amp;&amp; d2[i][j] < d4[i][j])cout << c2;
            else if (d3[i][j] < d2[i][j] &amp;&amp; d3[i][j] < d1[i][j] &amp;&amp; d3[i][j] < d4[i][j])cout << c3;
            else if (d4[i][j] < d2[i][j] &amp;&amp; d4[i][j] < d1[i][j] &amp;&amp; d4[i][j] < d3[i][j])cout << c4;
            else cout << '-';
        }
        cout << '\n';
    }
}</pre>
