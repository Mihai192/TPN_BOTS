<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

ifstream cin("mere.in");
ofstream cout("mere.out");

int n , x , y , m[1001] , p , d[1001] , v[1001] , sum , maxi , imax;
vector <int> G[1001];

void bfs(int s)
{
    queue <int> Q;
    v[s] = 1;
    d[s] = 1;
    sum += m[s];
    Q.push(s);
    while(!Q.empty())
    {
        int x = Q.front();
        maxi = 0 , imax = 0;
        for(int i : G[x])
            if(!v[i] &amp;&amp; m[i] > maxi)
            {
                maxi = m[i];
                imax = i;
            }
        if(maxi != 0)
        {
            Q.push(imax);
            sum += maxi;
            v[imax] = 1;
        }
        Q.pop();
    }
}


int main()
{
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> m[i];
    for(int i = 1 ; i < n ; i++)
    {
        cin >> x >> y;
        G[x].push_back(y);
        G[y].push_back(x);
    }
    for(int i = 1 ; i <= n ; i++)
        sort(G[i].begin() , G[i].end());
    bfs(1);
    cout << sum;
}</pre>
