<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int n , m , s , x , y , v[101] , d[101] , p , cnt , sg[101] , k , vi , q , rez[1001];
vector <int> G[101];

void bfs(int s , int q)
{
    queue <int>Q;
    Q.push(s);
    v[s] = 1;
    d[s] = 1;
    while(!Q.empty())
    {
        int x = Q.front();
        Q.pop();
        for(int i : G[x])
            if(!v[i] &amp;&amp; (sg[i] || i == q))
            {
                d[i] = d[x] + 1;
                Q.push(i);
                v[i] = 1;
            }
    }
}

int main()
{
    cin >> n >> m >> k >> vi;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> x >> y;
        G[x].push_back(y);
    }

    for(int i = 1 ; i <= k ; i++)
    {
        cin >> x;
        sg[x] = 1;
    }

    for(int i = 1 ; i <= vi ; i++)
    {
        for(int j = 1 ; j <= n ; j++)
                d[j] = v[j] = 0;
        cin >> p >> q;
        bfs(p , q);
        if(v[q] > 0) rez[++cnt] = 1;
        else rez[++cnt] = 0;
    }

    for(int i = 1 ; i <= cnt; i++)
        if(rez[i] == 1) cout << "DA" << '\n';
    else cout << "NU" << '\n';

}</pre>
