<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
using namespace std;

ifstream cin("anarhie.in");
ofstream cout("anarhie.out");

int n , m , p , q , x , y , r , k , X[12] , P[101] , S[101] , A[101][101] , mini = 999999999 , s;

int dfs(int c)
{
    P[c] = 1;
    for(int i = 1 ; i <= n ; i++)
        if(!P[i] &amp;&amp; S[A[c][i]] &amp;&amp; A[c][i])
            dfs(i);
}

int verif(int k)
{
    for(int i = 1 ; i <= n ; i++)
        S[i] = P[i] = 0;

    for(int i = 1 ; i <= k ; i++)
        S[X[i]] = 1;

    dfs(p);
    return P[q];
}

void back(int k)
{
    for(int i = X[k - 1] + 1 ; i <= s ; i++)
    {
        X[k] = i;
        if(verif(k))
            if(k < mini) mini = k;
        back(k + 1);
    }
}

int main()
{
    cin >> n >> m >> s;
    cin >> p >> q;
    for(int i = 1 ; i <= m ; i++)
    {
        cin >> x >> y >> r;
        A[x][y] = r;
    }
    back(1);
    cout << mini;
}</pre>
