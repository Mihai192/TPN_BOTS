<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#define INF 0x3f3f3f3f
using namespace std;

ifstream cin("pm.in");
ofstream cout("pm.out");

int n , m , x , timp[105] , dist[105] , cost[105] , v[105];
vector <int> G[105];

int dfs(int node)
{
    if(dist[node] != 0) return dist[node];
    for(auto i : G[node])
        dist[node] = max(dist[node], dfs(i));

    dist[node] += cost[node];
    return dist[node];
}

void dfs2( int node, int val)
{
    if(timp[node] > val) timp[node] = val;
    for(auto i : G[node])
    {
        if(timp[i] > timp[node] - cost[i])
        dfs2(i , timp[node] - cost[i]);
    }
}

int main()
{
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> cost[i];
    for(int i = 1 ; i <= n ; i++)
    {
        cin >> m;
        for(int j = 1 ; j <= m ; j++)
        {
            cin >> x;
            G[i].push_back(x);
            v[x] = 1;
        }
    }

    for(int i = 1 ; i <= n ; i++)
      if(!v[i]) G[n + 1].push_back(i);

    dfs(n + 1);
    cout << dist[n + 1] << '\n';

    for(int i = 1 ; i <= n + 1 ; i++)
        timp[i] = INF;

    dfs2(n + 1, dist[n + 1]);

    for(int i = 1 ; i <= n ; i++)
        cout << dist[i] - cost[i] << " " << timp[i] << '\n';
    return 0;
}</pre>
