<p>Călin a primit de la învățătorul lui un exerciţiu pentru a-i testa atenția și rapiditatea. Având un șir de caractere, litere ale alfabetului englez și un cuvânt, Călin trebuie să afle care este prima anagramă (un cuvânt <code>c1</code> este anagramă pentru alt cuvânt <code>c2</code> dacă schimbând ordinea literelor lui <code>c1</code> se obține <code>c2</code>) a cuvântului în șir  și câte  anagrame sunt. Călin, fiind pasionat de informatică dorește să rezolve această problemă printr-un program.</p>

<h1>Cerința</h1>

<p>Cunoscând șirul de caractere și cuvântul se cere:</p>

<p>a) să se afișeze prima anagramă a cuvântului în șir;<br>
b) câte anagrame ale cuvântului sunt.</p>

<h1>Date de intrare</h1>

<p>Fişierul de intrare <code>anagrame2.in</code> conţine pe prima linie un număr natural <code>p</code>. Pentru toate testele de intrare, numărul <code>p</code> poate avea doar valoarea <code>1</code> sau valoarea <code>2</code>. Pe a doua linie se află șirul de caractere, litere ale alfabetului englez. Pe următoarea linie se află cuvântul din enunț.</p>

<h1>Date de ieșire</h1>

<p>Dacă valoarea lui <code>p</code> este <code>1</code>, <strong>se va rezolva numai punctul a)</strong> din cerință. În acest caz, în fişierul de ieşire <code>anagrame2.out</code>  se va scrie prima anagramă a cuvântului în șir.</p>

<p>Dacă valoarea lui <code>p</code> este <code>2</code>, <strong>se va rezolva numai punctul b)</strong> din cerință. În acest caz, în fișierul de ieșire <code>anagrame.out</code> se va scrie un număr natural reprezentând numărul de anagrame găsite în șir.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ Lungime șir ≤ 100.000</code></li>
	<li><code>1 ≤ Lungime cuvânt ≤ 25.000</code></li>
	<li>Există tot timpul cel puțin o anagramă a cuvântului în șir.</li>
	<li>Pentru rezolvarea corectă a primei cerinţe se acordă 20 de puncte, iar pentru cerința a doua se acordă 80 de puncte.</li>
</ul>


<h1>Exemplul 1:</h1>

<p><code>anagrame2.in</code></p>

<pre contenteditable="true" editable="true">1
anabnaacdRaanaSA
ana</pre>

<p><code>anagrame2.out</code></p>

<pre contenteditable="true" editable="true">ana</pre>

<h1>Explicație</h1>

<p><code>p = 1</code></p>

<p>Prima anagramă a cuvântului în șir este <code>ana</code>. </p>

<p><strong>Atenție! Pentru acest test se rezolvă doar cerința a).</strong></p>


<h1>Exemplul 2:</h1>

<p><code>anagrame2.in</code></p>

<pre contenteditable="true" editable="true">2
anabnaacdRaanaSA
ana</pre>

<p><code>anagrame2.out</code></p>

<pre contenteditable="true" editable="true">4</pre>

<h1>Explicație</h1>

<p><code>p = 2</code></p>

<p>Sunt <code>4</code> anagrame ale cuvântului <code>ana</code> în șir: <code>ana</code>, <code>naa</code>, <code>aan</code>, <code>ana</code>.</p>

<p><strong>Atenție! Pentru acest test se rezolvă doar cerința b).</strong></p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("anagrame2.in");
ofstream cout("anagrame2.out");

char s[100001] , cuv[25000];
int f1[200] , f2[200];

bool egale()
{
    for(int i = 63 ; i <= 125 ; ++i)
        if(f1[i]!=f2[i])
            return 0;
    return 1;
}

int main()
{
    int c;
    cin >> c;
    cin >> s;
    cin >> cuv;
    if(c==2)
    {
        for(int j = 0 ; j < strlen(cuv) ; ++j)
            f1[(int)cuv[j]]++;
        for(int i = 0 ; i < strlen(cuv) ; ++i)
            f2[(int)s[i]]++;
        int cnt=0;
        int i = strlen(cuv);
        if(egale())
                cnt++;
        while(s[i]!='\0')
        {
            f2[(int)s[i-strlen(cuv)]]--;
            f2[(int)s[i]]++;
            if(egale())
                cnt++;
            i++;
        }
        cout << cnt;
    }
    else
    {
        for(int j = 0 ; j < strlen(cuv) ; ++j)
            f1[(int)cuv[j]]++;
        for(int i = 0 ; i < strlen(cuv) ; ++i)
            f2[(int)s[i]]++;
        int cnt=0;
        int i = strlen(cuv);
        if(egale())
                {
                    for(int j = i - strlen(cuv)+1 ; j < i+1 ; ++j)
                        cout << s[j];
                }
            else
        while(s[i]!='\0')
        {
            f2[(int)s[i-strlen(cuv)]]--;
            f2[(int)s[i]]++;
            if(egale())
                {
                    for(int j = i - strlen(cuv)+1 ; j <= i ; ++j)
                        cout << s[j];
                    break;
                }
            i++;
        }
    }
    return 0;
}</pre>
