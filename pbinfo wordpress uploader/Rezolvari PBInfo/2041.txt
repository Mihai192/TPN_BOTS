<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <vector>
#include <queue>
using namespace std;

ifstream cin("camelot.in");
ofstream cout("camelot.out");

const int dic[] = {-2 , -2 , -1 , -1 ,  1 , 1 ,  2 , 2};
const int djc[] = {-1 ,  1 , -2 ,  2 , -2 , 2 , -1 , 1};

int cer , n , m , k , a[1001][1001] , c , pmin = 99999999 , pmax , x , y;
struct poz
{
    int i , j;
}C[1001];
queue <poz> Q;
bool inside(int i , int j)
{
    return i >= 1 &amp;&amp; i <= n &amp;&amp; j >= 1 &amp;&amp; j <= m;
}

int main()
{
    cin >> cer;
    cin >> n >> m >> k;
    int ir , jr;
    cin >> ir >> jr;
    for(int i = 1 ; i <= k ; i++)
    {
        cin >> x >> y;
        C[i] = {x , y};
        a[x][y] = -1;
    }
    Q.push({ir , jr});
    a[ir][jr] = 1;
    while(!Q.empty() &amp;&amp; c < k)
    {
        poz r = Q.front();
        for(int i = 0 ; i < 8 ; i++)
        {
            int inou = r.i + dic[i];
            int jnou = r.j + djc[i];
            if(inside(inou , jnou) &amp;&amp; a[inou][jnou] <= 0)
            {
                if(a[inou][jnou] == -1) c++;
                a[inou][jnou] = a[r.i][r.j] + 1;
                Q.push({inou , jnou});
            }
        }
        Q.pop();
    }

    for(int i = 1 ; i <= k ; i++)
    {
        if(a[C[i].i][C[i].j] < pmin) pmin = a[C[i].i][C[i].j];
        if(a[C[i].i][C[i].j] > pmax) pmax = a[C[i].i][C[i].j];
    }

    if(cer == 1) cout << pmin - 1;
    else cout << pmax - 1;

}</pre>
