<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("suma7.in");
ofstream cout("suma7.out");
int a[301][301] , sumalin[301] , sumacol[301] , smax , lmax , colmax , sdp[301] , sndp[301] , sds[601];
int main()
{
    int i , j , n , d , s;
    cin >> n;
    for(i = 1 ; i <= n ;i++)
        for(j = 1 ; j <= n ;j++)
        {
            cin >> a[i][j];
            sumalin[i] += a[i][j];
            sumacol[j] += a[i][j];
            d = i - j;
            if(d >= 0) sdp[d] += a[i][j];
            else sndp[-d] += a[i][j];
            sds[i+j] += a[i][j];
        }
    for(i = 1 ; i <= n ;i++)
        for(j = 1 ; j <= n ;j++)
        {
            s = sumalin[i] + sumacol[j] + sds[i+j] - a[i][j] * 3;
            if(i - j >= 0) s += sdp[i-j];
            else s += sndp[j-i];
            if(s > smax) {smax = s ; lmax = i ; colmax = j;}
        }
    cout << smax << endl << lmax << " " << colmax;
    return 0;
}</pre>
