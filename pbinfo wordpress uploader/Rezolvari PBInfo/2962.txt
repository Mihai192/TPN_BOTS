<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

const static int kMaxN = 1000;

int main() {
    ifstream cin("traseu.in");
    ofstream cout("traseu.out");

    int N, M; assert(cin >> N >> M);
    assert(1 <= N &amp;&amp; N <= kMaxN);
    assert(1 <= M &amp;&amp; M <= kMaxN);

    vector< pair<int, int> > pos(N * M, make_pair(-1, -1));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j) {
            int x; assert(cin >> x);
            assert(1 <= x &amp;&amp; x <= N * M);
            --x;
            assert(pos[x] == make_pair(-1, -1));
            pos[x] = make_pair(i, j);
        }

    vector<int> best(N, M);
    int answer = -1;
    for (int i = 0; i < N * M; ++i) {
        int x, y; tie(x, y) = pos[i];
        for (int j = 0; j <= x; ++j)
            if (best[j] <= y)
                answer = max(answer, x - j + y - best[j]);

        best[x] = min(best[x], y);
    }

    cout << answer + 1 << "\n";
}</pre>
