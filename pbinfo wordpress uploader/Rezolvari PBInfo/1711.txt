<h3>Cerința</h3>

<p>Scrieţi un program care citeşte din fişierul de intrare mai multe şiruri de caractere formate din litere mici ale alfabetului englez şi determină câte dintre acestea sunt formate din două şiruri identice (cu lungimea cel puţin 1) concatenate.</p>

<h3>Date de intrare</h3>

<p>Fișierul de intrare <code>siruri_concatenate.in</code> conține pe prima linie un număr natural nenul <code>n</code>, iar pe următoarele <code>n</code> linii câte un şir format din litere mici ale alfabetului englez.</p>

<h3>Date de ieșire</h3>

<p>Fișierul de ieșire <code>siruri_concatenate.out</code> va conține pe prima linie numărul de şiruri din fişierul de intrare care sunt formate din două şiruri identice concatenate.</p>

<h3>Restricții și precizări</h3>

<ul>
	<li><code>1 ≤ n ≤ 1000000</code></li>
	<li>şirurile au cel mult <code>5000</code> de caractere.</li>
</ul>

<h3>Exemplu:</h3>

<p><code>siruri_concatenate.in</code></p>

<pre contenteditable="true" editable="true">5
sirsir
micropico
pp
vara
nanonano</pre>


<p><code>siruri_concatenate.out</code></p>

<pre contenteditable="true" editable="true">3</pre>

<h3>Explicație</h3>

<p>Cele 3 şiruri din fişier obţinute prin concatenarea a două şiruri identice sunt: <code>sirsir</code> (<code>sir</code>), <code>pp</code> (<code>p</code>) şi <code>nanonano</code> (<code>nano</code>).</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <cstring>
using namespace std;

ifstream cin("siruri_concatenate.in");
ofstream cout("siruri_concatenate.out");

int main()
{
    int n;
    cin >> n;
    int cnt=0;
    for(int i = 1 ; i <= n ; ++i)
    {
        char s[5001];
        cin >> s;
        bool ok = true;
        if(strlen(s)%2==0)
        {
            for(int j = 0 , q = strlen(s) / 2 ; s[q]!='\0' ; ++j , ++q)
            if(s[q]!=s[j])
            {
                ok=false;
                break;
            }
        }
        else
            ok=false;
        if(ok)
            cnt++;
    }
    cout << cnt;
    return 0;
}</pre>
