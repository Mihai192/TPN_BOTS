<h1>Cerința</h1>

<p>Se dă un număr natural <code>x</code> și două șiruri <code>a</code> și <code>b</code>, cu <code>n</code>, respectiv <code>m</code> elemente, numere naturale, <strong>ordonate strict crescător</strong>. Să se afișeze, în ordine crescătoare, multiplii lui <code>x</code> care se află doar în unul dintre cele două șiruri.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>interclasm.in</code> conține pe prima linie numărul <code>x</code>, pe linia a doua numărul <code>n</code>; urmează <code>n</code> numere naturale, ordonate crescător, ce pot fi dispuse pe mai multe linii. Linia următoare conține numărul <code>m</code> și urmează <code>m</code> numere naturale, ordonate crescător, ce pot fi dispuse pe mai multe linii.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>interclasm.out</code> va conține pe prima linie valorile determinate, separate printr-un spațiu.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>0 &lt; x &lt; 1.000.000</code></li>
	<li><code>1 ≤ n, m ≤ 100.000</code></li>
	<li>valorile elementelor celor două șiruri vor fi mai mici decât <code>1.000.000</code></li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;border:0;width:728px;height:15px;" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" width="728" height="15" frameborder="0" src="https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-7152921241438800&amp;output=html&amp;h=15&amp;slotname=6421896419&amp;adk=1130877403&amp;adf=3283908322&amp;w=728&amp;lmt=1595361744&amp;psa=1&amp;guci=1.2.0.0.2.2.0.0&amp;url=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F242%2Finterclasm&amp;flash=0&amp;wgl=1&amp;dt=1595361744044&amp;bpp=18&amp;bdt=214&amp;idt=152&amp;shv=r20200716&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;prev_fmts=336x280%2C0x0&amp;nras=1&amp;correlator=7931043475102&amp;frm=20&amp;pv=1&amp;ga_vid=704522989.1595356494&amp;ga_sid=1595361744&amp;ga_hid=466220293&amp;ga_fc=0&amp;iag=0&amp;icsg=17380323360767&amp;dssz=47&amp;mdo=0&amp;mso=0&amp;u_tz=180&amp;u_his=50&amp;u_java=0&amp;u_h=900&amp;u_w=1440&amp;u_ah=816&amp;u_aw=1440&amp;u_cd=30&amp;u_nplug=3&amp;u_nmime=4&amp;adx=41&amp;ady=1066&amp;biw=1200&amp;bih=649&amp;scr_x=0&amp;scr_y=0&amp;oid=3&amp;pvsid=429159455832449&amp;pem=564&amp;ref=https%3A%2F%2Fwww.pbinfo.ro%2Fprobleme%2F2668%2Fcomun&amp;rx=0&amp;eae=0&amp;fc=896&amp;brdim=22%2C45%2C22%2C45%2C1440%2C23%2C1200%2C772%2C1200%2C649&amp;vis=1&amp;rsz=%7Co%7CeEbr%7C&amp;abl=NS&amp;pfx=0&amp;fu=8192&amp;bc=31&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;xpc=pNTMcssj6n&amp;p=https%3A//www.pbinfo.ro&amp;dtd=159" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" data-google-container-id="a!2" data-load-complete="true" data-google-query-id="CNu7s9CR3-oCFQ7BuwgddL0OFA"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><code>interclasm.in</code></p>

<pre contenteditable="true" editable="true">5
7
1 2 3 4 
7 20 60
9
3 5 7 
8 9 10 12 
20 24</pre>

<p><code>interclasm.out</code></p>

<pre contenteditable="true" editable="true">5 10 60</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <algorithm>
using namespace std;

ifstream fin("interclasm.in");
ofstream fout("interclasm.out");

int main()
{
    int x;
    fin >> x;
    int n;
    fin >> n;
    int a[100000] , b[100000] , v[200000];
    int p = 0;
    for(int i = 0 ; i < n ; ++i)
    {
        fin >> a[i];
        v[p]=a[i];
        p++;
    }
    int m;
    fin >> m;
    for(int i = 0 ; i < m ; ++i)
    {
        fin >> b[i];
        v[p]=b[i];
        p++;
    }
    sort(v , v+p);
    for(int i = 0 ; i < p ; ++i)
    {
        if(v[i]!=v[i-1] &amp;&amp; v[i]!=v[i+1])
        {
            if(v[i]%x==0)
            fout << v[i] << ' ';
        }
    }
    
}</pre>
