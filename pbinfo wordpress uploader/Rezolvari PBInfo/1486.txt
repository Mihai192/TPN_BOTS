<h1>Cerinţa</h1>

<p>Se dau <code>n</code> numere întregi. Calculaţi cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Date de intrare</h1>

<p>Programul citește de la tastatură numărul <code>n</code>, iar apoi <code>n</code> numere întregi, separate prin spaţii.</p>

<h1>Date de ieşire</h1>

<p>Programul afișează pe ecran numărul <code>MIN</code>, reprezentând cel mai mic dintre cele <code>n</code> numere date.</p>

<h1>Restricţii şi precizări</h1>

<ul>
	<li><code>1 ≤ n ≤ 1000</code></li>
	<li>cele <code>n</code> numere citite vor avea cel mult <code>9</code> cifre</li>
</ul>

<br><script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- link-unit -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:15px" data-ad-client="ca-pub-7152921241438800" data-ad-slot="6421896419" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script><h1>Exemplu</h1>

<p><strong>Date de intrare</strong></p>

<pre contenteditable="true" editable="true">5
7 6 9 6 8</pre>

<p><strong>Date de ieșire</strong></p>

<pre contenteditable="true" editable="true">6</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
#include <queue>
using namespace std;

ifstream cin("gropi.in");
ofstream cout("gropi.out");

int n , m , x , y;
float a[1001][1001];
int cnt[10];

bool inmat(int x , int y)
{
    return x >= 1 &amp;&amp; x <= n &amp;&amp; y >= 1 &amp;&amp; y <= m;
}

int di[]={-1 , -1 , 0 , 1 , 1 , 1 , 0 , -1};
int dj[]={0 , 1 , 1 , 1 , 0 , -1 , -1 , -1};

int main()
{
    cin >> n >> m >> x >> y;
    for(int i = 1 ; i <= n ; ++i)
        for(int j = 1 ; j <= m ; ++j)
            cin >> a[i][j];
    for(int d = 0 ; d < 8 ; ++d)
    {
        int inou = x , jnou = y;
        while(inmat(inou , jnou))
        {
            inou += di[d] , jnou += dj[d];
            if(inmat(inou , jnou) &amp;&amp; a[inou][jnou]==0)
                a[inou][jnou] = 1 , cnt[d]++;
        }
    }
    int poz , max = 0;
    for(int i = 0 ; i < 8 ; ++i)
        if(cnt[i] >= max)
            max = cnt[i] , poz = i;
    if(poz == 0)
        cout << "N " << cnt[poz];
    if(poz == 1)
        cout << "NE " << cnt[poz];
    if(poz == 2)
        cout << "E " << cnt[poz];
    if(poz == 3)
        cout << "SE " << cnt[poz];
    if(poz == 4)
        cout << "S " << cnt[poz];
    if(poz == 5)
        cout << "SV " << cnt[poz];
    if(poz == 6)
        cout << "V " << cnt[poz];
    if(poz == 7)
        cout << "NV " << cnt[poz];
    return 0;
}</pre>
