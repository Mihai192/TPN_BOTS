<p>După ce au mers împreună prin lume, Păcală și Tândală au strâns o căruță plină de bănuți de aur, iar acum îi răstoarnă pe toți în curtea casei și îi împart în <code>N</code> grămezi. Păcală numără bănuții din fiecare grămadă și îi dictează lui Tândală <code>N</code> numere naturale pe care acesta trebuie să le scrie în ordine pe o tăbliță. După ore bune de muncă, Păcală constată că Tândală a scris pe un singur rând, în ordine, de la stânga la dreapta, toate numerele dictate de el, dar lipite unul de altul. Acum pe tăbliță e doar un șir lung de cifre. Ce să facă Păcală acum?</p>

<h1>Cerința</h1>

<p>Cunoscând cele <code>N</code> numere naturale dictate de Păcală, scrieți un program care să determine:<br>
1. numărul cifrelor scrise pe tăbliță de Tândală;<br>
2. ce-a de-a <code>K</code>-a cifră de pe tăbliță, în ordine de la stânga la dreapta;<br>
3. cel mai mare număr ce se poate forma cu exact <code>P</code> cifre alăturate de pe tăbliță, considerate în ordine de la stânga la dreapta.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>aur.in</code> conţine:<br>
- pe prima linie un număr natural <code>C</code> care reprezintă numărul cerinței și poate avea valorile <code>1</code>, <code>2</code> sau <code>3</code>.<br>
- pe cea de-a doua linie un număr natural <code>N</code> dacă cerința este <code>1</code>, sau două numere naturale <code>N</code> și <code>K</code> (despărțite printr-un spațiu) dacă cerința este <code>2</code>, sau două numere naturale <code>N</code> și <code>P</code> (despărțite printr-un spațiu) dacă cerința este <code>3</code>.<br>
- pe cea de-a treia linie, <code>N</code> numere naturale despărțite prin câte un spațiu, ce reprezintă, în ordine, numerele pe care Păcală i le dictează lui Tândală.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>aur.out</code> va conține pe prima linie un singur număr natural ce reprezintă rezultatul determinat conform fiecărei cerințe.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li><code>1 ≤ N ≤ 100.000</code> și <code>1 ≤ K ≤ 900.000</code>;</li>
	<li>Se garantează ca există cel puțin <code>K</code> cifre scrise pe tăbliță.</li>
	<li><code>1 ≤ P ≤ 18</code>; Se garantează ca există cel puțin <code>P</code> cifre scrise pe tăbliță.</li>
	<li>toate numere dictate de Păcală sunt nenule și au cel mult <code>9</code> cifre fiecare;</li>
	<li>Pentru rezolvarea corectă a primei cerințe se acordă <code>20</code> de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă <code>30</code> de puncte, iar pentru rezolvarea corectă a celei de-a treia cerințe se acordă <code>40</code> de puncte.</li>
	<li>În concurs s-au acordat <code>10</code> puncte din oficiu. Aici se acordă pentru exemplele din enunț.</li>
</ul>

<h1>Exemplul 1:</h1>

<p><code>aur.in</code></p>

<pre contenteditable="true" editable="true">1
7
25 9 13 459 2 79 9</pre>

<p><code>aur.out</code></p>

<pre contenteditable="true" editable="true">12</pre>

<h3>Explicație</h3>

<p>Se rezolvă <strong>cerința 1</strong>. Tândală a scris pe tăbliță: <code>259134592799</code>. Numărul cifrelor scrise de Tândală este <code>12</code>.</p>

<h1>Exemplul 2:</h1>

<p><code>aur.in</code></p>

<pre contenteditable="true" editable="true">2
7 10
25 9 13 459 2 79 9</pre>

<p><code>aur.out</code></p>

<pre contenteditable="true" editable="true">7</pre>

<h3>Explicație</h3>

<p>Se rezolvă <strong>cerința 2</strong>. <code>N</code> are valoarea <code>7</code> și <code>K</code> are valoarea <code>10</code>. Pe tăbliță este scris: <code>259134592799</code>, cea de-a zecea cifră este <code>7</code>.</p>

<h1>Exemplul 3:</h1>

<p><code>aur.in</code></p>

<pre contenteditable="true" editable="true">3
7 4
25 9 13 459 2 79 9</pre>

<p><code>aur.out</code></p>

<pre contenteditable="true" editable="true">9279</pre>

<h3>Explicație</h3>

<p>Se rezolvă <strong>cerința 3</strong>. <code>N</code> are valoarea <code>7</code> și <code>P</code> are valoarea <code>4</code>. Tândală a scris pe tăbliță: <code>259134592799</code>. Cel mai mare număr format din patru cifre este <code>9279</code>.</p>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;

ifstream cin("aur.in");
ofstream cout("aur.out");

unsigned char a[900001];
int ind;
unsigned long long maxi;

int nrcif(int n)
{
    int c = 0;
    while(n != 0)
    {
        c++;
        n /= 10;
    }
    return c;
}

int ogl(int n)
{
    int ogl = 0;
    while(n != 0)
    {
        ogl = ogl * 10 + n % 10;
        n /= 10;
    }
    return ogl;
}
int main()
{
    long long cer , n , k , p , cnt = 0 , x;
    cin >> cer;
    if(cer == 1)
    {
        int sum = 0;
        cin >> n;
        for(int i = 1 ; i <= n ; i++)
            cin >> x , sum += nrcif(x);
        cout << sum;
    }
    else if(cer == 2)
    {
        cin >> n >> k;
        for(int i = 1 ; i <= n ; i++)
        {
            cin >> x;
            int og = ogl(x);
            while(x % 10 == 0) 
            {
                cnt++;
                x /= 10;
                if(cnt == k) cout << 0;
            }
            while(og != 0)
            {
                cnt++;
                if(cnt == k) cout << og % 10;
                og /= 10;
            }
        }
    }
    else
    {
        cin >> n >> p;
        for(int i = 1 ; i <= n ; i++)
        {
            cin >> x;
            int og = ogl(x) , l = 0;
            while(x % 10 == 0) l++ , x /= 10;
            while(og != 0)
            {
                a[++ind] = og % 10;
                og /= 10;
            }
            while(l)
                a[++ind] = 0 , l--;
        }
        for(int i = 1 ; i <= ind - p + 1; i++)
        {
            unsigned long long rez = 0;
            for(int j = 1 ; j <= p ; j++)
                    rez = rez * 10 + a[i+j-1];
            if(rez > maxi) maxi = rez;
        }
        cout << maxi;
    }
}</pre>
