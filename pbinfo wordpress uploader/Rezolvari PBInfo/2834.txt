<h1>Cerința</h1>

<p>Se dă un șir de cel mult un milion de numere naturale din intervalul <code>[0,10</code><sup><code>9</code></sup><code>]</code>, separate prin câte un spațiu. Șirul are cel puțin doi termeni pari și cel puțin doi termeni impari.</p>

<p>Se cere să se afișeze mesajul <code>DA</code> dacă șirul aflat în fișier are un subșir ordonat crescător, format din toți termenii pari ai săi, și un subșir ordonat descrescător, format din toți termenii impari ai săi. Dacă nu există două astfel de subșiruri, programul afișează pe ecran mesajul <code>NU</code>.</p>

<h1>Date de intrare</h1>

<p>Fișierul de intrare <code>sir13.in</code> conține elementele șirului, separate printr-un spațiu.</p>

<h1>Date de ieșire</h1>

<p>Fișierul de ieșire <code>sir13.out</code> va conține pe prima linie mesajul <code>DA</code> sau <code>NU</code>, corespunzător cerinței.</p>

<h1>Restricții și precizări</h1>

<ul>
	<li>Utilizați un algoritm eficient din punctul de vedere al timpului de executare și al memoriei necesare:
	<ul>
		<li>se recomandă evitarea stocării elementelor șirului într-un tablou sau în altă structură de date similară;</li>
	</ul></li>
	</ul>

<h1>Exemplul 1</h1>

<p><code>sir13.in</code></p>

<pre contenteditable="true" editable="true">7 2 5 2 4 3 8</pre>

<p><code>sir13.out</code></p>

<pre contenteditable="true" editable="true">DA</pre>

<h1>Exemplul 1</h1>

<p><code>sir13.in</code></p>

<pre contenteditable="true" editable="true">5 2 7 2 4 3 8</pre>

<p><code>sir13.out</code></p>

<pre contenteditable="true" editable="true">NU</pre>						
<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include <fstream>
using namespace std;
ifstream cin("sir13.in");
ofstream cout("sir13.out");
int n , x , maxi = 1000000001 , mini , ok;

int main()
{
    while(cin >> x)
    {
        if(x % 2 == 0)
        {
            if(x < mini) ok = 1;
            else mini = x;
        }
        else
        {
            if(x > maxi) ok = 1;
            else maxi = x;
        }
    }
    if(ok == 0) cout << "DA";
    else        cout << "NU";
    return 0;
}</pre>
